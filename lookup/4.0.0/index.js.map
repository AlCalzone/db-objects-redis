{"version":3,"sources":["index.js"],"names":["_0xc10ae5","require","_0x3f0cff","_0x1f8d8a","_0x832fbc","_0x45ffe1","isDeepStrictEqual","_0x28b59d","_0x332fc1","_0x5e7ab1","__dirname","_0x2baae8","_0x3bd48e","_0x19354c","_0x1c6cdf","_0x1ece43","_0x398fb3","_0x405f0e","_0x24b22d","Object","_0x45e4f8","Array","undefined","JSON","console","_0x3a5928","_0x5f3c31","_0x51de9e","_0x1f9639","_0x4b3d44","_0x26174e","_0x8e5f44","_0x3bcae6","_0x23010d","_0x36cd83","_0x3d3c2c","_0x32d1d5","_0x9a2da7","constructor","_0x689b41","_0x5f11dd","RegExp","_0x4d022d","_0x5e026e","_0x3aec8a","_0xfebaf5","_0x2936ae","_0x175e14","_0x197a3f","_0x5f0fea","Error","_0xc45421","_0x2bbb24","_0x34e842","_0xd7cb0c","_0x38f3ca","_0x3a04c1","_0xf5e6ce","_0x241a2a","_0x3f57d3","_0x48de91","_0x8ff7c9","setImmediate","_0x45b2c5","_0x1401ca","_0x32aba9","_0x2000ed","_0x3b1dfc","_0x391bf5","_0x4e54b2","_0x262085","_0x4b9af3","_0x24e651","_0x2e07d8","_0x3a3041","_0x22f080","_0x55f5ce","_0x3047d4","_0x41ff31","_0x257934","_0x5f2b87","_0xb43cf9","_0x4a0b04","_0x3b9f7a","_0x5664ca","Promise","_0x1b431e","_0x18c5a3","_0x35130e","_0x4d3638","Buffer","_0x49606c","_0x5c99a3","_0x6cbdd8","_0x47bdd3","_0x513e90","_0x39014a","_0x382d71","_0x444326","_0x5cc789","_0x48735b","_0x31ea7a","_0x31b719","_0x2c08fa","_0x40a71f","_0x5c9702","_0x584aaf","_0x345cfb","_0x170ac4","_0x21740f","_0x1188be","_0x2fb9ef","_0x2f75c2","_0x3ef317","_0x30f118","_0x536a4e","_0x1ce57a","_0x3bc09f","_0x1fbcf8","_0x340cf5","_0x3058ee","_0x349f5c","_0x18fa7e","_0x449fe1","_0x37b178","_0x2b743f","_0xfd2c34","_0x784a50","_0x53c5cb","_0x48cb5c","_0x1030a9","_0x1ff762","_0x4f3c89","_0x531adf","_0x4b64fe","_0x32a305","_0x1ad645","_0x59ca92","_0x188c38","_0x486b0c","_0xae7544","_0x5a7aef","_0x1aa00f","_0x1362da","_0xd4f666","_0x4c8dcf","_0x211c91","_0x590399","Date","_0x3bd007","_0x43e24b","_0x36e36c","_0xa3bcfb","_0x18109d","_0x3d6b87","_0x579c35","_0x48a835","_0x3389b0","_0x1b3074","_0x4039fd","_0x78a3e3","_0x14f022","_0x2946f2","_0x404003","_0x1ee42f","_0x43c0c2","_0x1429e9","_0x51e26f","_0x2db497","_0x2880b4","_0xeda29f","_0x7fba16","_0x4b346c","_0x1d9eb3","_0x5979f4","_0x132ff3","_0x3a7299","_0x1f13e7","_0x12430f","_0xb15cfa","_0x4b1a6c","_0x268a48","_0x232c1c","_0x20124e","_0x2a8091","_0x860f49","_0x2a0a66","_0x4d429f","_0x5f2b33","_0x4a3a7b","_0x1f1efa","_0x14c163","_0x315e4c","_0x5d60e4","_0x587482","_0x36090b","_0x37d532","_0x51d608","_0x4fe6e9","_0x3a008f","_0x393805","_0x5355d4","_0x19fe2c","_0x1c7b96","_0x2976b0","_0x1e701c","_0x31c049","_0x1a263b","_0x54bd7f","_0x5ec2c3","_0x514ffc","_0x1aece8","_0x3f88d6","_0x513410","_0x579e90","_0x2548e5","_0x315432","_0x316511","_0x37fdcb","_0x4b5682","_0x44dd20","_0x4f0867","_0x407704","_0x4eeaec","_0x55baf7","_0x4bd3d3","_0x2589df","_0xaf1f85","_0x5496cd","_0x57dc44","_0x520077","_0xdd1eee","_0x37219c","_0x3bbe5d","_0x3b758b","_0x35eb9a","_0x466050","_0x4f6767","_0x1d877c","_0x122943","_0x3393ed","_0x3eda94","_0x1de065","_0x5b94cd","_0x44b596","_0x4efa33","_0x15b535","_0x201684","_0x40e2dc","_0xfdba39","_0x4148b8","_0x4d034b","_0x3287a0","_0x244af3","_0x33b15c","_0x44c2a0","_0x46c37f","_0x4cc3c5","_0x2aab3c","_0x4e6171","_0x1872b4","_0x2bfbef","_0x5b5fa7","_0x24ce76","_0x4cc2e5","_0x22a465","_0x1c3025","_0x5d2dbe","_0x4f6712","_0x4e748e","_0x5b809a","_0x30c09d","_0x20edf2","_0x11c1a7","_0x2afb3","_0x2ce1e7","_0xa81d7d","_0x5917b9","_0x1f1127","_0x248cb2","_0x5dc329","_0x52019a","_0x59b0a2","_0x28a987","_0x575931","_0x2a0327","_0x4ec100","_0xc94027","_0x5780ca","_0x3f37e7","_0x456778","_0x497f68","_0x3b10d7","_0x1b1336","_0x27ae4a","_0x2e74cf","_0x2a42f0","_0x357dba","_0x576aaa","_0xbda656","_0x57b46c","_0x2026fc","_0x42a9c9","_0x5ea2cf","_0x382698","_0x4f3b00","_0x5cb123","_0x3342f2","_0x7da0bf","_0x5bad70","_0x343dfb","_0x148b94","_0x265c44","_0x125b29","_0x42db6a","_0x4d3b07","_0x94663e","_0x2f1770","_0x3a0078","_0x40b210","_0x4c9a96","_0x4cf5e6","_0x155c0c","_0x12c63a","_0x33cf0c","_0x259b09","_0x7fc6c9","_0x5a371a","_0x562074","_0x1fec26","_0x3c1ae4","_0x5617fa","_0x8e5f78","_0x32cc0f","_0x3197a1","_0x251f3d","_0x949983","_0x1213d0","_0x45e5e3","_0x543a43","_0x20700b","_0x126b3c","_0x4fa2aa","_0x158e12","_0x3985d0","_0x3e8ab1","_0x2ebe3e","_0xa3cecd","_0x520364","_0x6b14b3","_0x5bb433","_0x3e24e4","_0x2f0b75","_0x375fe4","_0xd30cc2","_0x22547d","_0x8ccc8a","_0x2f9650","_0x3648dc","_0x12bb53","_0x5eed80","_0x32f78b","_0x4d4844","_0x42edb3","_0x4f330e","_0x4c7424","_0x54b2fe","_0x833699","_0x3e8d0b","_0x556fa8","_0xb97877","_0x3922e0","_0x4a80fe","_0x37dba4","_0x3c857c","_0x15399a","_0xc38c56","_0x30ff01","_0x5b0041","_0x46f27f","_0x3a599e","_0x2574d0","_0xbd868b","_0x4fe7ed","_0x29449c","_0x46929b","_0x5851cd","_0x463967","_0x338e49","_0x173e98","_0x538de1","_0x5cc61f","_0x54c86d","_0x447619","_0x71129f","_0xc450c8","_0x273884","_0x30d50f","_0x5c5a35","_0x42fe9f","_0xc5013e","_0x3c190e","_0xf4b6c6","_0x425ae9","_0xaaca4a","_0xccb5a6","_0xe0ccab","_0x523442","_0x6f52a4","_0x268e5e","_0x546d62","_0x5d71e0","_0x9236f0","_0x368ced","_0x433b70","_0x2c35a9","_0x150a46","_0x16e679","_0x3c6088","_0x5d359b","_0x11f05a","_0x5e98b5","_0x23df74","_0x5e13eb","_0x52dbc3","_0x462549","_0x16ddc2","_0x4e1c5d","_0x21ac1f","_0x183d7a","_0x4f3df8","_0x5aaa4c","_0x8af475","_0x537341","_0x29aae5","_0x1da5db","_0xb55af7","_0x55ca98","_0x316fa2","_0x4f3b2b","_0xd81718","_0x1f4b97","_0x40769f","_0x1800d0","_0x56b5ae","_0x544962","_0xda1a4a","_0x20086f","_0x49bfae","_0x476cba","_0x2b4fdb","_0x3d46d7","_0x5dd6c1","_0x5b8b23","_0x292be0","_0x5bc30c","_0x814eb1","_0x112c34","_0x203725","_0x59a1b3","_0x17285e","_0x1974d3","_0x5ca660","_0x2e46a5","_0x481e83","_0x3b2ed7","_0x2a44cc","_0x2baa44","_0x396898","_0x5824d3","_0x4949e6","_0x2afebe","_0x12d5cd","_0x174ff1","_0x49ac56","_0x1f2085","_0xba843d","_0x39a6d2","_0x116474","_0x5df306","_0x1008f3","_0x5ea606","_0x24dfae","_0x525928","_0x57407c","parseInt","_0x5c8d75","_0x3920d6","_0xde5e41","_0x33e736","_0x311e61","_0x4ff248","_0x44b972","_0x3bde72","_0x534654","_0x3c8177","_0x48cd6c","_0x3e976e","_0x50a094","_0x7ce35c","_0x4f238f","_0x2bbf01","_0xe5f1a2","_0x12a28b","_0x49b9b3","_0x2b33fc","_0x45bac3","_0x24787f","_0x576474","_0x5233f2","_0x3d4e70","_0x46b9f0","_0x59fb26","_0x51edc4","_0x468533","_0xfa5955","_0x2a7cde","_0x34c192","_0x502fb3","_0x193ae5","_0x42df16","_0x5d2197","_0x14f51c","_0x134bab","_0x3c19d1","_0x1678a0","_0x4afd88","_0x21e37d","_0x15fb7e","_0x3db4f1","_0x6aa5b9","_0x2bca26","_0x2095c6","_0x2b734a","_0x1b45e2","_0x1c12de","_0x4433a0","_0x2ca6fa","_0x3c07fd","_0x39205","_0x2a4b84","_0x3a86e8","_0x574484","_0x3a7897","_0x3a921e","_0x5d4635","_0x179ed0","_0xd7c6cf","_0x4a5915","_0x292b33","_0xcad5b2","_0xb082e2","_0x13cf83","_0x562561","_0x90ecff","_0x424c2d","_0x199c49","_0x5b6f7a","_0x32d097","_0x204a13","_0x7d903a","_0x2d1f9a","_0x337976","_0x41e92b","_0x40aa5d","_0x536054","_0x17b0c1","_0x21659b","_0x4f2030","_0x45feb7","_0x5ca1e4","_0x49f54c","_0x5b39df","_0x1eabf5","_0x11c14d","_0x3a38bb","_0x289817","_0xeeca69","_0x5d083a","_0x1063dd","_0x447b36","_0x9871f2","_0x5ccac0","_0x9ae05c","_0x346865","_0x5ec85a","_0x79c346","_0x3f1fc1","_0x59f325","_0xa85c0c","_0x11c0b8","_0x2f46ea","_0xe3f3fa","_0x435abf","_0x5b8f9c","_0xa8d223","_0x5f38be","_0x2e76f0","_0x52e4b6","_0x17b985","_0x985050","_0x2ff68b","_0x476ed4","_0x28c926","_0x101abd","_0xec3c3a","_0x48e393","_0x5cc354","_0x28023d","_0x59e719","_0x423fb3","_0x11b0c7","_0x3a2546","_0x304133","_0x3cd08e","_0x7e510f","_0x25ba78","_0x52c89b","_0x85bd7a","_0x13636b","_0x2cd16b","_0x34ab6a","_0x5064ec","_0x452950","_0x4ff45a","_0xc3c1b8","_0x483080","_0x123284","_0x240fb0","_0xef99fa","_0x1b3c8a","_0x8ae77e","_0x454d29","_0x579670","_0xbfee45","_0x194a06","_0x23a643","_0x5df942","_0xe516aa","_0x335b38","_0x286d0c","_0x21f154","_0x2df0dd","_0x10caf4","_0x398959","_0x4e51e6","_0x21f4fb","_0x5dc974","_0x31e323","_0x465e5c","_0x1ac0bb","_0x142db4","_0x3085ac","_0x2bba1e","_0x1182cf","_0x5504a1","_0x2ce9e5","_0x589b6d","_0x4d3ed6","_0x31086d","_0x332831","_0x2fe538","_0x32ad50","_0x39eb75","_0x29b4e5","_0x3cfeff","_0x18f127","_0x2346b9","_0x2f5f6c","_0x5a758d","_0x1f6425","_0x4dfa96","_0x19c0c6","_0x3bc539","_0x57c002","_0x4bfcda","_0x33e079","_0x1c3852","_0x1cccd3","_0x575907","_0x205b92","_0xdb80fb","_0x11c928","_0x22f5f2","_0xafbff9","_0x4c6f9f","_0x49ee61","_0x1b4643","_0x3ef927","_0x4fd8d4","_0x10c9e7","_0x4bf2a2","_0x4dc62c","_0x220edc","_0xf05434","_0x2e6ff8","_0x2a5daa","_0x57a3d1","_0x5ce5ff","_0x3a458b","_0x53c2d0","_0x345c1d","_0x18ca6a","_0x4b6d03","_0x56421c","_0x30bb5b","_0x598927","_0x410a9b","_0x33044b","_0x5567ed","_0x2f72c7","_0x27db82","_0x306e72","_0x170e66","_0x56caca","_0x83f8ed","_0x275cd2","_0x3bcc4b","_0xdf89e8","_0x3b5844","_0x4e6517","_0x4f8d9c","_0x2deb14","_0x3d865e","_0x3803c5","_0x1c2c64","_0x17149a","_0x12a4f3","_0x4727ee","_0x11fa3a","_0x16b634","_0x67b6e4","_0x1b4024","_0x437022","_0x5c3799","_0x246d71","_0x5a60d0","_0x317380","_0x387aa4","_0x46c0c0","_0xa730dd","_0x527f13","_0x5de2c","_0x161252","_0x22b203","_0x1e6af1","_0x3fb5a2","_0x5060dc","_0x2653ca","_0xfc00e3","_0x1c15aa","_0xff3d58","_0x5c3482","_0x40a5ba","_0x502d4f","_0x39f2a6","_0x201101","_0x468d9f","_0x1f85d6","_0x28128b","_0x1ce1d3","_0x4ecb69","_0x37ad4c","_0x272622","_0x43493b","_0x28e900","_0x5206e6","_0x4a3d9c","_0x3c9cd5","_0x58add8","_0x32f553","_0x622622","_0x390cb5","_0x205978","_0x3973a2","_0x572994","_0x3f6572","_0x1b655a","_0x23d71a","_0x57576a","_0x9f3bfd","_0x44078e","_0x44cdf5","_0x50ec10","_0x174aae","_0x49037a","_0x2a3387","_0x2bb2f4","_0x35b210","_0x1d2ab1","_0x2bf954","_0x2cad68","_0xb94b85","_0x1331cf","_0x23ea51","_0x5c4c27","_0x36c50d","_0x941f56","_0x25cc5f","_0xa4bf53","_0x25093f","_0x49768b","_0x36813c","_0x102561","_0x22b320","_0x5d7574","_0x537ecc","_0x3f8ce0","_0x1ac1d6","_0x2fcac7","_0x3fd461","_0x4dd4b5","_0xbd6253","_0x18d4ac","_0x3732af","_0x36ecd9","_0x550ed7","_0x4d4ddd","_0x4d6c23","_0x188c9f","_0x4e16b5","_0x4dbeed","_0x4420c3","_0x1f55a5","_0x4c7f5d","_0x230776","_0x732729","_0x78553a","_0x269282","_0x5cbaff","_0x4412d1","_0x5808b9","_0x3f9df5","_0x57dc5c","_0x52a4e9","_0x4041d0","_0xc4d0e3","_0x3ed871","_0x5e6924","_0x1afb16","_0x571d66","_0x22225a","_0x59e5","_0x77efad","_0x3bfffc","_0x17881e","_0x698483","_0x5e0685","_0x3d02a7","_0x245103","_0x5c4c68","_0x20f68e","eval","_0x562aad","_0x1c49d5","_0x13529d","_0x5271d5","_0xe03d48","_0x33fbe7","_0x31683f","_0x502eec","_0x6f1492","_0x312b02","_0x1263fa","_0x2389fd","_0x40a9da","_0x2cda28","_0x2c8ca7","_0x243414","_0x4e4945","_0x4dba52","_0x3a35c7","_0x2f29e2","_0x3a52b9","_0x24c765","_0xaa95b","_0x33eb9c","_0x236a90","_0x2c001f","_0x3567b8","_0x3a2890","_0x351484","_0x43af31","_0x4de108","_0x27d07d","_0x3a6d50","_0x285a76","_0xd2834f","_0x4fbc65","_0x51df48","_0x3bd1e9","_0x599dad","_0x5b724f","_0x5b8d83","_0x1cb54c","_0x5cc756","_0x2b3779","_0x1ba49b","_0x6f1619","_0x3c673d","_0x3e219d","_0x2ad025","_0x54b9f4","_0x342b29","_0x4d7d1f","_0x478854","_0x32d671","_0x173369","_0x56f033","_0x33aeb9","_0x482ce8","_0x5bc33c","_0x5e8852","_0x5aa26f","_0x540815","_0xaafa99","_0x235661","_0xa8917","_0x37d24c","_0x23d904","_0x4de4c1","_0x184ca9","_0x1e20da","_0x3855e3","_0xe65abd","_0x2d09d3","_0x41efc3","_0x5c07ca","_0x464aca","_0x2973be","_0x5e198a","_0x35c599","_0x50c0f1","_0x2a0968","_0x2e0e41","_0xc6fdbb","_0x16d5fe","_0x3b9018","_0x34d9c9","_0x52449a","_0x51e07d","_0x44854f","_0x5d04f2","_0x3e69f6","_0x3daa81","_0x173ef7","_0x3fad58","_0x337b42","_0x4a6663","_0x5bac72","_0xcde378","_0x23d74d","_0x18c714","_0x56ffd8","_0x14c376","_0x1e6a02","_0x337f3d","_0x498b78","_0x1d315a","_0x747f04","_0x392bad","_0x59de78","_0x2ac3d7","_0x48b03b","_0x17bc5e","_0x1ee6ee","_0x1bf310","_0x988577","_0x2830c1","_0x5ea333","_0x49e2d7","_0x26c4cd","_0x451eee","_0x2177fb","_0x57be82","_0x5aaee5","_0x5bf494","_0x2fc9fe","_0x24fb7c","_0xd8f133","_0x4f128f","_0x381fbe","_0x248005","_0x380d1c","_0x5dfb60","_0x5a2650","_0x80ac55","_0x49179c","_0x298ddd","_0xe5a217","_0x454051","_0x406905","_0x41c0d9","_0x5e3dfd","_0x1a9750","_0x56fe69","_0x35c69a","_0x339590","_0x40da5a","_0x4ef904","_0x20925d","_0xeb5de2","_0x462e90","_0x1898fa","_0x3f3813","_0xe6305c","_0x3ca64d","_0x54d578","_0x9b6378","_0x2c5b0a","_0x5980b8","_0x2ffb53","_0x3662f1","_0x3dbceb","_0x2e92d4","_0x390c58","_0x58bd6c","_0x598b42","_0x5606b4","_0x3d3d1f","_0x35cc85","_0x192b9d","_0x23d7bd","_0x2d2dc7","_0x16c339","_0x52d0a6","_0x563f8f","_0x31cab2","_0x27f907","_0x2445b7","_0x790b8a","_0x4b101a","_0x239e25","_0x443b8a","_0x21f89e","_0x1a1680","_0x20b46c","_0xa1877c","_0x6ba2c7","_0x588249","_0xc84a77","_0x292256","_0x2bba35","_0x118f62","_0x735ddd","_0x40e6a6","_0x11d3ae","Set","module"],"mappings":"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","sourcesContent":["/**\n * Object DB in REDIS - Client\n *\n * Copyright (c) 2018-2020 ioBroker GmbH - All rights reserved.\n *\n * You may not to use, modify or distribute this package in any form without explicit agreement from ioBroker GmbH.\n *\n * Unauthorized using, modifying or copying of this file, via any medium is strictly prohibited.\n * Proprietary and confidential\n * Written by bluefox <dogafox@gmail.com>, 2014-2019\n *\n */\n/* jshint -W097 */\n/* jshint strict: false */\n/* jslint node: true */\n/* jshint -W061 */\n'use strict';\n\nconst extend                = require('node.extend');\nconst Redis                 = require('ioredis');\n\nconst fs                    = require('fs');\nconst path                  = require('path');\nconst crypto                = require('crypto');\nconst { isDeepStrictEqual } = require('util');\nconst deepClone             = require('deep-clone');\n\nconst utils                 = require(path.join(getControllerDir() || __dirname, 'objectsUtils.js'));\n\n// copied from tools.js\n/**\n * Converts ioB pattern into regex.\n * @param {string} pattern - Regex string to us it in new RegExp(pattern)\n * @returns {string}\n */\nfunction pattern2RegEx(pattern) {\n    pattern = (pattern || '').toString()\n        .replace(/\\$/g, '\\\\$')\n        .replace(/\\^/g, '\\\\^');\n\n    if (pattern !== '*') {\n        if (pattern[0] === '*' && pattern[pattern.length - 1] !== '*') pattern += '$';\n        if (pattern[0] !== '*' && pattern[pattern.length - 1] === '*') pattern = '^' + pattern;\n        if (pattern[0] !== '*' && pattern[pattern.length - 1] !== '*') pattern = '^' + pattern + '$';\n    }\n\n    pattern = pattern\n        .replace(/\\?/g, '\\\\?')\n        .replace(/\\./g, '\\\\.')\n        .replace(/\\(/g, '\\\\(')\n        .replace(/\\)/g, '\\\\)')\n        .replace(/\\[/g, '\\\\[')\n        .replace(/]/g, '\\\\]')\n        .replace(/\\*/g, '.*');\n\n    return pattern;\n}\n\nlet crypto_;\n\n/**\n * recursively copy values from old object to new one\n *\n * @alias copyAttributes\n * @memberof tools\n * @param {object} oldObj source object\n * @param {object} newObj destination object\n * @param {object} [originalObj] optional object for read __no_change__ values\n * @param {boolean} [isNonEdit] optional indicator if copy is in nonEdit part\n *\n */\nfunction copyAttributes(oldObj, newObj, originalObj, isNonEdit) {\n    Object.keys(oldObj).forEach(attr => {\n        if (typeof oldObj[attr] !== 'object' || oldObj[attr] instanceof Array) {\n            if (oldObj[attr] === '__no_change__' && originalObj && !isNonEdit) {\n                if (originalObj[attr] !== undefined) {\n                    newObj[attr] = JSON.parse(JSON.stringify(originalObj[attr]));\n                } else {\n                    console.log(`Attribute ${attr} ignored by copying`);\n                }\n            } else\n            if (oldObj[attr] === '__delete__' && !isNonEdit) {\n                if (newObj[attr] !== undefined) {\n                    delete newObj[attr];\n                }\n            } else {\n                newObj[attr] = oldObj[attr];\n            }\n        } else {\n            newObj[attr] = newObj[attr] || {};\n            copyAttributes(oldObj[attr], newObj[attr], originalObj && originalObj[attr], isNonEdit || attr === 'nonEdit');\n        }\n    });\n}\n\n/**\n * Checks the flag nonEdit and restores non-changeable values if required\n *\n * @alias checkNonEditable\n * @memberof tools\n * @param {object} oldObject source object\n * @param {object} newObject destination object\n *\n */\nfunction checkNonEditable(oldObject, newObject) {\n    if (!oldObject) {\n        return true;\n    } else\n    if (!oldObject.nonEdit && !newObject.nonEdit) {\n        return true;\n    }\n\n    // if nonEdit is protected with password\n    if (oldObject.nonEdit && oldObject.nonEdit.passHash) {\n        // If new Object wants to update the nonEdit information\n        if (newObject.nonEdit && newObject.nonEdit.password) {\n            crypto_ = crypto_ || require('crypto');\n            const hash = crypto_.createHash('sha256').update(newObject.nonEdit.password.toString()).digest('base64');\n            if (oldObject.nonEdit.passHash !== hash) {\n                delete newObject.nonEdit;\n                return false;\n            } else {\n                oldObject.nonEdit = JSON.parse(JSON.stringify(newObject.nonEdit));\n                delete oldObject.nonEdit.password;\n                delete newObject.nonEdit.password;\n                oldObject.nonEdit.passHash = hash;\n                newObject.nonEdit.passHash = hash;\n            }\n            copyAttributes(newObject.nonEdit, newObject, newObject);\n\n            if (newObject.passHash) {\n                delete newObject.passHash;\n            }\n            if (newObject.nonEdit && newObject.nonEdit.password) {\n                delete newObject.nonEdit.password;\n            }\n\n            return true;\n        } else {\n            newObject.nonEdit = oldObject.nonEdit;\n        }\n\n    } else if (newObject.nonEdit) {\n        oldObject.nonEdit = JSON.parse(JSON.stringify(newObject.nonEdit));\n        if (newObject.nonEdit.password) {\n            crypto_ = crypto_ || require('crypto');\n            const hash = crypto_.createHash('sha256').update(newObject.nonEdit.password.toString()).digest('base64');\n            delete oldObject.nonEdit.password;\n            delete newObject.nonEdit.password;\n            oldObject.nonEdit.passHash = hash;\n            newObject.nonEdit.passHash = hash;\n        }\n    }\n\n    // restore settings\n    copyAttributes(oldObject.nonEdit, newObject, oldObject);\n\n    if (newObject.passHash) {\n        delete newObject.passHash;\n    }\n    if (newObject.nonEdit && newObject.nonEdit.password) {\n        delete newObject.nonEdit.password;\n    }\n    return true;\n}\n\nconst tools       = {\n    checkNonEditable,\n    pattern2RegEx\n};\n\nconst scriptFiles = {};\nscriptFiles.custom = '-- design: custom\\n-- search: state\\nlocal rep = {}\\n-- local keys=redis.call(\"keys\", KEYS[1]..\"*\")\\nlocal cursor = KEYS[4];\\nlocal result = redis.call(\"SCAN\", cursor, \"MATCH\", KEYS[1] .. \"*\", \"COUNT\", 500)\\ncursor = result[1]\\nlocal keys = result[2]\\nlocal argStart = KEYS[1] .. KEYS[2]\\nlocal argEnd = KEYS[1] .. KEYS[3]\\n--  function(doc) {\\n--      if (doc.type===\"state\" && (doc.common.custom || doc.common.history))\\n--          emit(doc._id, doc.common.custom || doc.common.history)\\n--   }\\nfor _, key in ipairs(keys) do\\n    if (key >= argStart and key < argEnd) then\\n        local obj = redis.call(\"get\", key)\\n        local success, decoded = pcall(cjson.decode, obj)\\n        if (success and decoded.type == \"state\" and decoded.common ~= nil and decoded.common.custom ~= nil) then\\n            rep[#rep + 1] = obj\\n        end\\n    end\\nend\\nreturn { rep, cursor }\\n';\nscriptFiles.filter = '-- func: function(doc) { if (doc.type === \"%1\") emit(doc._id, doc); }\\nlocal rep = {}\\n-- local keys=redis.call(\"keys\", KEYS[1]..\"*\")\\nlocal cursor = KEYS[5];\\nlocal result = redis.call(\"SCAN\", cursor, \"MATCH\", KEYS[1] .. \"*\", \"COUNT\", 500)\\ncursor = result[1]\\nlocal keys = result[2]\\nlocal argStart = KEYS[1] .. KEYS[2]\\nlocal argEnd = KEYS[1] .. KEYS[3]\\nlocal type = KEYS[4]\\n-- function(doc) { if (doc.type === \"chart\") emit(doc._id, doc); }\\nfor _, key in ipairs(keys) do\\n    if (key >= argStart and key < argEnd) then\\n        local obj = redis.call(\"get\", key)\\n        local success, decoded = pcall(cjson.decode, obj)\\n        if (success and decoded.type == type) then\\n            rep[#rep + 1] = obj\\n        end\\n    end\\nend\\nreturn { rep, cursor }\\n';\nscriptFiles.programs = '-- design: hm-rega\\n-- search: programs\\nlocal rep = {}\\nlocal cursor = KEYS[4];\\nlocal result = redis.call(\"SCAN\", cursor, \"MATCH\", KEYS[1] .. \"*\", \"COUNT\", 500)\\ncursor = result[1]\\nlocal keys = result[2]\\nlocal argStart = KEYS[1] .. KEYS[2]\\nlocal argEnd = KEYS[1] .. KEYS[3]\\n--  function(doc) {\\n--      if (doc._id.match(/^hm-rega\\\\.[0-9]+\\\\.[0-9,A-Z,a-z]+/) && (doc.native.TypeName === \"PROGRAM\")) {\\n--          emit(doc._id, doc);\\n--      }\\n--  }\\nfor _, key in ipairs(keys) do\\n    if (key >= argStart and key < argEnd and key:sub(7, 13) == \"hm-rega\") then\\n        local obj = redis.call(\"get\", key)\\n        local success, decoded = pcall(cjson.decode, obj)\\n        if (success and decoded.native ~= nil and decoded.native.TypeName == \"PROGRAM\") then\\n            rep[#rep + 1] = obj\\n        end\\n    end\\nend\\nreturn { rep, cursor }\\n';\nscriptFiles.script = '-- design: script\\n-- search: javascript\\nlocal rep = {}\\nlocal cursor = KEYS[4];\\nlocal result = redis.call(\"SCAN\", cursor, \"MATCH\", KEYS[1] .. \"*\", \"COUNT\", 500)\\ncursor = result[1]\\nlocal keys = result[2]\\nlocal argStart = KEYS[1] .. KEYS[2]\\nlocal argEnd = KEYS[1] .. KEYS[3]\\n--  function(doc) {\\n--      if (doc.type === \"script\" && doc.common.engineType.match(/^[jJ]ava[sS]cript|^[cC]offee[sS]cript|^[tT]ype[sS]cript|^Blockly/)) emit(doc.common.name, doc); }\\nfor _, key in ipairs(keys) do\\n    if (key >= argStart and key < argEnd) then\\n        local obj = redis.call(\"get\", key)\\n        local success, decoded = pcall(cjson.decode, obj)\\n        if (success and decoded.type == \"script\") then\\n            rep[#rep + 1] = obj\\n        end\\n    end\\nend\\nreturn { rep, cursor }\\n';\nscriptFiles.variables = '-- design: hm-rega\\n-- search: variables\\nlocal rep = {}\\n-- local keys=redis.call(\"keys\", KEYS[1]..\"*\")\\nlocal cursor = KEYS[4];\\nlocal result = redis.call(\"SCAN\", cursor, \"MATCH\", KEYS[1] .. \"*\", \"COUNT\", 500)\\ncursor = result[1]\\nlocal keys = result[2]\\nlocal argStart = KEYS[1] .. KEYS[2]\\nlocal argEnd = KEYS[1] .. KEYS[3]\\n--  function(doc) {\\n--      if (doc._id.match(/^hm-rega\\\\.[0-9]+\\\\.[0-9,A-Z,a-z]+/) && (doc.native.TypeName === \"ALARMDP\" || doc.native.TypeName === \"VARDP\")) {\\n--          emit(doc._id, doc);\\n--      }\\n--  }\\nfor _, key in ipairs(keys) do\\n    if (key >= argStart and key < argEnd and key:sub(7, 13) == \"hm-rega\") then\\n        local obj = redis.call(\"get\", key)\\n        local success, decoded = pcall(cjson.decode, obj)\\n        if (success and decoded.native ~= nil and (decoded.native.TypeName == \"ALARMDP\" or decoded.native.TypeName == \"VARDP\")) then\\n            rep[#rep + 1] = obj\\n        end\\n    end\\nend\\nreturn { rep, cursor }\\n';\n\nfunction getControllerDir() {\n    const possibilities = ['iobroker.js-controller', 'ioBroker.js-controller'];\n    let controllerPath = null;\n    for (const pkg of possibilities) {\n        try {\n            const possiblePath = require.resolve(pkg);\n            if (fs.existsSync(possiblePath)) {\n                controllerPath = possiblePath;\n                break;\n            }\n        } catch (_a) {\n            /* not found */\n        }\n    }\n    // Apparently, checking vs null/undefined may miss the odd case of controllerPath being \"\"\n    // Thus we check for falsyness, which includes failing on an empty path\n    if (!controllerPath) {\n        controllerPath = path.join(__dirname, '..', '..', 'lib', 'objects');\n        if (!fs.existsSync(controllerPath)) {\n            controllerPath = null;\n        }\n    } else {\n        controllerPath = path.join(path.dirname(controllerPath), 'lib', 'objects');\n    }\n    return controllerPath;\n}\n\nclass ObjectsInRedis {\n\n    constructor(settings) {\n        // const originalSettings = settings;\n        this.settings = settings || {};\n        this.redisNamespace = (this.settings.redisNamespace || (this.settings.connection && this.settings.connection.redisNamespace) || 'cfg') + '.';\n        this.fileNamespace = this.redisNamespace + 'f.';\n        this.fileNamespaceL = this.fileNamespace.length;\n        this.objNamespace = this.redisNamespace + 'o.';\n        this.objNamespaceL = this.objNamespace.length;\n        const ioRegExp = new RegExp('^' + this.objNamespace.replace(/\\./g, '\\\\.') + '[_A-Za-z0-9ÄÖÜäöüа-яА-Я]+'); // cfg.o.[_A-Za-z0-9]+\n\n        const onChange = this.settings.change; // on change handler\n        const onChangeUser = this.settings.changeUser; // on change handler for User events\n\n        this.stop = false;\n        this.client = null;\n        this.sub = null;\n        this.subSystem = null;\n        this.preserveSettings = ['custom', 'smartName', 'material', 'habpanel', 'mobile'];\n        this.defaultNewAcl = this.settings.defaultNewAcl || null;\n        this.namespace = this.settings.namespace || this.settings.hostname || '';\n        this.scripts = {};\n\n        // cached meta objects for file operations\n        this.existingMetaObjects = {};\n\n        this.log = utils.getLogger(this.settings.logger);\n\n        this.settings.connection = this.settings.connection || {};\n\n        // limit max number of log entries in the list\n        this.settings.connection.maxQueue = this.settings.connection.maxQueue || 1000;\n\n        this.settings.connection.options = this.settings.connection.options || {};\n        const retry_max_delay = this.settings.connection.options.retry_max_delay || 5000;\n        const retry_max_count = this.settings.connection.options.retry_max_count || 19;\n\n        this.settings.connection.options.retryStrategy = reconnectCount => {\n            if (!ready && initError && ignoreErrors) {\n                return new Error('No more tries');\n            }\n            if (this.stop) {\n                return new Error('Client has stopped ... no retries anymore');\n            }\n            if (ready && reconnectCount >= retry_max_count) {\n                return new Error('Stop trying to reconnect');\n            }\n            // A function that receives an options object as parameter including the retry attempt,\n            // the total_retry_time indicating how much time passed since the last time connected,\n            // the error why the connection was lost and the number of times_connected in total.\n            // If you return a number from this function, the retry will happen exactly after that\n            // time in milliseconds. If you return a non-number, no further retry will happen and\n            // all offline commands are flushed with errors. Return an error to return that\n            // specific error to all offline commands.\n\n            if (!ready) {\n                return 300;\n            } else {\n                return retry_max_delay;\n            }\n            /*if (options.error.code === 'ECONNREFUSED') {\n                // End reconnecting on a specific error and flush all commands with a individual error\n                return new Error('The server refused the connection');\n            }\n            if (options.total_retry_time > 1000 * 60 * 60) {\n                // End reconnecting after a specific timeout and flush all commands with a individual error\n                return new Error('Retry time exhausted');\n            }\n            if (options.times_connected > 10) {\n                // End reconnecting with built in error\n                return undefined;\n            }\n            // reconnect after\n            return Math.max(options.attempt * 100, 3000);*/\n        };\n\n        delete this.settings.connection.options.retry_max_delay;\n        this.settings.connection.options.enableReadyCheck = true;\n\n        let ready = false;\n        let initError = false;\n        let ignoreErrors = false;\n        let connected = false;\n        let reconnectCounter = 0;\n\n        if (this.settings.connection.port === 0) { // Port = 0 means unix socket\n            // initiate a unix socket connection\n            this.settings.connection.options.path = this.settings.connection.host;\n            this.log.debug(this.namespace + ' Redis Objects: Use File Socket for connection: ' + this.settings.connection.options.path);\n        } else if (Array.isArray(this.settings.connection.host)) { // Host is an array means we use a sentinel\n            const defaultPort = Array.isArray(this.settings.connection.port) ? null : this.settings.connection.port;\n\n            this.settings.connection.options.sentinels = this.settings.connection.host.map((redisNode, idx) => ({\n                host: redisNode,\n                port: defaultPort || this.settings.connection.port[idx]\n            }));\n\n            this.settings.connection.options.name = this.settings.connection.sentinelName ? this.settings.connection.sentinelName : 'mymaster';\n            this.log.debug(this.namespace + ' Redis Objects: Use Sentinel for connection: ' + this.settings.connection.options.name + ', ' + JSON.stringify(this.settings.connection.options.sentinels));\n        } else {\n            this.settings.connection.options.host = this.settings.connection.host;\n            this.settings.connection.options.port = this.settings.connection.port;\n            this.log.debug(this.namespace + ' Redis Objects: Use Redis connection: ' + this.settings.connection.options.host + ':' + this.settings.connection.options.port);\n        }\n        this.settings.connection.options.db = this.settings.connection.options.db || 0;\n        this.settings.connection.options.family = this.settings.connection.options.family || 0;\n        this.settings.connection.options.password = this.settings.connection.options.auth_pass || this.settings.connection.pass || null;\n\n        this.settings.connection.options.autoResubscribe = false; // We do our own resubscribe because other sometimes not work\n\n        this.client = new Redis(this.settings.connection.options);\n\n        this.client.on('error', error => {\n            this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' Redis ERROR Objects: (' + ignoreErrors + '/' + this.stop + ') ' + error.message + ' / ' + error.stack);\n            if (this.stop) {\n                return;\n            }\n            if (!ready) {\n                initError = true;\n                // Seems we have a socket.io server\n                if (!ignoreErrors && error.message.startsWith('Protocol error, got \"H\" as reply type byte.')) {\n                    this.log.error('Socket.io Server detected. Please update to js-controller 2.0 or higher!');\n                }\n                return;\n            }\n            this.log.error(this.settings.namespace + ' ' + error.message);\n        });\n\n        this.client.on('end', () => {\n            this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' Objects-Redis Event end (stop=' + this.stop + ')');\n            ready && typeof this.settings.disconnected === 'function' && this.settings.disconnected();\n        });\n\n        this.client.on('connect', () => {\n            this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' Objects-Redis Event connect (stop=' + this.stop + ')');\n            connected = true;\n        });\n\n        this.client.on('close', () => {\n            this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' Objects-Redis Event close (stop=' + this.stop + ')');\n            //if (ready && typeof this.settings.disconnected === 'function') this.settings.disconnected();\n        });\n\n        this.client.on('reconnecting', () => {\n            if (connected && !ready && !initError && !ignoreErrors) {\n                reconnectCounter++;\n            }\n\n            this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' Objects-Redis Event reconnect (reconnectCounter=' + reconnectCounter + ', stop=' + this.stop + ')');\n\n            if (reconnectCounter > 2) { // fallback logic for nodejs <10\n                this.log.error('Could not connect database at ' + this.settings.connection.options.host + ':' + this.settings.connection.options.port + ' (invalid protocol). Please make sure the configured IP and port points to a host running JS-Controller >= 2.0.');\n                return;\n            }\n            connected = false;\n            initError = false;\n        });\n\n        this.client.on('ready', () => {\n            if (this.stop) {\n                return;\n            }\n            initError = false;\n            ignoreErrors = false;\n\n            this.log.debug(this.namespace + ' Objects client ready ... initialize now');\n            this.client.config('set', ['lua-time-limit', 10000], err => { // increase LUA timeout TODO needs better fix\n                if (err) {\n                    this.log.warn('Unable to increase LUA script timeout: ' + err);\n                }\n                let initCounter = 0;\n                if (!this.subSystem && typeof onChange === 'function') {\n                    initCounter++;\n                    this.log.debug(this.namespace + ' Objects create System PubSub Client');\n                    this.subSystem = new Redis(this.settings.connection.options);\n                    this.subSystem.ioBrokerSubscriptions = {};\n\n                    if (typeof onChange === 'function') {\n                        this.subSystem.on('pmessage', (pattern, channel, message) =>\n                            setImmediate(() => {\n                                this.log.silly(this.namespace + ' Objects system redis pmessage ' + pattern + '/' + channel + ':' + message);\n                                try {\n                                    if (ioRegExp.test(channel)) {\n                                        const id = channel.substring(this.objNamespaceL);\n                                        try {\n                                            const obj = message ? JSON.parse(message) : null;\n\n                                            if (this.settings.controller &&\n                                                id === 'system.config' &&\n                                                obj &&\n                                                obj.common &&\n                                                obj.common.defaultNewAcl &&\n                                                !isDeepStrictEqual(obj.common.defaultNewAcl, this.defaultNewAcl)) {\n                                                this.defaultNewAcl = JSON.parse(JSON.stringify(obj.common.defaultNewAcl));\n                                                this.setDefaultAcl(this.defaultNewAcl);\n                                            }\n\n                                            onChange(id, obj);\n                                        } catch (e) {\n                                            this.log.warn(`${this.namespace} Objects Cannot process system pmessage ${id} - ${message}: ${e.message}`);\n                                            this.log.warn(`${this.namespace} ${e.stack}`);\n                                        }\n                                    } else {\n                                        this.log.warn(`${this.namespace} Objects Received unexpected system pmessage: ${channel}`);\n                                    }\n                                } catch (e) {\n                                    this.log.warn(this.namespace + ' Objects system pmessage ' + channel + ' ' + JSON.stringify(message) + ' ' + e.message);\n                                    this.log.warn(this.namespace + ' ' + e.stack);\n                                }\n                            }));\n                    }\n\n                    this.subSystem.on('end', () => {\n                        this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' Objects-Redis System Event end sub (stop=' + this.stop + ')');\n                        ready && typeof this.settings.disconnected === 'function' && this.settings.disconnected();\n                    });\n\n                    this.subSystem.on('error', error => {\n                        if (this.stop) {\n                            return;\n                        }\n                        this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' PubSub System client Objects No redis connection: ' + JSON.stringify(error));\n                    });\n\n                    if (this.settings.connection.enhancedLogging) {\n                        this.subSystem.on('connect', () =>\n                            this.log.silly(this.namespace + ' PubSub System client Objects-Redis Event connect (stop=' + this.stop + ')'));\n\n                        this.subSystem.on('close', () =>\n                            this.log.silly(this.namespace + ' PubSub System client Objects-Redis Event close (stop=' + this.stop + ')'));\n\n                        this.subSystem.on('reconnecting', reconnectCounter =>\n                            this.log.silly(this.namespace + ' PubSub System client Objects-Redis Event reconnect (reconnectCounter=' + reconnectCounter + ', stop=' + this.stop + ')'));\n                    }\n\n                    this.subSystem.on('ready', () => {\n                        if (--initCounter < 1) {\n                            if (this.settings.connection.port === 0) {\n                                this.log.debug(this.namespace + ' Objects ' + (ready ? 'system re' : '') + 'connected to redis: ' + this.settings.connection.host);\n                            } else {\n                                this.log.debug(this.namespace + ' Objects ' + (ready ? 'system re' : '') + 'connected to redis: ' + this.settings.connection.host + ':' + this.settings.connection.port);\n                            }\n                            !ready && typeof this.settings.connected === 'function' && this.settings.connected(this);\n                            ready = true;\n                        }\n                        // subscribe on system.config only if js-controller\n                        if (this.settings.controller) {\n                            this.subSystem.psubscribe(this.objNamespace + 'system.config');\n                        }\n                        Object.keys(this.subSystem.ioBrokerSubscriptions).forEach(sub => this.subSystem.psubscribe(sub));\n                    });\n                }\n\n                if (!this.sub && typeof onChangeUser === 'function') {\n                    initCounter++;\n                    this.log.debug(this.namespace + ' Objects create User PubSub Client');\n                    this.sub = new Redis(this.settings.connection.options);\n                    this.sub.ioBrokerSubscriptions = {};\n\n                    this.sub.on('pmessage', (pattern, channel, message) => {\n                        setImmediate(() => {\n                            this.log.silly(this.namespace + ' Objects user redis pmessage ' + pattern + '/' + channel + ':' + message);\n                            try {\n                                if (ioRegExp.test(channel)) {\n                                    const id = channel.substring(this.objNamespaceL);\n                                    try {\n                                        const obj = message ? JSON.parse(message) : null;\n\n                                        onChangeUser(id, obj);\n                                    } catch (e) {\n                                        this.log.warn(`${this.namespace} Objects user cannot process pmessage ${id} - ${message}: ${e.message}`);\n                                        this.log.warn(`${this.namespace} ${e.stack}`);\n                                    }\n                                } else {\n                                    this.log.warn(`${this.namespace} Objects user received unexpected pmessage: ${channel}`);\n                                }\n                            } catch (e) {\n                                this.log.warn(this.namespace + ' Objects user pmessage ' + channel + ' ' + JSON.stringify(message) + ' ' + e.message);\n                                this.log.warn(this.namespace + ' ' + e.stack);\n                            }\n                        });\n                    });\n\n                    this.sub.on('end', () => {\n                        this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' Objects-Redis Event end user sub (stop=' + this.stop + ')');\n                        ready && typeof this.settings.disconnected === 'function' && this.settings.disconnected();\n                    });\n\n                    this.sub.on('error', error => {\n                        if (this.stop) {\n                            return;\n                        }\n                        this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' PubSub user client Objects No redis connection: ' + JSON.stringify(error));\n                    });\n\n                    if (this.settings.connection.enhancedLogging) {\n                        this.sub.on('connect', () =>\n                            this.log.silly(this.namespace + ' PubSub user client Objects-Redis Event connect (stop=' + this.stop + ')'));\n\n                        this.sub.on('close', () =>\n                            this.log.silly(this.namespace + ' PubSub user client Objects-Redis Event close (stop=' + this.stop + ')'));\n\n                        this.sub.on('reconnecting', reconnectCounter =>\n                            this.log.silly(this.namespace + ' PubSub user client Objects-Redis Event reconnect (reconnectCounter=' + reconnectCounter + ', stop=' + this.stop + ')'));\n                    }\n\n                    this.sub.on('ready', () => {\n                        if (--initCounter < 1) {\n                            if (this.settings.connection.port === 0) {\n                                this.log.debug(this.namespace + ' Objects ' + (ready ? 'user re' : '') + 'connected to redis: ' + this.settings.connection.host);\n                            } else {\n                                this.log.debug(this.namespace + ' Objects ' + (ready ? 'user re' : '') + 'connected to redis: ' + this.settings.connection.host + ':' + this.settings.connection.port);\n                            }\n                            !ready && typeof this.settings.connected === 'function' && this.settings.connected(this);\n                            ready = true;\n                        }\n                        Object.keys(this.sub.ioBrokerSubscriptions).forEach(sub => this.sub.psubscribe(sub));\n                    });\n                }\n\n                this.log.debug(this.namespace + ' Objects client initialize lua scripts');\n                initCounter++;\n                this.loadLuaScripts(() => {\n                    if (!this.client) {\n                        return;\n                    }\n                    // init default new acl\n                    this.client.get(this.objNamespace + 'system.config', (err, obj) => {\n                        if (obj) {\n                            try {\n                                obj = JSON.parse(obj);\n                            } catch (e) {\n                                this.log.error(`${this.namespace} Cannot parse JSON system.config: ${obj}`);\n                                obj = null;\n                            }\n                            if (obj && obj.common && obj.common.defaultNewAcl) {\n                                this.defaultNewAcl = obj.common.defaultNewAcl;\n                            }\n                        } else {\n                            this.log.error(`${this.namespace} Cannot read system.config: ${obj} (OK when migrating or restoring)`);\n                        }\n\n                        if (--initCounter < 1) {\n                            if (this.settings.connection.port === 0) {\n                                this.log.debug(this.namespace + ' Objects ' + (ready ? 'client re' : '') + 'connected to redis: ' + this.settings.connection.host);\n                            } else {\n                                this.log.debug(this.namespace + ' Objects ' + (ready ? 'client re' : '') + 'connected to redis: ' + this.settings.connection.host + ':' + this.settings.connection.port);\n                            }\n                            !ready && typeof this.settings.connected === 'function' && this.settings.connected(this);\n                            ready = true;\n                        }\n                    });\n                });\n            });\n        });\n    }\n\n    getStatus() {\n        return {type: 'redis', server: false};\n    }\n\n    /**\n     * Checks if given Id is a meta object, else throws error\n     *\n     * @param {string} id to check\n     * @throws Error if id is invalid\n     */\n    async validateMetaObject(id) {\n        if (this.existingMetaObjects[id] === undefined) {\n            // if not cached -> getObject\n            const obj = await this.getObjectAsync(id);\n            if (obj && obj.type === 'meta') {\n                this.existingMetaObjects[id] = true;\n            } else {\n                this.existingMetaObjects[id] = false;\n                return Promise.reject(new Error(`${id} is not an object of type \"meta\"`));\n            }\n        } else if (this.existingMetaObjects[id] === false) {\n            return Promise.reject(new Error(`${id} is not an object of type \"meta\"`));\n        }\n    }\n\n    normalizeFilename(name) {\n        return name ? name.replace(/[/\\\\]+/g, '/') : name;\n    }\n\n    // -------------- FILE FUNCTIONS -------------------------------------------\n    _setBinaryState(id, data, callback) {\n        if (!this.client) {\n            return typeof callback === 'function' && setImmediate(() => callback(utils.ERRORS.ERROR_DB_CLOSED));\n        }\n        if (!Buffer.isBuffer(data)) {\n            data = Buffer.from(data);\n        }\n        this.client.set(id, data, callback);\n    }\n\n    _getBinaryState(id, callback) {\n        if (typeof callback !== 'function') {\n            return this.log.error(this.namespace + ' no callback found in _getBinaryState');\n        }\n        if (!this.client) {\n            return setImmediate(() => callback(utils.ERRORS.ERROR_DB_CLOSED));\n        }\n\n        this.client.getBuffer(id, (err, data) => {\n            if (!err && data) {\n                callback(err, data);\n            } else {\n                callback(err);\n            }\n        });\n    }\n\n    _delBinaryState(id, callback) {\n        if (!this.client) {\n            typeof callback === 'function' && setImmediate(() => callback(utils.ERRORS.ERROR_DB_CLOSED));\n        } else {\n            this.client.del(id, () => typeof callback === 'function' && callback());\n        }\n    }\n\n    getFileId(id, name, isMeta) {\n        name = this.normalizeFilename(name);\n        // e.g. ekey.admin and admin/ekey.png\n        if (id.match(/\\.admin$/)) {\n            if (name.match(/^admin\\//)) {\n                name = name.replace(/^admin\\//, '');\n            } else\n            // e.g. ekey.admin and iobroker.ekey/admin/ekey.png\n            if (name.match(/^iobroker.[-\\d\\w]\\/admin\\//i)) {\n                name = name.replace(/^iobroker.[-\\d\\w]\\/admin\\//i, '');\n            }\n        }\n        const normalized = utils.sanitizePath(id, name);\n        if (!normalized) {\n            this.log.debug(this.namespace + ' Invalid file path ' + id + '/' + name);\n            return '';\n        }\n        id = normalized.id;\n        name = normalized.name;\n\n        return this.fileNamespace + id + '$%$' + name + (isMeta !== undefined ? (isMeta ? '$%$meta' : '$%$data') : '');\n    }\n\n    checkFile(id, name, options, flag, callback) {\n        // read file settings from redis\n        const fileId = this.getFileId(id, name, true);\n        if (!fileId) {\n            const fileOptions = {'notExists': true};\n            if (utils.checkFile(fileOptions, options, flag, this.defaultNewAcl)) {\n                return typeof callback === 'function' && setImmediate(() => callback(false, options, fileOptions)); // NO error\n            } else {\n                return typeof callback === 'function' && setImmediate(() => callback(true, options)); // error\n            }\n        }\n        if (!this.client) {\n            return typeof callback === 'function' && setImmediate(() => callback(utils.ERRORS.ERROR_DB_CLOSED, options));\n        }\n        this.client.get(fileId, (err, fileOptions) => {\n            fileOptions = fileOptions || '{\"notExists\": true}';\n            try {\n                fileOptions = JSON.parse(fileOptions);\n            } catch (e) {\n                this.log.error(`${this.namespace} Cannot parse JSON ${id}: ${fileOptions}`);\n                fileOptions = {notExists: true};\n            }\n            if (utils.checkFile(fileOptions, options, flag, this.defaultNewAcl)) {\n                return typeof callback === 'function' && callback(false, options, fileOptions); // NO error\n            } else {\n                return typeof callback === 'function' && callback(true, options); // error\n            }\n        });\n    }\n\n    checkFileRights(id, name, options, flag, callback) {\n        return utils.checkFileRights(this, id, name, options, flag, callback);\n    }\n\n    _setDefaultAcl(ids, defaultAcl) {\n        if (ids && ids.length) {\n            const id = ids.shift();\n            this.getObject(id, (err, obj) => {\n                if (obj && !obj.acl) {\n                    obj.acl = defaultAcl;\n                    this.setObject(id, obj, null, () =>\n                        setImmediate(() =>\n                            this._setDefaultAcl(ids, defaultAcl)));\n                } else {\n                    setImmediate(() =>\n                        this._setDefaultAcl(ids, defaultAcl));\n                }\n            });\n        }\n    }\n\n    setDefaultAcl(defaultNewAcl) {\n        this.defaultNewAcl = defaultNewAcl || {\n            owner: utils.CONSTS.SYSTEM_ADMIN_USER,\n            ownerGroup: utils.CONSTS.SYSTEM_ADMIN_GROUP,\n            object: 0x664,\n            state: 0x664,\n            file: 0x664\n        };\n        // Get ALL Objects\n        this.getKeys('*', (err, ids) => this._setDefaultAcl(ids, this.defaultNewAcl));\n    }\n\n    getUserGroup(user, callback) {\n        return utils.getUserGroup(this, user, (error, user, userGroups, userAcl) => {\n            if (error) {\n                this.log.error(this.namespace + ' ' + error);\n            }\n            callback.call(this, user, userGroups, userAcl);\n        });\n    }\n\n    insert(id, attName, ignore, options, obj, callback) {\n        return utils.insert(this, id, attName, ignore, options, obj, callback);\n    }\n\n    _writeFile(id, name, data, options, callback, meta) {\n        const ext         = name.match(/\\.[^.]+$/);\n        const mime        = utils.getMimeType(ext);\n        const _mimeType   = mime.mimeType;\n        const isBinary    = mime.isBinary;\n\n        const metaID = this.getFileId(id, name, true);\n        if (!this.client) {\n            return typeof callback === 'function' && callback(utils.ERRORS.ERROR_DB_CLOSED);\n        }\n        // virtual files only get Meta objects\n        if (options.virtualFile) {\n            meta = {\n                notExists: true,\n                virtualFile: true\n            }; // Store file with flags as it would not exist\n            this.client.set(metaID, JSON.stringify(meta), _err => typeof callback === 'function' && callback(_err));\n        } else {\n            if (!meta) {\n                meta = {createdAt: Date.now()};\n            }\n            if (!meta.acl) {\n                meta.acl = {\n                    owner: options.user || (this.defaultNewAcl && this.defaultNewAcl.owner) || utils.CONSTS.SYSTEM_ADMIN_USER,\n                    ownerGroup: options.group || (this.defaultNewAcl && this.defaultNewAcl.ownerGroup) || utils.CONSTS.SYSTEM_ADMIN_GROUP,\n                    permissions: options.mode || (this.defaultNewAcl && this.defaultNewAcl.file) || 0x644\n                };\n            }\n            meta.stats = {\n                size: data ? data.length : 0\n            };\n            if (Object.prototype.hasOwnProperty.call(meta, 'notExists')) {\n                delete meta.notExists;\n            }\n\n            meta.mimeType = options.mimeType || _mimeType;\n            meta.binary = isBinary;\n            meta.acl.ownerGroup = meta.acl.ownerGroup || (this.defaultNewAcl && this.defaultNewAcl.ownerGroup) || utils.CONSTS.SYSTEM_ADMIN_GROUP;\n            meta.modifiedAt = Date.now();\n\n            this._setBinaryState(this.getFileId(id, name, false), data, err => this.client.set(metaID, JSON.stringify(meta), _err => typeof callback === 'function' && callback(err || _err)));\n        }\n    }\n\n    async writeFile(id, name, data, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = null;\n        }\n        if (typeof options === 'string') {\n            options = {mimeType: options};\n        }\n\n        if (options && options.acl) {\n            options.acl = null;\n        }\n\n        if (!callback) {\n            return new Promise((resolve, reject) =>\n                this.writeFile(id, name, data, options, err =>\n                    err ? reject(err) : resolve()));\n        }\n\n        try {\n            await this.validateMetaObject(id);\n        } catch (e) {\n            this.log.warn(`${this.namespace} writeFile will not write this file (${name}) in future versions: ${e.message}`);\n            // todo: replace by below code in 3.1 + add test\n            // this.log.error(`Cannot write file ${name}: ${e.message}`);\n            // typeof callback === 'function' && setImmediate(() => callback(e.message));\n        }\n\n        if (typeof name !== 'string' || !name.length || name === '/') {\n            return typeof callback === 'function' && setImmediate(() => callback(utils.ERRORS.ERROR_NOT_FOUND));\n        }\n\n        if (name.startsWith('/')) {\n            name = name.substring(1);\n        }\n\n        if (data === undefined) {\n            data = null;\n        }\n\n        // If file yet exists => check the permissions\n        return this.checkFileRights(id, name, options, utils.CONSTS.ACCESS_WRITE, (err, options, meta) => {\n            if (err) {\n                typeof callback === 'function' && callback(err);\n            } else {\n                return this._writeFile(id, name, data, options, callback, meta);\n            }\n        });\n    }\n\n    writeFileAsync(id, name, data, options) {\n        return new Promise((resolve, reject) =>\n            this.writeFile(id, name, data, options, err =>\n                err ? reject(err) : resolve()));\n    }\n\n    _readFile(id, name, options, callback, meta) {\n        if (meta.notExists) {\n            return typeof callback === 'function' && callback(utils.ERRORS.ERROR_NOT_FOUND);\n        }\n        if (!this.client) {\n            return typeof callback === 'function' && callback(utils.ERRORS.ERROR_DB_CLOSED);\n        }\n        this._getBinaryState(this.getFileId(id, name, false), (err, buffer) => {\n            const mimeType = meta && meta.mimeType;\n            if (meta && !meta.binary && buffer) {\n                buffer = buffer.toString();\n            }\n            typeof callback === 'function' && callback(err, buffer, mimeType);\n        });\n    }\n\n    async readFile(id, name, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options  = null;\n        }\n        if (options && options.acl) {\n            options.acl = null;\n        }\n\n        if (!callback) {\n            return new Promise((resolve, reject) =>\n                this.readFile(id, name, options, (err, res, mimeType) =>\n                    err ? reject(err) : resolve({data: res, mimeType: mimeType})));\n        }\n\n        try {\n            await this.validateMetaObject(id);\n        } catch (e) {\n            this.log.debug(`${this.namespace} readFile will not read this file (${name}) in future versions: ${e.message}`);\n            // todo: rethink how to replace by below code in 3.1 + add test\n            // this.log.error(`Cannot read file ${name}: ${e.message}`);\n            // typeof callback === 'function' && setImmediate(() => callback(e.message));\n        }\n\n        if (typeof name !== 'string' || !name.length || name === '/') {\n            return typeof callback === 'function' && setImmediate(() => callback(utils.ERRORS.ERROR_NOT_FOUND));\n        }\n\n        if (name.startsWith('/')) {\n            name = name.substring(1);\n        }\n\n        options = options || {};\n        this.checkFileRights(id, name, options, utils.CONSTS.ACCESS_READ, (err, options, meta) => {\n            if (err) {\n                typeof callback === 'function' && callback(err);\n            } else {\n                return this._readFile(id, name, options, callback, meta);\n            }\n        });\n    }\n\n    readFileAsync(id, name, options) {\n        return new Promise((resolve, reject) =>\n            this.readFile(id, name, options, (err, res, mimeType) =>\n                err ? reject(err) : resolve({data: res, mimeType: mimeType})));\n    }\n\n    /**\n     * Check if given file exists\n     *\n     * @param {string} id id of the namespace\n     * @param {string} [name] name of the file\n     * @param {object} [options] optional user context\n     * @returns {Promise<boolean>}\n     */\n    async fileExists(id, name, options) {\n        if (name.startsWith('/')) {\n            name = name.substring(1);\n        }\n\n        try {\n            await new Promise((resolve, reject) => {\n                this.checkFileRights(id, name, options, utils.CONSTS.ACCESS_READ, err => {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve();\n                    }\n                });\n            });\n            id = this.getFileId(id, name, false);\n            const exists = await this.client.exists(id);\n            return !!exists;\n        } catch (e) {\n            this.log.error(`${this.namespace} Cannot check file existence of \"${id}\": ${e}`);\n            return Promise.reject(new Error(`Cannot check file existence of \"${id}\": ${e}`));\n        }\n    }\n\n    _unlink(id, name, options, callback, meta) {\n        if (!this.client) {\n            return typeof callback === 'function' && callback(utils.ERRORS.ERROR_DB_CLOSED);\n        }\n        if (meta && meta.notExists) {\n            this._rm(id, name, options, callback);\n            //typeof callback === 'function' && callback(utils.ERRORS.ERROR_NOT_FOUND);\n        } else {\n            const metaID = this.getFileId(id, name, true);\n            const dataID = this.getFileId(id, name, false);\n            this._delBinaryState(dataID, _err => this.client.del(metaID, callback));\n        }\n    }\n\n    unlink(id, name, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options  = null;\n        }\n        if (options && options.acl) {\n            options.acl = null;\n        }\n\n        if (typeof name !== 'string') {\n            name = '';\n        }\n\n        if (name.startsWith('/')) {\n            name = name.substring(1);\n        }\n\n        this.checkFileRights(id, name, options, utils.CONSTS.ACCESS_DELETE, (err, options, meta) => {\n            if (err) {\n                typeof callback === 'function' && callback(err);\n            } else {\n                if (!options.acl.file['delete']) {\n                    typeof callback === 'function' && callback(utils.ERRORS.ERROR_PERMISSION);\n                } else {\n                    return this._unlink(id, name, options, callback, meta);\n                }\n            }\n        });\n    }\n\n    unlinkAsync(id, name, options) {\n        return new Promise((resolve, reject) =>\n            this.unlink(id, name, options, err =>\n                err ? reject(err) : resolve()));\n    }\n\n    delFile(id, name, options, callback) {\n        return this.unlink(id, name, options, callback);\n    }\n\n    delFileAsync(id, name, options) {\n        return this.unlinkAsync(id, name, options);\n    }\n\n    async _readDir(id, name, options, callback) {\n        name = this.normalizeFilename(name);\n        if (!this.client) {\n            return typeof callback === 'function' && callback(utils.ERRORS.ERROR_DB_CLOSED);\n        }\n        if (id === '') { // special case for \"root\"\n            const dirID = this.getFileId('*', '*');\n\n            let keys;\n            try {\n                keys = await this._getKeysViaScan(dirID);\n            } catch (e) {\n                return tools.maybeCallbackWithError(callback, e);\n            }\n\n            if (!this.client) {\n                return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\n            }\n\n            const result = [];\n            if (!keys || !keys.length) {\n                return tools.maybeCallbackWithError(callback, null, result);\n            }\n            let lastDir;\n            keys.sort().forEach(dir => {\n                dir = dir.substring(this.fileNamespaceL, dir.indexOf('$%$'));\n                if (dir !== lastDir) {\n                    result.push({\n                        file: dir,\n                        stats: {},\n                        isDir: true\n                    });\n                }\n                lastDir = dir;\n            });\n            return tools.maybeCallbackWithError(callback, null, result);\n        }\n\n        const dirID = this.getFileId(id, name + (name.length ? '/' : '') + '*');\n\n        let keys;\n        try {\n            keys = await this._getKeysViaScan(dirID);\n        } catch (e) {\n            return tools.maybeCallbackWithError(callback, e);\n        }\n\n        if (!this.client) {\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\n        }\n\n        const start = dirID.indexOf('$%$') + 3;\n        const end = '$%$meta'.length;\n\n        const baseName = name + (name.length ? '/' : '');\n        const dirs = [];\n        const deepLevel = baseName.split('/').length;\n        if (!keys || !keys.length) {\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_NOT_FOUND, []);\n        }\n        keys = keys\n            .sort()\n            .filter(key => {\n                if (key.match(/\\$%\\$meta$/)) {\n                    const parts = key.substr(start, key.length - end).split('/');\n                    if (parts.length === deepLevel) {\n                        return !key.includes('/_data.json$%$') && key !== '_data.json'; // sort out \"virtual\" files that are used to mark directories\n                    } else {\n                        const dir = parts[deepLevel - 1];\n                        if (dirs.indexOf(dir) === -1) {\n                            dirs.push(dir);\n                        }\n                    }\n                }\n            });\n        if (!keys.length) {\n            const result = [];\n            while (dirs.length) {\n                result.push({\n                    file: dirs.shift(),\n                    stats: {},\n                    isDir: true\n                });\n            }\n            return tools.maybeCallbackWithError(callback, null, result);\n        }\n\n        // Check permissions\n        this.client.mget(keys, (err, objs) => {\n            if (err) {\n                return tools.maybeCallbackWithError(callback, err, objs);\n            }\n            const result = [];\n            const dontCheck =\n                    options.user === utils.CONSTS.SYSTEM_ADMIN_USER ||\n                    options.group !== utils.CONSTS.SYSTEM_ADMIN_GROUP ||\n                    (options.groups && options.groups.indexOf(utils.CONSTS.SYSTEM_ADMIN_GROUP) !== -1);\n\n            objs = objs || [];\n            for (let i = 0; i < keys.length; i++) {\n                const file = keys[i].substring(start + baseName.length, keys[i].length - end);\n                while (dirs.length && dirs[0] < file) {\n                    result.push({\n                        file: dirs.shift(),\n                        stats: {},\n                        isDir: true\n                    });\n                }\n\n                try {\n                    objs[i] = JSON.parse(objs[i]);\n                } catch (e) {\n                    this.log.error(`${this.namespace} Cannot parse JSON ${keys[i]}: ${objs[i]}`);\n                    continue;\n                }\n                if (dontCheck || utils.checkObject(objs[i], options, utils.CONSTS.ACCESS_READ)) {\n                    if (!objs[i] || objs[i].virtualFile) {\n                        continue;\n                    } // virtual file, ignore\n                    objs[i].acl = objs[i].acl || {};\n                    if (options.user !== utils.CONSTS.SYSTEM_ADMIN_USER && options.groups.indexOf(utils.CONSTS.SYSTEM_ADMIN_GROUP) === -1) {\n                        objs[i].acl.read  = !!(objs[i].acl.permissions & utils.CONSTS.ACCESS_EVERY_READ);\n                        objs[i].acl.write = !!(objs[i].acl.permissions & utils.CONSTS.ACCESS_EVERY_WRITE);\n                    } else {\n                        objs[i].acl.read  = true;\n                        objs[i].acl.write = true;\n                    }\n                    result.push({\n                        file: file,\n                        stats: objs[i].stats,\n                        isDir: false,\n                        acl: objs[i].acl,\n                        modifiedAt: objs[i].modifiedAt,\n                        createdAt:  objs[i].createdAt\n                    });\n                }\n            }\n            while (dirs.length) {\n                result.push({\n                    file: dirs.shift(),\n                    stats: {},\n                    isDir: true\n                });\n            }\n            return tools.maybeCallbackWithError(callback, null, result);\n        });\n    }\n\n    async readDir(id, name, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = null;\n        }\n        if (options && options.acl) {\n            options.acl = null;\n        }\n\n        if (typeof name !== 'string') {\n            name = '';\n        }\n\n        // remove first and last\n        if (name.startsWith('/')) {\n            name = name.substring(1);\n        }\n        if (name.endsWith('/')) {\n            name = name.substring(0, name.length - 1);\n        }\n\n        try {\n            await this.validateMetaObject(id);\n        } catch (e) {\n            this.log.warn(`${this.namespace} readDir will not read this directory (${name}) in future versions: ${e.message}`);\n            // todo: replace by below code in 3.1 + add test\n            // this.log.error(`Cannot read directory ${name}: ${e.message}`);\n            // typeof callback === 'function' && setImmediate(() => callback(e.message));\n        }\n\n        this.checkFileRights(id, name, options, utils.CONSTS.ACCESS_READ, (err, options) => {\n            if (err) {\n                typeof callback === 'function' && callback(err);\n            } else {\n                if (!options.acl.file.list) {\n                    typeof callback === 'function' && callback(utils.ERRORS.ERROR_PERMISSION);\n                } else {\n                    this._readDir(id, name, options, callback);\n                }\n            }\n        });\n    }\n\n    readDirAsync(id, name, options) {\n        return new Promise((resolve, reject) =>\n            this.readDir(id, name, options, (err, res) =>\n                err ? reject(err) : resolve(res)));\n    }\n\n    _renameHelper(keys, oldBase, newBase, callback) {\n        if (!keys || !keys.length) {\n            typeof callback === 'function' && callback();\n        } else {\n            if (!this.client) {\n                return typeof callback === 'function' && callback(utils.ERRORS.ERROR_DB_CLOSED);\n            }\n            const id = keys.shift();\n            this.client.rename(id.replace(/\\$%\\$meta$/, '$%$data'), id.replace(oldBase, newBase).replace(/\\$%\\$meta$/, '$%$data'), _err =>\n                this.client.rename(id, id.replace(oldBase, newBase), _err =>\n                    setImmediate(() => this._renameHelper(keys, oldBase, newBase, callback))));\n        }\n    }\n\n    async _rename(id, oldName, newName, options, callback, meta) {\n        const oldMetaID = this.getFileId(id, oldName, true);\n        const oldDataID = this.getFileId(id, oldName, false);\n        const newMetaID = this.getFileId(id, newName, true);\n        const newDataID = this.getFileId(id, newName, false);\n        if (!meta || !this.client) {\n            return typeof callback === 'function' && callback(utils.ERRORS.ERROR_DB_CLOSED);\n        } else if (meta.notExists) {\n            oldName = this.normalizeFilename(oldName);\n            newName = this.normalizeFilename(newName);\n\n            // it could be dir\n            if (!oldName.endsWith('/*')) {\n                oldName += '/*';\n            } else if (oldName.endsWith('/')) {\n                oldName += '*';\n            }\n\n            if (!newName.endsWith('/*')) {\n                newName += '/*';\n            } else if (newName.endsWith('/')) {\n                newName += '*';\n            }\n\n            const oldBase = oldName.substring(0, oldName.length - 1);\n            const newBase = newName.substring(0, newName.length - 1);\n            const dirID = this.getFileId(id, oldName);\n            let keys;\n            try {\n                keys = await this._getKeysViaScan(dirID);\n            } catch (e) {\n                return tools.maybeCallbackWithError(callback, e);\n            }\n\n            if (!this.client) {\n                return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\n            }\n            if (!keys) {\n                return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_NOT_FOUND);\n            }\n\n            keys = keys\n                .sort()\n                .filter(key => key.match(/\\$%\\$meta$/));\n\n            if (!keys.length) {\n                return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_NOT_FOUND);\n            }\n            // Check permissions\n            this.client.mget(keys, (err, objs) => {\n                let result;\n                const dontCheck =\n                        options.user === utils.CONSTS.SYSTEM_ADMIN_USER ||\n                        options.group !== utils.CONSTS.SYSTEM_ADMIN_GROUP ||\n                        (options.groups && options.groups.indexOf(utils.CONSTS.SYSTEM_ADMIN_GROUP) !== -1);\n\n                objs = objs || [];\n                if (!dontCheck) {\n                    result = [];\n                    for (let i = 0; i < keys.length; i++) {\n                        try {\n                            objs[i] = JSON.parse(objs[i]);\n                        } catch (e) {\n                            this.log.error(`${this.namespace} Cannot parse JSON ${keys[i]}: ${objs[i]}`);\n                            continue;\n                        }\n                        if (utils.checkObject(objs[i], options, utils.CONSTS.ACCESS_READ)) {\n                            result.push(keys[i]);\n                        }\n                    }\n                } else {\n                    result = keys;\n                }\n                this._renameHelper(result, oldBase, newBase, callback);\n            });\n        } else {\n            this.client.rename(oldDataID, newDataID, _err =>\n                this.client.rename(oldMetaID, newMetaID, callback));\n        }\n    }\n\n    rename(id, oldName, newName, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = null;\n        }\n        if (options && options.acl) {\n            options.acl = null;\n        }\n        if (typeof oldName !== 'string' || !oldName.length || oldName === '/' || oldName === '//' ||\n            typeof newName !== 'string' || !newName.length || newName === '/' || newName === '//') {\n            return typeof callback === 'function' && setImmediate(() => callback(utils.ERRORS.ERROR_NOT_FOUND));\n        }\n        if (oldName.startsWith('/')) {\n            oldName = oldName.substring(1);\n        }\n        if (newName.startsWith('/')) {\n            newName = newName.substring(1);\n        }\n        if (oldName.endsWith('/')) {\n            oldName = oldName.substring(0, oldName.length - 1);\n        }\n        if (newName.endsWith('/')) {\n            newName = newName.substring(0, newName.length - 1);\n        }\n\n        this.checkFileRights(id, oldName, options, utils.CONSTS.ACCESS_WRITE, (err, options, meta) => {\n            if (err) {\n                typeof callback === 'function' && callback(err);\n            } else {\n                if (!options.acl.file.write) {\n                    typeof callback === 'function' && callback(utils.ERRORS.ERROR_PERMISSION);\n                } else {\n                    this._rename(id, oldName, newName, options, callback, meta);\n                }\n            }\n        });\n    }\n\n    renameAsync(id, oldName, newName, options) {\n        return new Promise((resolve, reject) =>\n            this.rename(id, oldName, newName, options, err =>\n                err ? reject(err) : resolve()));\n    }\n\n    _touch(id, name, options, callback, meta) {\n        const metaID = this.getFileId(id, name, true);\n        if (!this.client) {\n            return typeof callback === 'function' && callback(utils.ERRORS.ERROR_DB_CLOSED);\n        }\n        if (!meta || meta.notExists) {\n            return typeof callback === 'function' && callback(utils.ERRORS.ERROR_NOT_FOUND);\n        }\n        meta.modifiedAt = Date.now();\n        this.client.set(metaID, JSON.stringify(meta), callback);\n    }\n\n    touch(id, name, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = null;\n        }\n        if (options && options.acl) {\n            options.acl = null;\n        }\n\n        if (typeof name !== 'string' || !name.length || name === '/') {\n            return typeof callback === 'function' && setImmediate(() => callback(utils.ERRORS.ERROR_NOT_FOUND));\n        }\n\n        if (name.startsWith('/')) {\n            name = name.substring(1);\n        }\n\n        this.checkFileRights(id, name, options, utils.CONSTS.ACCESS_WRITE, (err, options, meta) => {\n            if (err) {\n                typeof callback === 'function' && callback(err);\n            } else {\n                return this._touch(id, name, options, callback, meta);\n            }\n        });\n    }\n\n    touchAsync(id, name, options) {\n        return new Promise((resolve, reject) =>\n            this.touch(id, name, options, err =>\n                err ? reject(err) : resolve()));\n    }\n\n    _rmHelper(keys, callback) {\n        if (!keys || !keys.length) {\n            typeof callback === 'function' && callback();\n        } else {\n            if (!this.client) {\n                return typeof callback === 'function' && callback(utils.ERRORS.ERROR_DB_CLOSED);\n            }\n            const id = keys.shift();\n            this._delBinaryState(id.replace(/\\$%\\$meta$/, '$%$data'), _err =>\n                this.client.del(id, _err =>\n                    setImmediate(() => this._rmHelper(keys, callback))));\n        }\n    }\n\n    async _rm(id, name, options, callback, meta) {\n        if (meta && !meta.isDir) {\n            // it is file\n            const metaID = this.getFileId(id, name, true);\n            const dataID = this.getFileId(id, name, false);\n            this.delObject(dataID, _err => this.delObject(metaID, callback));\n        } else {\n            if (!this.client) {\n                return typeof callback === 'function' && callback(utils.ERRORS.ERROR_DB_CLOSED);\n            }\n            name = this.normalizeFilename(name);\n            // it could be dir\n            if (! name.endsWith('/*')) {\n                name += '/*';\n            } else if (name.endsWith('/')) {\n                name += '*';\n            }\n            const dirID = this.getFileId(id, name);\n            let keys;\n            try {\n                keys = await this._getKeysViaScan(dirID);\n            } catch (e) {\n                return tools.maybeCallbackWithError(callback, e);\n            }\n            if (!this.client) {\n                return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\n            }\n            if (!keys) {\n                return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_NOT_FOUND);\n            }\n\n            keys = keys\n                .sort()\n                .filter(key => key.match(/\\$%\\$meta$/));\n\n            if (!keys.length) {\n                return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_NOT_FOUND);\n            }\n            // Check permissions\n            this.client.mget(keys, (err, objs) => {\n                let result;\n                const dontCheck =\n                        options.user === utils.CONSTS.SYSTEM_ADMIN_USER ||\n                        options.group !== utils.CONSTS.SYSTEM_ADMIN_GROUP ||\n                        (options.groups && options.groups.indexOf(utils.CONSTS.SYSTEM_ADMIN_GROUP) !== -1);\n\n                objs = objs || [];\n                if (!dontCheck) {\n                    result = [];\n                    for (let i = 0; i < keys.length; i++) {\n                        try {\n                            objs[i] = JSON.parse(objs[i]);\n                        } catch (e) {\n                            this.log.error(`${this.namespace} Cannot parse JSON ${keys[i]}: ${objs[i]}`);\n                            continue;\n                        }\n                        if (utils.checkObject(objs[i], options, utils.CONSTS.ACCESS_READ)) {\n                            result.push(keys[i]);\n                        }\n                    }\n                } else {\n                    result = keys;\n                }\n                const files = result.map(key => {\n                    const name = key.substring(this.fileNamespaceL + id.length + 3, key.length - 7);\n                    const pos = name.lastIndexOf('/');\n                    if (pos !== -1) {\n                        return {file: name.substring(pos + 1), path: name.substring(0, pos)};\n                    } else {\n                        return {file: id, path: ''};\n                    }\n                });\n                this._rmHelper(result, () => {\n                    return tools.maybeCallbackWithError(callback, null, files);\n                });\n            });\n        }\n    }\n\n    rm(id, name, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = null;\n        }\n        if (options && options.acl) {\n            options.acl = null;\n        }\n\n        if (typeof name !== 'string') {\n            name = '';\n        }\n\n        this.checkFileRights(id, null, options, utils.CONSTS.ACCESS_DELETE, (err, options, meta) => {\n            if (err) {\n                typeof callback === 'function' && callback(err);\n            } else {\n                if (!options.acl.file['delete']) {\n                    typeof callback === 'function' && callback(utils.ERRORS.ERROR_PERMISSION);\n                } else {\n                    return this._rm(id, name, options, callback, meta && meta.notExists ? null : meta);\n                }\n            }\n        });\n    }\n\n    rmAsync(id, name, options) {\n        return new Promise((resolve, reject) =>\n            this.rm(id, name, options, (err, files) =>\n                err ? reject(err) : resolve(files)));\n    }\n\n    // simulate. redis has no dirs\n    mkdir(id, dirName, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = null;\n        }\n        if (typeof dirName !== 'string') {\n            dirName = '';\n        }\n\n        dirName = this.normalizeFilename(dirName);\n        if (dirName.startsWith('/')) {\n            dirName = dirName.substring(1);\n        }\n        this.checkFileRights(id, dirName, options, utils.CONSTS.ACCESS_WRITE, (err, options) => {\n            if (err) {\n                typeof callback === 'function' && callback(err);\n            } else {\n                if (!options.acl.file.write) {\n                    typeof callback === 'function' && callback(utils.ERRORS.ERROR_PERMISSION);\n                } else {\n                    // we create a dummy file (for file this file exists to store meta data)\n                    options = options || {};\n                    options.virtualFile = true; // this is a virtual File\n                    const realName = dirName + (dirName.endsWith('/') ? '' : '/');\n                    this.writeFile(id, realName + '_data.json', '', options, callback);\n                }\n            }\n        });\n    }\n\n    mkdirAsync(id, dirName, options) {\n        return new Promise((resolve, reject) =>\n            this.mkdir(id, dirName, options, err =>\n                err ? reject(err) : resolve()));\n    }\n\n    _chownFileHelper(keys, metas, options, callback) {\n        if (!keys || !keys.length) {\n            return typeof callback === 'function' && callback();\n        }\n        if (!this.client) {\n            return typeof callback === 'function' && callback(utils.ERRORS.ERROR_DB_CLOSED);\n        }\n        const id  = keys.shift();\n        const meta = metas.shift();\n        meta.acl.owner      = options.owner;\n        meta.acl.ownerGroup = options.ownerGroup;\n        this.client.set(id, JSON.stringify(meta), _err =>\n            setImmediate(() => this._chownFileHelper(keys, metas, options, callback)));\n    }\n\n    async _chownFile(id, name, options, callback, meta) {\n        if (!meta) {\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_NOT_FOUND);\n        }\n\n        name = this.normalizeFilename(name);\n        if (!this.client) {\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\n        }\n        if (!meta.isDir && !meta.notExists) {\n            // it is file\n            const metaID = this.getFileId(id, name, true);\n            meta.acl.owner = options.owner;\n            meta.acl.ownerGroup = options.ownerGroup;\n            this.client.set(metaID, JSON.stringify(meta), err => {\n                const nameArr = name.split('/');\n                const file = nameArr.pop();\n                const res = [{\n                    path:       nameArr.join('/'),\n                    file:       file,\n                    stats:      meta.stats,\n                    isDir:      false,\n                    acl:        meta.acl || {},\n                    modifiedAt: meta.modifiedAt,\n                    createdAt:  meta.createdAt\n                }];\n                return tools.maybeCallbackWithError(callback, err, res);\n            });\n            return;\n        }\n        // it could be dir\n        if (! name.endsWith('/*')) {\n            name += '/*';\n        } else if (name.endsWith('/')) {\n            name += '*';\n        }\n        const dirID = this.getFileId(id, name);\n\n        let keys;\n        try {\n            keys = await this._getKeysViaScan(dirID);\n        } catch (e) {\n            return tools.maybeCallbackWithError(callback, e);\n        }\n\n        if (!this.client) {\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\n        }\n        if (!keys) {\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_NOT_FOUND);\n        }\n\n        keys = keys\n            .sort()\n            .filter(key => key.match(/\\$%\\$meta$/));\n\n        // Check permissions\n        this.client.mget(keys, (err, metas) => {\n            const dontCheck = options.user === utils.CONSTS.SYSTEM_ADMIN_USER ||\n                    options.group !== utils.CONSTS.SYSTEM_ADMIN_GROUP ||\n                    (options.groups && options.groups.indexOf(utils.CONSTS.SYSTEM_ADMIN_GROUP) !== -1);\n            const keysFiltered = [];\n            const objsFiltered = [];\n            const processed = [];\n            const start = dirID.indexOf('$%$') + 3;\n            const end = '$%$meta'.length;\n\n            metas = metas || [];\n            for (let i = 0; i < keys.length; i++) {\n                try {\n                    metas[i] = JSON.parse(metas[i]);\n                } catch (e) {\n                    this.log.error(`${this.namespace} Cannot parse JSON ${keys[i]}: ${metas[i]}`);\n                    continue;\n                }\n                if (dontCheck || utils.checkObject(metas[i], options, utils.CONSTS.ACCESS_WRITE)) {\n                    if (!metas[i] || metas[i].virtualFile) {\n                        continue;\n                    } // virtual file, ignore\n                    keysFiltered.push(keys[i]);\n                    objsFiltered.push(metas[i]);\n\n                    const name = keys[i].substring(start, keys[i].length - end);\n                    const nameArr = name.split('/');\n                    const file = nameArr.pop();\n                    processed.push({\n                        path:       nameArr.join('/'),\n                        file:       file,\n                        stats:      metas[i].stats || {},\n                        isDir:      false,\n                        acl:        metas[i].acl || {},\n                        modifiedAt: metas[i].modifiedAt,\n                        createdAt:  metas[i].createdAt\n                    });\n                }\n            }\n            this._chownFileHelper(keysFiltered, objsFiltered, options, err => {\n                return tools.maybeCallbackWithError(callback, err, processed);\n            });\n        });\n    }\n\n    chownFile(id, name, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = null;\n        }\n        options = options || {};\n        if (typeof options !== 'object') {\n            options = {owner: options};\n        }\n\n        if (typeof name !== 'string' || !name.length || name === '/') {\n            return typeof callback === 'function' && setImmediate(() => callback(utils.ERRORS.ERROR_NOT_FOUND));\n        }\n\n        if (name.startsWith('/')) {\n            name = name.substring(1);\n        }\n\n        if (!options.ownerGroup && options.group) {\n            options.ownerGroup = options.group;\n        }\n        if (!options.owner      && options.user)  {\n            options.owner      = options.user;\n        }\n\n        if (!options.owner) {\n            this.log.error(this.namespace + ' user is not defined');\n            typeof callback === 'function' && setImmediate(() => callback('invalid parameter'));\n            return;\n        }\n\n        if (!options.ownerGroup) {\n            // get user group\n            this.getUserGroup(options.owner, (user, groups /* , permissions */) => {\n                if (!groups || !groups[0]) {\n                    typeof callback === 'function' && setImmediate(() => callback('user \"' + options.owner + '\" belongs to no group'));\n                    return;\n                } else {\n                    options.ownerGroup = groups[0];\n                }\n                this.chownFile(id, name, options, callback);\n            });\n            return;\n        }\n\n        this.checkFileRights(id, name, options, utils.CONSTS.ACCESS_WRITE, (err, options, meta) => {\n            if (err) {\n                typeof callback === 'function' && callback(err);\n            } else {\n                if (!options.acl.file.write) {\n                    typeof callback === 'function' && callback(utils.ERRORS.ERROR_PERMISSION);\n                } else {\n                    return this._chownFile(id, name, options, callback, meta);\n                }\n            }\n        });\n    }\n\n    chownFileAsync(id, name, options) {\n        return new Promise((resolve, reject) =>\n            this.chownFile(id, name, options, err =>\n                err ? reject(err) : resolve()));\n    }\n\n    _chmodFileHelper(keys, metas, options, callback) {\n        if (!keys || !keys.length) {\n            typeof callback === 'function' && callback();\n        } else {\n            if (!this.client) {\n                return typeof callback === 'function' && callback(utils.ERRORS.ERROR_DB_CLOSED);\n            }\n            const id   = keys.shift();\n            const meta = metas.shift();\n            meta.acl.permissions = options.mode;\n            this.client.set(id, JSON.stringify(meta), _err =>\n                setImmediate(() => this._chmodFileHelper(keys, metas, options, callback)));\n        }\n    }\n\n    async _chmodFile(id, name, options, callback, meta) {\n        if (!meta) {\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_NOT_FOUND);\n        }\n        name = this.normalizeFilename(name);\n        if (!this.client) {\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\n        }\n        if (!meta.isDir && !meta.notExists) {\n            // it is file\n            const metaID = this.getFileId(id, name, true);\n            meta.acl.permissions = options.mode;\n            this.client.set(metaID, JSON.stringify(meta), err => {\n                const nameArr = name.split('/');\n                const file = nameArr.pop();\n                const res = [{\n                    path:       nameArr.join('/'),\n                    file:       file,\n                    stats:      meta.stats,\n                    isDir:      false,\n                    acl:        meta.acl || {},\n                    modifiedAt: meta.modifiedAt,\n                    createdAt:  meta.createdAt\n                }];\n                return typeof callback === 'function' && callback(err, res);\n            });\n            return;\n        }\n        // it could be dir\n        if (! name.endsWith('/*')) {\n            name += '/*';\n        } else if (name.endsWith('/')) {\n            name += '*';\n        }\n        const dirID = this.getFileId(id, name);\n\n        let keys;\n        try {\n            keys = await this._getKeysViaScan(dirID);\n        } catch (e) {\n            return tools.maybeCallbackWithError(callback, e);\n        }\n\n        if (!this.client) {\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\n        }\n        if (!keys) {\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_NOT_FOUND);\n        }\n\n        keys = keys\n            .sort()\n            .filter(key => key.match(/\\$%\\$meta$/));\n\n        // Check permissions\n        this.client.mget(keys, (err, objs) => {\n            const dontCheck =\n                    options.user === utils.CONSTS.SYSTEM_ADMIN_USER ||\n                    options.group !== utils.CONSTS.SYSTEM_ADMIN_GROUP ||\n                    (options.groups && options.groups.indexOf(utils.CONSTS.SYSTEM_ADMIN_GROUP) !== -1);\n\n            const keysFiltered = [];\n            const objsFiltered = [];\n            const processed = [];\n            const start = dirID.indexOf('$%$') + 3;\n            const end = '$%$meta'.length;\n\n            objs = objs || [];\n            for (let i = 0; i < keys.length; i++) {\n                try {\n                    objs[i] = JSON.parse(objs[i]);\n                } catch (e) {\n                    this.log.error(`${this.namespace} Cannot parse JSON ${keys[i]}: ${objs[i]}`);\n                    continue;\n                }\n                if (dontCheck || utils.checkObject(objs[i], options, utils.CONSTS.ACCESS_WRITE)) {\n                    if (!objs[i] || objs[i].virtualFile) {\n                        continue;\n                    } // virtual file, ignore\n                    keysFiltered.push(keys[i]);\n                    objsFiltered.push(objs[i]);\n\n                    const name = keys[i].substring(start, keys[i].length - end);\n                    const nameArr = name.split('/');\n                    const file = nameArr.pop();\n                    processed.push({\n                        path:       nameArr.join('/'),\n                        file:       file,\n                        stats:      objs[i].stats,\n                        isDir:      false,\n                        acl:        objs[i].acl || {},\n                        modifiedAt: objs[i].modifiedAt,\n                        createdAt:  objs[i].createdAt\n                    });\n                }\n            }\n            this._chmodFileHelper(keysFiltered, objsFiltered, options, err => {\n                return tools.maybeCallbackWithError(callback, err, processed);\n            });\n        });\n    }\n\n    chmodFile(id, name, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = null;\n        }\n        options = options || {};\n\n        if (typeof name !== 'string' || !name.length || name === '/') {\n            return typeof callback === 'function' && setImmediate(() => callback(utils.ERRORS.ERROR_NOT_FOUND));\n        }\n\n        if (name[0].startsWith('/')) {\n            name = name.substring(1);\n        }\n\n        if (typeof options !== 'object') {\n            options = {mode: options};\n        }\n\n        if (options.mode === undefined) {\n            this.log.error(this.namespace + ' mode is not defined');\n            typeof callback === 'function' && setImmediate(() => callback('invalid parameter'));\n            return;\n        } else if (typeof options.mode === 'string') {\n            options.mode = parseInt(options.mode, 16);\n        }\n\n        this.checkFileRights(id, name, options, utils.CONSTS.ACCESS_WRITE, (err, options, meta) => {\n            if (err) {\n                typeof callback === 'function' && callback(err);\n            } else {\n                if (!options.acl.file.write) {\n                    typeof callback === 'function' && callback(utils.ERRORS.ERROR_PERMISSION);\n                } else {\n                    return this._chmodFile(id, name, options, callback, meta);\n                }\n            }\n        });\n    }\n\n    chmodFileAsync(id, name, options) {\n        return new Promise((resolve, reject) =>\n            this.chmodFile(id, name, options, err =>\n                err ? reject(err) : resolve()));\n    }\n\n    enableFileCache(enabled, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = null;\n        }\n\n        if (options && options.acl) {\n            options.acl = null;\n        }\n\n        utils.checkObjectRights(this, null, null, options, utils.CONSTS.ACCESS_WRITE, (err, _options) => {\n            if (err) {\n                typeof callback === 'function' && setImmediate(() => callback(err));\n            } else if (typeof callback === 'function') {\n                // cache cannot be enabled\n                setImmediate(() => typeof callback === 'function' && callback(null, false));\n            }\n        });\n    }\n\n    enableFileCacheAsync(enabled, options) {\n        return new Promise((resolve, reject) =>\n            this.enableFileCache(enabled, options, (err, res) =>\n                err ? reject(err) : resolve(res)));\n    }\n\n    // -------------- OBJECT FUNCTIONS -------------------------------------------\n    _subscribe(pattern, options, subClient, callback) {\n        if (!subClient) {\n            return typeof callback === 'function' && setImmediate(() => callback(utils.ERRORS.ERROR_DB_CLOSED));\n        }\n        if (Array.isArray(pattern)) {\n            let count = pattern.length;\n            pattern.forEach(pattern => {\n                this.log.silly(this.namespace + ' redis psubscribe ' + this.objNamespace + pattern);\n                subClient.psubscribe(this.objNamespace + pattern, err => {\n                    if (!err) {\n                        subClient.ioBrokerSubscriptions[this.objNamespace + pattern] = true;\n                    }\n                    !--count && typeof callback === 'function' && callback(err);\n                });\n\n            });\n        } else {\n            this.log.silly(this.namespace + ' redis psubscribe ' + this.objNamespace + pattern);\n            subClient.psubscribe(this.objNamespace + pattern, err => {\n                if (!err) {\n                    subClient.ioBrokerSubscriptions[this.objNamespace + pattern] = true;\n                }\n                typeof callback === 'function' && callback(err);\n            });\n        }\n    }\n\n    subscribeConfig(pattern, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = null;\n        }\n        utils.checkObjectRights(this, null, null, options, 'list', (err, options) => {\n            if (err) {\n                typeof callback === 'function' && setImmediate(() => callback(err));\n            } else {\n                return this._subscribe(pattern, options, this.subSystem, callback);\n            }\n        });\n    }\n\n    subscribe(pattern, options, callback) {\n        return this.subscribeConfig(pattern, options, callback);\n    }\n\n    subscribeAsync(pattern, options) {\n        return new Promise((resolve, reject) =>\n            this.subscribe(pattern, options, err =>\n                err ? reject(err) : resolve()));\n    }\n\n    subscribeUser(pattern, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = null;\n        }\n        utils.checkObjectRights(this, null, null, options, 'list', (err, options) => {\n            if (err) {\n                typeof callback === 'function' && setImmediate(() => callback(err));\n            } else {\n                return this._subscribe(pattern, options, this.sub, callback);\n            }\n        });\n    }\n\n    subscribeUserAsync(pattern, options) {\n        return new Promise((resolve, reject) =>\n            this.subscribeUser(pattern, options, err =>\n                err ? reject(err) : resolve()));\n    }\n\n    _unsubscribe(pattern, options, subClient, callback) {\n        if (!subClient) {\n            return typeof callback === 'function' && setImmediate(() => callback(utils.ERRORS.ERROR_DB_CLOSED));\n        }\n        if (Array.isArray(pattern)) {\n            let count = pattern.length;\n            pattern.forEach(pattern => {\n                this.log.silly(this.namespace + ' redis punsubscribe ' + this.objNamespace + pattern);\n                subClient.punsubscribe(this.objNamespace + pattern, err => {\n                    if (!err && subClient.ioBrokerSubscriptions[this.objNamespace + pattern] !== undefined) {\n                        delete subClient.ioBrokerSubscriptions[this.objNamespace + pattern];\n                    }\n                    !--count && typeof callback === 'function' && callback(err);\n                });\n            });\n        } else {\n            this.log.silly(this.namespace + ' redis punsubscribe ' + this.objNamespace + pattern);\n            subClient.punsubscribe(this.objNamespace + pattern, err => {\n                if (!err && subClient.ioBrokerSubscriptions[this.objNamespace + pattern] !== undefined) {\n                    delete subClient.ioBrokerSubscriptions[this.objNamespace + pattern];\n                }\n                typeof callback === 'function' && callback(err);\n            });\n        }\n    }\n\n    unsubscribeConfig(pattern, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = null;\n        }\n        utils.checkObjectRights(this, null, null, options, 'list', (err, options) => {\n            if (err) {\n                typeof callback === 'function' && setImmediate(() => callback(err));\n            } else {\n                return this._unsubscribe(pattern, options, this.subSystem, callback);\n            }\n        });\n    }\n\n    unsubscribe(pattern, options, callback) {\n        return this.unsubscribeConfig(pattern, options, callback);\n    }\n\n    unsubscribeAsync(pattern, options) {\n        return new Promise((resolve, reject) =>\n            this.unsubscribe(pattern, options, err =>\n                err ? reject(err) : resolve()));\n    }\n\n    unsubscribeUser(pattern, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = null;\n        }\n        utils.checkObjectRights(this, null, null, options, 'list', (err, options) => {\n            if (err) {\n                typeof callback === 'function' && setImmediate(() => callback(err));\n            } else {\n                return this._unsubscribe(pattern, options, this.sub, callback);\n            }\n        });\n    }\n\n    unsubscribeUserAsync(pattern, options) {\n        return new Promise((resolve, reject) =>\n            this.unsubscribeUser(pattern, options, err =>\n                err ? reject(err) : resolve()));\n    }\n\n    _objectHelper(keys, objs, callback) {\n        if (!keys || !keys.length) {\n            typeof callback === 'function' && callback();\n        } else {\n            if (!this.client) {\n                return typeof callback === 'function' && callback(utils.ERRORS.ERROR_DB_CLOSED);\n            }\n            const id  = keys.shift();\n            const obj = objs.shift();\n            const message = JSON.stringify(obj);\n            this.client.set(id, message, err => {\n                !err && this.client.publish(id, message).catch(_err => {});\n                setImmediate(() => this._objectHelper(keys, objs, callback));\n            });\n        }\n    }\n\n    _chownObject(pattern, options, callback) {\n        this.getConfigKeys(pattern, options, (err, keys) => {\n            if (err) {\n                typeof callback === 'function' && callback(err);\n                return;\n            }\n            if (!this.client) {\n                return typeof callback === 'function' && callback(utils.ERRORS.ERROR_DB_CLOSED);\n            }\n            this.client.mget(keys, (err, objects) => {\n                const filteredKeys = [];\n                const filteredObjs = [];\n                objects = objects || [];\n                for (let k = 0; k < keys.length; k++) {\n                    try {\n                        objects[k] = JSON.parse(objects[k]);\n                    } catch (e) {\n                        this.log.error(`${this.namespace} Cannot parse JSON ${keys[k]}: ${objects[k]}`);\n                        continue;\n                    }\n                    if (!utils.checkObject(objects[k], options, utils.CONSTS.ACCESS_WRITE)) {\n                        continue;\n                    }\n                    if (!objects[k].acl) {\n                        objects[k].acl = {\n                            owner:      (this.defaultNewAcl && this.defaultNewAcl.owner)      || utils.CONSTS.SYSTEM_ADMIN_USER,\n                            ownerGroup: (this.defaultNewAcl && this.defaultNewAcl.ownerGroup) || utils.CONSTS.SYSTEM_ADMIN_GROUP,\n                            object:     (this.defaultNewAcl && this.defaultNewAcl.object)     || (utils.CONSTS.ACCESS_USER_RW | utils.CONSTS.ACCESS_GROUP_READ | utils.CONSTS.ACCESS_EVERY_READ) // '0644'\n                        };\n                        if (objects[k].type === 'state') {\n                            objects[k].acl.state = (this.defaultNewAcl && this.defaultNewAcl.state) || (utils.CONSTS.ACCESS_USER_RW | utils.CONSTS.ACCESS_GROUP_READ | utils.CONSTS.ACCESS_EVERY_READ); // '0644'\n                        }\n                    }\n                    objects[k].acl.owner      = options.owner;\n                    objects[k].acl.ownerGroup = options.ownerGroup;\n                    filteredKeys.push(keys[k]);\n                    filteredObjs.push(objects[k]);\n                }\n                this._objectHelper(filteredKeys, filteredObjs, () =>\n                    typeof callback === 'function' && setImmediate(() => callback(null, filteredObjs)));\n            });\n        }, true);\n    }\n\n    chownObject(pattern, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = null;\n        }\n        options = options || {};\n        options.acl = null;\n\n        if (typeof options !== 'object') {\n            options = {owner: options};\n        }\n\n        if (!options.ownerGroup && options.group) {\n            options.ownerGroup = options.group;\n        }\n        if (!options.owner && options.user)  {\n            options.owner = options.user;\n        }\n\n        if (!options.owner) {\n            this.log.error(this.namespace + ' user is not defined');\n            typeof callback === 'function' && setImmediate(() => callback('invalid parameter'));\n            return;\n        }\n\n        if (!options.ownerGroup) {\n            // get user group\n            this.getUserGroup(options.owner, (user, groups /* , permissions*/) => {\n                if (!groups || !groups[0]) {\n                    typeof callback === 'function' && setImmediate(() => callback('user \"' + options.owner + '\" belongs to no group'));\n                    return;\n                } else {\n                    options.ownerGroup = groups[0];\n                }\n                this.chownObject(pattern, options, callback);\n            });\n            return;\n        }\n\n        utils.checkObjectRights(this, null, null, options, utils.CONSTS.ACCESS_WRITE, (err, options) => {\n            if (err) {\n                typeof callback === 'function' && callback(err);\n            } else {\n                if (!options.acl.object || !options.acl.object.write) {\n                    typeof callback === 'function' && setImmediate(() => callback(utils.ERRORS.ERROR_PERMISSION));\n                } else {\n                    return this._chownObject(pattern, options, callback);\n                }\n            }\n        });\n    }\n\n    chownObjectAsync(pattern, options) {\n        return new Promise((resolve, reject) =>\n            this.chownObject(pattern, options, (err, list) =>\n                err ? reject(err) : resolve(list)));\n    }\n\n    _chmodObject(pattern, options, callback) {\n        this.getConfigKeys(pattern, options, (err, keys) => {\n            if (err) {\n                typeof callback === 'function' && callback(err);\n                return;\n            }\n            if (!this.client) {\n                return typeof callback === 'function' && callback(utils.ERRORS.ERROR_DB_CLOSED);\n            }\n            this.client.mget(keys, (err, objects) => {\n                const filteredKeys = [];\n                const filteredObjs = [];\n                objects = objects || [];\n                for (let k = 0; k < keys.length; k++) {\n                    try {\n                        objects[k] = JSON.parse(objects[k]);\n                    } catch (e) {\n                        this.log.error(`${this.namespace} Cannot parse JSON ${keys[k]}: ${objects[k]}`);\n                        continue;\n                    }\n                    if (!utils.checkObject(objects[k], options, utils.CONSTS.ACCESS_WRITE)) {\n                        continue;\n                    }\n                    if (!objects[k].acl) {\n                        objects[k].acl = {\n                            owner:      (this.defaultNewAcl && this.defaultNewAcl.owner)      || utils.CONSTS.SYSTEM_ADMIN_USER,\n                            ownerGroup: (this.defaultNewAcl && this.defaultNewAcl.ownerGroup) || utils.CONSTS.SYSTEM_ADMIN_GROUP,\n                            object:     (this.defaultNewAcl && this.defaultNewAcl.object)     || (utils.CONSTS.ACCESS_USER_RW | utils.CONSTS.ACCESS_GROUP_READ | utils.CONSTS.ACCESS_EVERY_READ) // '0644'\n                        };\n                        if (objects[k].type === 'state') {\n                            objects[k].acl.state = (this.defaultNewAcl && this.defaultNewAcl.state) || (utils.CONSTS.ACCESS_USER_RW | utils.CONSTS.ACCESS_GROUP_READ | utils.CONSTS.ACCESS_EVERY_READ); // '0644'\n                        }\n                    }\n                    if (options.object !== undefined) {\n                        objects[k].acl.object = options.object;\n                    }\n                    if (options.state !== undefined) {\n                        objects[k].acl.state = options.state;\n                    }\n                    filteredKeys.push(keys[k]);\n                    filteredObjs.push(objects[k]);\n                }\n                this._objectHelper(filteredKeys, filteredObjs, () =>\n                    typeof callback === 'function' && callback(null, filteredObjs));\n            });\n        }, true);\n    }\n\n    chmodObject(pattern, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = null;\n        }\n        options = options || {};\n        options.acl = null;\n\n        if (typeof options !== 'object') {\n            options = {object: options};\n        }\n\n        if (options.mode && !options.object) {\n            options.object = options.mode;\n        }\n\n        if (options.object === undefined) {\n            this.log.error(this.namespace + ' mode is not defined');\n            return typeof callback === 'function' && setImmediate(() => callback('invalid parameter'));\n        } else if (typeof options.mode === 'string') {\n            options.mode = parseInt(options.mode, 16);\n        }\n\n        utils.checkObjectRights(this, null, null, options, utils.CONSTS.ACCESS_WRITE, (err, options) => {\n            if (err) {\n                typeof callback === 'function' && setImmediate(() => callback(err));\n            } else {\n                if (!options.acl.file.write) {\n                    typeof callback === 'function' && setImmediate(() => callback(utils.ERRORS.ERROR_PERMISSION));\n                } else {\n                    return this._chmodObject(pattern, options, callback);\n                }\n            }\n        });\n    }\n\n    chmodObjectAsync(pattern, options) {\n        return new Promise((resolve, reject) =>\n            this.chmodObject(pattern, options, (err, list) =>\n                err ? reject(err) : resolve(list)));\n    }\n\n    _getObject(id, options, callback) {\n        if (!this.client) {\n            return typeof callback === 'function' && setImmediate(() => callback(utils.ERRORS.ERROR_DB_CLOSED));\n        }\n        if (!id || typeof id !== 'string') {\n            return typeof callback === 'function' && setImmediate(() => callback('invalid id ' + JSON.stringify(id)));\n        }\n\n        this.client.get(this.objNamespace + id, (err, obj) => {\n            if (err) {\n                this.log.debug(this.namespace + ' redis get ' + id + ', error - ' + err);\n            } else {\n                //this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' redis get ' + id + ' ok: ' + obj);\n            }\n            try {\n                obj = obj ? JSON.parse(obj) : null;\n            } catch (e) {\n                this.log.warn(`${this.namespace} Cannot parse ${id} - ${obj}: ${e.message}`);\n            }\n            if (obj) {\n                // Check permissions\n                if (utils.checkObject(obj, options, utils.CONSTS.ACCESS_READ)) {\n                    typeof callback === 'function' && callback(null, obj);\n                } else {\n                    typeof callback === 'function' && callback(utils.ERRORS.ERROR_PERMISSION);\n                }\n\n            } else {\n                typeof callback === 'function' && callback(err, obj);\n            }\n        });\n    }\n\n    getObject(id, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = null;\n        }\n        if (!callback) {\n            return new Promise((resolve, reject) =>\n                this.getObject(id, options, (err, obj) =>\n                    err ? reject(err) : resolve(obj)));\n        }\n\n        if (typeof callback === 'function') {\n            if (options && options.acl) {\n                options.acl = null;\n            }\n            utils.checkObjectRights(this, null, null, options, utils.CONSTS.ACCESS_READ, (err, options) => {\n                if (err) {\n                    typeof callback === 'function' && setImmediate(() => callback(err));\n                } else {\n                    return this._getObject(id, options, callback);\n                }\n            });\n        }\n    }\n\n    getObjectAsync(id, options) {\n        return new Promise((resolve, reject) =>\n            this.getObject(id, options, (err, obj) =>\n                err ? reject(err) : resolve(obj)));\n    }\n\n    async _getKeys(pattern, options, callback, dontModify) {\n        if (!this.client) {\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\n        }\n        if (!pattern || typeof pattern !== 'string') {\n            return tools.maybeCallbackWithError(callback, `invalid pattern ${JSON.stringify(pattern)}`);\n        }\n\n        const r = new RegExp(tools.pattern2RegEx(pattern));\n        let keys;\n\n        try {\n            keys = await this._getKeysViaScan(this.objNamespace + pattern);\n        } catch (e) {\n            return tools.maybeCallbackWithError(callback, e);\n        }\n\n        if (!this.client) {\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\n        }\n\n        const result = [];\n        if (keys) {\n            keys.sort();\n            const result = [];\n            const dontCheck =\n                    options.user === utils.CONSTS.SYSTEM_ADMIN_USER ||\n                    options.group !== utils.CONSTS.SYSTEM_ADMIN_GROUP ||\n                    (options.groups && options.groups.indexOf(utils.CONSTS.SYSTEM_ADMIN_GROUP) !== -1);\n\n            if (dontCheck) {\n                for (let i = 0; i < keys.length; i++) {\n                    const id = keys[i].substring(this.objNamespaceL);\n                    if (r.test(id)) {\n                        if (!dontModify) {\n                            result.push(id);\n                        } else {\n                            result.push(keys[i]);\n                        }\n                    }\n                }\n                return tools.maybeCallbackWithError(callback, null, result);\n            } else {\n                // Check permissions\n                this.client.mget(keys, (err, metas) => {\n                    metas = metas || [];\n                    for (let i = 0; i < keys.length; i++) {\n                        try {\n                            metas[i] = JSON.parse(metas[i]);\n                        } catch (e) {\n                            this.log.error(`${this.namespace} Cannot parse JSON ${keys[i]}: ${metas[i]}`);\n                            continue;\n                        }\n\n                        if (r.test(keys[i]) && utils.checkObject(metas[i], options, utils.CONSTS.ACCESS_READ)) {\n                            if (!dontModify) {\n                                result.push(keys[i].substring(this.objNamespaceL));\n                            } else {\n                                result.push(keys[i]);\n                            }\n                        }\n                    }\n                    return tools.maybeCallbackWithError(callback, null, result);\n                });\n\n            }\n        } else {\n            return tools.maybeCallbackWithError(callback, null, result);\n        }\n    }\n\n    getKeys(pattern, options, callback, dontModify) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = null;\n        }\n        if (!callback) {\n            return new Promise((resolve, reject) =>\n                this.getKeys(pattern, options, (err, obj) =>\n                    err ? reject(err) : resolve(obj), dontModify));\n        }\n        if (typeof callback === 'function') {\n            utils.checkObjectRights(this, null, null, options, 'list', (err, options) => {\n                if (err) {\n                    typeof callback === 'function' && setImmediate(() => callback(err));\n                } else {\n                    return this._getKeys(pattern, options, callback, dontModify);\n                }\n            });\n        }\n    }\n\n    getKeysAsync(id, options) {\n        return new Promise((resolve, reject) =>\n            this.getKeys(id, options, (err, keys) =>\n                err ? reject(err) : resolve(keys)));\n    }\n\n    getConfigKeys(pattern, options, callback, dontModify) {\n        return this.getKeys(pattern, options, callback, dontModify);\n    }\n\n    _getObjects(keys, options, callback, dontModify) {\n        if (!keys) {\n            typeof callback === 'function' && setImmediate(() => callback('no keys', null));\n            return;\n        }\n        if (!keys.length) {\n            typeof callback === 'function' && setImmediate(() => callback(null, []));\n            return;\n        }\n\n        let _keys;\n        if (!dontModify) {\n            _keys = [];\n            for (let i = 0; i < keys.length; i++) {\n                _keys[i] = this.objNamespace + keys[i];\n            }\n        } else {\n            _keys = keys;\n        }\n\n        if (!this.client) {\n            return typeof callback === 'function' && setImmediate(() => callback(utils.ERRORS.ERROR_DB_CLOSED));\n        }\n\n        this.client.mget(_keys, (err, objs) => {\n            let result = [];\n            if (err) {\n                this.log.warn(this.namespace + ' redis mget ' + (!objs ? 0 :  objs.length) + ' ' + _keys.length + ', err: ' + err);\n            } else {\n                this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' redis mget ' + (!objs ? 0 : objs.length) + ' ' + _keys.length);\n            }\n            if (objs) {\n                const dontCheck =\n                    options.user === utils.CONSTS.SYSTEM_ADMIN_USER ||\n                    options.group !== utils.CONSTS.SYSTEM_ADMIN_GROUP ||\n                    (options.groups && options.groups.indexOf(utils.CONSTS.SYSTEM_ADMIN_GROUP) !== -1);\n\n                if (!dontCheck) {\n                    for (let i = 0; i < objs.length; i++) {\n                        try {\n                            objs[i] = JSON.parse(objs[i]);\n                        } catch (e) {\n                            this.log.error(`${this.namespace} Cannot parse JSON ${_keys[i]}: ${objs[i]}`);\n                            result.push({error: utils.ERRORS.ERROR_PERMISSION});\n                            continue;\n                        }\n                        if (utils.checkObject(objs[i], options, utils.CONSTS.ACCESS_READ)) {\n                            result.push(objs[i]);\n                        } else {\n                            result.push({error: utils.ERRORS.ERROR_PERMISSION});\n                        }\n                    }\n                } else {\n                    result = objs.map((obj, i) => {\n                        try {\n                            return JSON.parse(obj);\n                        } catch (e) {\n                            this.log.error(`${this.namespace} Cannot parse JSON ${_keys[i]}: ${obj}`);\n                            return null;\n                        }\n                    });\n                }\n            }\n            typeof callback === 'function' && callback(null, result);\n        });\n    }\n\n    getObjects(keys, options, callback, dontModify) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = null;\n        }\n        if (!callback) {\n            return new Promise((resolve, reject) =>\n                this.getObjects(keys, options, (err, objs) =>\n                    err ? reject(err) : resolve(objs), dontModify));\n        }\n\n        if (options && options.acl) {\n            options.acl = null;\n        }\n        if (typeof callback === 'function') {\n            utils.checkObjectRights(this, null, null, options, utils.CONSTS.ACCESS_READ, (err, options) => {\n                if (err) {\n                    typeof callback === 'function' && setImmediate(() => callback(err));\n                } else {\n                    return this._getObjects(keys, options, callback, dontModify);\n                }\n            });\n        }\n    }\n\n    getObjectsAsync(id, options) {\n        return new Promise((resolve, reject) =>\n            this.getObjects(id, options, (err, objs) =>\n                err ? reject(err) : resolve(objs)));\n    }\n\n    async _getObjectsByPattern(pattern, options, callback) {\n        if (!pattern || typeof pattern !== 'string') {\n            typeof callback === 'function' && setImmediate(() => callback('invalid pattern ' + JSON.stringify(pattern)));\n            return;\n        }\n\n        if (!this.client) {\n            return typeof callback === 'function' && setImmediate(() => callback(utils.ERRORS.ERROR_DB_CLOSED));\n        }\n\n        let keys;\n        try {\n            keys = await this._getKeysViaScan(this.objNamespace + pattern);\n        } catch (e) {\n            return tools.maybeCallbackWithError(callback, e);\n        }\n        if (!this.client) {\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\n        }\n\n        this.settings.connection.enhancedLogging && this.log.silly(`${this.namespace} redis keys ${keys.length} ${pattern}`);\n        this._getObjects(keys, options, callback, true);\n    }\n\n    getObjectsByPattern(pattern, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = null;\n        }\n        if (!callback) {\n            return new Promise((resolve, reject) =>\n                this.getObjectsByPattern(pattern, options, (err, obj) =>\n                    err ? reject(err) : resolve(obj)));\n        }\n        if (options && options.acl) {\n            options.acl = null;\n        }\n        if (typeof callback === 'function') {\n            utils.checkObjectRights(this, null, null, options, utils.CONSTS.ACCESS_READ, (err, options) => {\n                if (err) {\n                    typeof callback === 'function' && setImmediate(() => callback(err));\n                } else {\n                    return this._getObjectsByPattern(pattern, options, callback);\n                }\n            });\n        }\n    }\n\n    getObjectsByPatternAsync(pattern, options) {\n        return new Promise((resolve, reject) =>\n            this.getObjectsByPattern(pattern, options, (err, objs) =>\n                err ? reject(err) : resolve(objs)));\n    }\n\n    _setObject(id, obj, options, callback) {\n        if (!id || typeof id !== 'string' || utils.regCheckId.test(id)) {\n            return typeof callback === 'function' && setImmediate(() => callback(`Invalid ID: ${id}`));\n        }\n\n        if (!obj) {\n            this.log.warn(this.namespace + ' setObject: Argument object is null');\n            return typeof callback === 'function' && setImmediate(() => callback('obj is null'));\n        }\n        if (typeof obj !== 'object') {\n            this.log.warn(this.namespace + ' setObject: Argument object is no object: ' + obj);\n            return typeof callback === 'function' && setImmediate(() => callback('obj is no object'));\n        }\n        if (!this.client) {\n            return typeof callback === 'function' && setImmediate(() => callback(utils.ERRORS.ERROR_DB_CLOSED));\n        }\n        // make a copy of object, because we will modify it\n        obj = deepClone(obj);\n\n        obj._id = id;\n\n        this.client.get(this.objNamespace + id, (err, oldObj) => {\n            try {\n                oldObj = oldObj ? JSON.parse(oldObj) : null;\n            } catch (e) {\n                this.log.error(`${this.namespace} Cannot parse ${id} - ${oldObj}: ${e.message}`);\n                typeof callback === 'function' && callback(`${this.namespace} Cannot parse ${id} - ${oldObj}: ${e.message}`);\n                return;\n            }\n\n            if (!tools.checkNonEditable(oldObj, obj)) {\n                typeof callback === 'function' && callback('Invalid password for update of vendor information');\n                return;\n            }\n\n            // do not delete common settings, like \"history\" or \"mobile\". It can be erased only with \"null\"\n            if (oldObj && oldObj.common) {\n                this.preserveSettings.forEach(commonSetting => {\n                    // special case if \"custom\"\n                    if (commonSetting === 'custom') {\n                        if (!oldObj.common.custom) {\n                            // do nothing\n                        } else if ((!obj.common || !obj.common.custom) && oldObj.common.custom) {\n                            obj.common = obj.common || {};\n                            obj.common.custom = oldObj.common.custom;\n                        } else if (obj.common && obj.common.custom && oldObj.common.custom) {\n                            // merge together\n                            Object.keys(oldObj.common.custom).forEach(attr => {\n                                if (obj.common.custom[attr] === null) {\n                                    delete obj.common.custom[attr];\n                                } else if (obj.common.custom[attr] === undefined) {\n                                    obj.common.custom[attr] = oldObj.common.custom[attr];\n                                }\n                            });\n                        }\n                        // remove custom if no one attribute inside\n                        if (obj.common && obj.common.custom) {\n                            Object.keys(obj.common.custom).forEach(attr => {\n                                if (obj.common.custom[attr] === null) {\n                                    delete obj.common.custom[attr];\n                                }\n                            });\n                            if (!Object.keys(obj.common.custom).length) {\n                                delete obj.common.custom;\n                            }\n                        }\n                    } else {\n                        // remove settings if desired\n                        if (obj.common && obj.common[commonSetting] === null) {\n                            delete obj.common[commonSetting];\n                        } else\n                        // if old setting present and new setting is absent\n                        if (oldObj.common[commonSetting] !== undefined && (!obj.common || obj.common[commonSetting] === undefined)) {\n                            obj.common = obj.common || {};\n                            obj.common[commonSetting] = oldObj.common[commonSetting];\n                        }\n                    }\n                });\n            }\n\n            if (obj.common && obj.common.alias && obj.common.alias.id) {\n                if (typeof obj.common.alias.id === 'object') {\n                    if (typeof obj.common.alias.id.write !== 'string' || typeof obj.common.alias.id.read !== 'string') {\n                        return typeof callback === 'function' && callback('Invalid alias ID');\n                    }\n\n                    if (obj.common.alias.id.write.startsWith('alias.') || obj.common.alias.id.read.startsWith('alias.')) {\n                        return typeof callback === 'function' && callback('Cannot make alias on alias');\n                    }\n                } else {\n                    if (typeof obj.common.alias.id !== 'string') {\n                        return typeof callback === 'function' && callback('Invalid alias ID');\n                    }\n\n                    if (obj.common.alias.id.startsWith('alias.')) {\n                        return typeof callback === 'function' && callback('Cannot make alias on alias');\n                    }\n                }\n            }\n\n            if (oldObj && oldObj.acl && !obj.acl) {\n                obj.acl = oldObj.acl;\n            }\n\n            // add user default rights\n            if (this.defaultNewAcl && !obj.acl) {\n                obj.acl = deepClone(this.defaultNewAcl);\n                delete obj.acl.file;\n                if (obj.type !== 'state') {\n                    delete obj.acl.state;\n                }\n                // take the owner as current user\n                if (options.user) {\n                    obj.acl.owner = options.user;\n                }\n                // take the group as current user's group\n                if (options.group) {\n                    obj.acl.ownerGroup = options.group;\n                } else  {\n                    obj.acl.ownerGroup = null;\n                    return this.getUserGroup(obj.acl.owner, (user, groups /* , permissions */) => {\n                        if (!groups || !groups[0]) {\n                            options.group = (this.defaultNewAcl && this.defaultNewAcl.ownerGroup) || utils.CONSTS.SYSTEM_ADMIN_GROUP;\n                        } else {\n                            options.group = groups[0];\n                        }\n                        obj.acl.ownerGroup = options.group;\n                        const message = JSON.stringify(obj);\n                        this.client.set(this.objNamespace + id, message, err => {\n                            if (!err) {\n                                //this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' redis publish ' + this.objNamespace + id + ' ' + message);\n                                this.client.publish(this.objNamespace + id, message).catch(_err => {});\n                                // object updated -> if type changed to meta -> cache\n                                if (oldObj && oldObj.type === 'meta' && this.existingMetaObjects[id] === false) {\n                                    this.existingMetaObjects[id] = true;\n                                }\n                            }\n                            typeof callback === 'function' && callback(err, {id});\n                        });\n                    });\n                }\n            }\n\n            if (this.defaultNewAcl && obj.acl && !obj.acl.ownerGroup && options.group) {\n                obj.acl.ownerGroup = options.group;\n            }\n\n            const message = JSON.stringify(obj);\n            this.client.set(this.objNamespace + id, message, err => {\n                if (!err) {\n                    //this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' redis publish ' + this.objNamespace + id + ' ' + message);\n                    this.client.publish(this.objNamespace + id, message).catch(_err => {});\n                }\n                // object updated -> if type changed to meta -> cache\n                if (oldObj && oldObj.type === 'meta' && this.existingMetaObjects[id] === false) {\n                    this.existingMetaObjects[id] = true;\n                }\n                typeof callback === 'function' && callback(err, {id});\n            });\n        });\n    }\n\n    /**\n     * set anew or update object\n     *\n     * This function writes the object into DB\n     *\n     * @alias setObject\n     * @memberof objectsInMemServer\n     * @param {string} id ID of the object\n     * @param {object} obj\n     * @param {object} options options for access control are optional\n     * @param {function} callback return function\n     */\n    setObject(id, obj, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = null;\n        }\n        if (!callback) {\n            return new Promise((resolve, reject) =>\n                this.setObject(id, obj, options, (err, res) =>\n                    err ? reject(err) : resolve(res)));\n        }\n        if (options && options.acl) {\n            options.acl = null;\n        }\n\n        utils.checkObjectRights(this, null, null, options, utils.CONSTS.ACCESS_WRITE, (err, options) => {\n            if (err) {\n                typeof callback === 'function' && setImmediate(() => callback(err));\n            } else {\n                return this._setObject(id, obj, options, callback);\n            }\n        });\n    }\n\n    setObjectAsync(id, obj, options) {\n        return new Promise((resolve, reject) =>\n            this.setObject(id, obj, options, (err, res) =>\n                err ? reject(err) : resolve(res)));\n    }\n\n    _delObject(id, options, callback) {\n        if (!id || typeof id !== 'string' || utils.regCheckId.test(id)) {\n            return typeof callback === 'function' && setImmediate(() => callback(`Invalid ID: ${id}`));\n        }\n        if (!this.client) {\n            return typeof callback === 'function' && setImmediate(() => callback(utils.ERRORS.ERROR_DB_CLOSED));\n        }\n\n        // read object\n        this.client.get(this.objNamespace + id, (err, oldObj) => {\n            if (err) {\n                this.log.warn(this.namespace + ' redis get ' + id + ', error - ' + err);\n            } else {\n                //this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' redis get ' + id + ' ok: ' + oldObj);\n            }\n            if (!oldObj) {\n                return typeof callback === 'function' && callback(utils.ERRORS.ERROR_NOT_FOUND);\n            }\n\n            try {\n                oldObj = oldObj ? JSON.parse(oldObj) : null;\n            } catch (e) {\n                this.log.warn(`${this.namespace} Cannot parse ${id} - ${oldObj}: ${e.message}`);\n            }\n\n            if (!utils.checkObject(oldObj, options, utils.CONSTS.ACCESS_WRITE)) {\n                typeof callback === 'function' && callback(utils.ERRORS.ERROR_PERMISSION);\n            } else {\n                this.client.del(this.objNamespace + id, err => {\n                    if (!err) {\n                        //this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' redis publish ' + this.objNamespace + id + ' null');\n                        this.client.publish(this.objNamespace + id, 'null').catch(_err => {});\n                        // object has been deleted -> remove from cached meta if there\n                        if (this.existingMetaObjects[id]) {\n                            this.existingMetaObjects[id] = false;\n                        }\n                    }\n                    typeof callback === 'function' && callback(err);\n                });\n            }\n        });\n    }\n\n    delObject(id, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = null;\n        }\n        if (!callback) {\n            return new Promise((resolve, reject) =>\n                this.delObject(id, options, (err, obj) =>\n                    err ? reject(err) : resolve(obj)));\n        }\n\n        if (options && options.acl) {\n            options.acl = null;\n        }\n        utils.checkObjectRights(this, null, null, options, utils.CONSTS.ACCESS_DELETE, (err, options) => {\n            if (err) {\n                typeof callback === 'function' && setImmediate(() => callback(err));\n            } else {\n                return this._delObject(id, options, callback);\n            }\n        });\n    }\n\n    delObjectAsync(id, options) {\n        return new Promise((resolve, reject) =>\n            this.delObject(id, options, err =>\n                err ? reject(err) : resolve()));\n    }\n\n    // this function is very ineffective. Because reads all objects and then process them\n    async _applyViewFunc(func, params, options, callback) {\n        if (!this.client) {\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\n        }\n        const result = {\n            rows: []\n        };\n\n        // filters objs which are already present in array by property 'id'\n        const filterDuplicates = arr => {\n            const included = {};\n            const filteredArr = arr.filter(obj => {\n                if (included[obj.id]) {\n                    return false;\n                } else {\n                    included[obj.id] = true;\n                    return true;\n                }\n            });\n\n            return filteredArr;\n        };\n\n        params = params || {};\n        params.startkey = params.startkey || '';\n        params.endkey   = params.endkey   || '\\u9999';\n        const wildcardPos = params.endkey.indexOf('\\u9999');\n        let wildCardLastPos = true;\n        if (wildcardPos !== -1 && wildcardPos !== params.endkey.length - 1) {\n            wildCardLastPos = false; // TODO do in LUA\n        }\n        let m;\n\n        // if start and and end keys are equal modify end key\n        if (params.startkey === params.endkey) {\n            params.endkey = params.endkey + '\\u0000';\n        }\n\n        // filter by type\n        if (wildCardLastPos && func && func.map && this.scripts.filter && (m = func.map.match(/if\\s\\(doc\\.type\\s?===?\\s?'(\\w+)'\\)\\semit\\(([^,]+),\\s?doc\\s?\\)/))) {\n            let cursor = '0';\n            let filterRequired = true;\n            do {\n                if (!this.client) {\n                    return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\n                }\n                await new Promise(resolve => {\n                    this.client.evalsha([this.scripts.filter, 5, this.objNamespace, params.startkey, params.endkey, m[1], cursor], (err, objs) => {\n                        err && this.log.warn(`${this.namespace} Cannot get view: ${err}`);\n                        objs = objs || [];\n                        // if real redis we will have e.g. [[objs..], '0'], else [{}, .., {}]\n                        if (Array.isArray(objs[0])) {\n                            cursor = objs[1] || '0';\n                            objs = objs[0];\n                        } else {\n                            cursor = '0';\n                            filterRequired = false;\n                        }\n\n                        const currRows = objs.map(obj => {\n                            try {\n                                obj = JSON.parse(obj);\n                            } catch (e) {\n                                this.log.error(`${this.namespace} Cannot parse JSON: ${obj}`);\n                                return {id: 'parseError', value: null};\n                            }\n                            if (m[2] && m[2].trim() === 'doc._id') {\n                                return {id: obj._id, value: obj};\n                            } else if (m[2] && m[2].trim() === 'doc.common.name' && obj.common) {\n                                return {id: obj.common.name, value: obj};\n                            } else {\n                                this.log.error(`${this.namespace} Cannot filter \"${m[2]}\": ${JSON.stringify(obj)}`);\n                                return {id: 'parseError', value: null};\n                            }\n                        });\n                        if (currRows.length) {\n                            result.rows = [...result.rows, ...currRows];\n                        } // endIf\n                        resolve();\n                    });\n                });\n            } while (cursor !== '0');\n\n            // Now we have all objects -> calculate max if desired\n            if (func.reduce === '_stats') {\n                let max = null;\n                for (let i = 0; i < result.rows.length; i++) {\n                    if (max === null || result.rows[i].value > max) {\n                        max = result.rows[i].value;\n                    }\n                }\n                if (max !== null) {\n                    result.rows = [{id: '_stats', value: {max: max}}];\n                } else {\n                    result.rows = [];\n                }\n            }\n\n            // apply filter if needed\n            result.rows = filterRequired ? filterDuplicates(result.rows) : result.rows;\n            return tools.maybeCallbackWithError(callback, null, result);\n        } else\n        // filter by script\n        if (wildCardLastPos && func && func.map && this.scripts.script && func.map.indexOf('doc.common.engineType') !== -1) {\n            let cursor = '0';\n            let filterRequired = true;\n            do {\n                if (!this.client) {\n                    return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\n                }\n                await new Promise(resolve => {\n                    this.client.evalsha([this.scripts.script, 4, this.objNamespace, params.startkey, params.endkey, cursor], (err, objs) => {\n                        err && this.log.warn(`${this.namespace} Cannot get view: ${err}`);\n                        // if real redis we will have e.g. [[objs..], '0'], else [{}, .., {}]\n                        if (Array.isArray(objs[0])) {\n                            cursor = objs[1] || '0';\n                            objs = objs[0];\n                        } else {\n                            cursor = '0';\n                            filterRequired = false;\n                        }\n\n                        const currRows = objs.map(obj => {\n                            try {\n                                obj = JSON.parse(obj);\n                            } catch (e) {\n                                this.log.error(`${this.namespace} Cannot parse JSON: ${obj}`);\n                                return {id: 'parseError', value: null};\n                            }\n                            return {id: obj._id, value: obj};\n                        });\n                        if (currRows.length) {\n                            result.rows = [...result.rows, ...currRows];\n                        } // endIf\n                        resolve();\n                    });\n                });\n            } while (cursor !== '0');\n\n            // apply filter if needed\n            result.rows = filterRequired ? filterDuplicates(result.rows) : result.rows;\n            typeof callback === 'function' && callback(null, result);\n        } else\n        // filter by hm-rega programs\n        if (wildCardLastPos && func && func.map && this.scripts.programs && func.map.indexOf('doc.native.TypeName === \\'PROGRAM\\'') !== -1) {\n            let cursor = '0';\n            let filterRequired = true;\n            do {\n                if (!this.client) {\n                    return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\n                }\n                await new Promise(resolve => {\n                    this.client.evalsha([this.scripts.programs, 4, this.objNamespace, params.startkey, params.endkey, cursor], (err, objs) => {\n                        err && this.log.warn(`${this.namespace} Cannot get view: ${err}`);\n                        // if real redis we will have e.g. [[objs..], '0'], else [{}, .., {}]\n                        if (Array.isArray(objs[0])) {\n                            cursor = objs[1] || '0';\n                            objs = objs[0];\n                        } else {\n                            cursor = '0';\n                            filterRequired = false;\n                        }\n\n                        const currRows = objs.map(obj => {\n                            try {\n                                obj = JSON.parse(obj);\n                            } catch (e) {\n                                this.log.error(`${this.namespace} Cannot parse JSON: ${obj}`);\n                                return {id: 'parseError', value: null};\n                            }\n                            return {id: obj._id, value: obj};\n                        });\n                        if (currRows.length) {\n                            result.rows = [...result.rows, ...currRows];\n                        } // endIf\n                        resolve();\n                    });\n                });\n            } while(cursor !== '0');\n\n            // apply filter if needed\n            result.rows = filterRequired ? filterDuplicates(result.rows) : result.rows;\n            typeof callback === 'function' && callback(null, result);\n        } else\n        // filter by hm-rega variables\n        if (wildCardLastPos && func && func.map && this.scripts.variables && func.map.indexOf('doc.native.TypeName === \\'ALARMDP\\'') !== -1) {\n            let cursor = '0';\n            let filterRequired = true;\n            do {\n                if (!this.client) {\n                    return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\n                }\n                await new Promise(resolve => {\n                    this.client.evalsha([this.scripts.variables, 4, this.objNamespace, params.startkey, params.endkey, cursor], (err, objs) => {\n                        err && this.log.warn(`${this.namespace} Cannot get view ${err}`);\n                        // if real redis we will have e.g. [[objs..], '0'], else [{}, .., {}]\n                        if (Array.isArray(objs[0])) {\n                            cursor = objs[1] || '0';\n                            objs = objs[0];\n                        } else {\n                            cursor = '0';\n                            filterRequired = false;\n                        }\n\n                        const currRows = objs.map(obj => {\n                            try {\n                                obj = JSON.parse(obj);\n                            } catch (e) {\n                                this.log.error(`${this.namespace} Cannot parse JSON: ${obj}`);\n                                return {id: 'parseError', value: null};\n                            }\n                            return {id: obj._id, value: obj};\n                        });\n                        if (currRows.length) {\n                            result.rows = [...result.rows, ...currRows];\n                        } // endIf\n                        resolve();\n                    });\n                });\n            } while (cursor !== '0');\n\n            // apply filter if needed\n            result.rows = filterRequired ? filterDuplicates(result.rows) : result.rows;\n            typeof callback === 'function' && callback(null, result);\n        } else\n        // filter by custom, redis also returns if common.custom is not present\n        if (wildCardLastPos && func && func.map && this.scripts.custom && func.map.indexOf('doc.common.custom') !== -1) {\n            let cursor = '0';\n            let filterRequired = true;\n            do {\n                if (!this.client) {\n                    return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\n                }\n                await new Promise(resolve => {\n                    this.client.evalsha([this.scripts.custom, 4, this.objNamespace, params.startkey, params.endkey, cursor], (err, objs) => {\n                        err && this.log.warn(`${this.namespace} Cannot get view: ${err}`);\n                        // if real redis we will have e.g. [[objs..], '0'], else [{}, .., {}]\n                        if (Array.isArray(objs[0])) {\n                            cursor = objs[1] || '0';\n                            objs = objs[0];\n                        } else {\n                            cursor = '0';\n                            filterRequired = false;\n                        }\n\n                        objs.forEach(obj => {\n                            try {\n                                obj = JSON.parse(obj);\n                            } catch (e) {\n                                this.log.error(`${this.namespace} Cannot parse JSON: ${obj}`);\n                            }\n                            if (obj.common && obj.common.custom) {\n                                result.rows.push({id: obj._id, value: obj.common.custom});\n                            }\n                        });\n                        resolve();\n                    });\n                });\n            } while (cursor !== '0');\n\n            // apply filter if needed\n            result.rows = filterRequired ? filterDuplicates(result.rows) : result.rows;\n            return tools.maybeCallbackWithError(callback, null, result);\n        } else {\n            this.log.debug(`${this.namespace} No suitable Lua script, fallback to keys!: ${func.map}`);\n\n            let searchKeys = this.objNamespace + '*';\n            if (wildcardPos !== -1) { // Wildcard included\n                searchKeys = this.objNamespace + params.endkey.replace(/\\u9999/g, '*');\n            }\n\n            let keys;\n            try {\n                keys = await this._getKeysViaScan(searchKeys);\n            } catch (e) {\n                return tools.maybeCallbackWithError(callback, e);\n            }\n\n            if (!this.client) {\n                return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\n            }\n\n            const endAfterWildcard = params.endkey.substr(wildcardPos + 1);\n            params.startkey = this.objNamespace + params.startkey;\n            params.endkey   = this.objNamespace + params.endkey;\n\n            keys = keys.sort().filter(key => {\n                if (key && !utils.regCheckId.test(key)) {\n                    if (params && wildcardPos > 0) {\n                        if (params.startkey && key < params.startkey) {\n                            return false;\n                        }\n                        if (params.endkey   && key > params.endkey)   {\n                            return false;\n                        }\n                    } else\n                    if (params && wildcardPos === 0) {\n                        if (!key.endsWith(endAfterWildcard)) {\n                            return false;\n                        }\n                    }\n                    return true;\n                } else {\n                    return false;\n                }\n            });\n            this.client.mget(keys, (err, objs) => {\n                // eslint-disable-next-line no-unused-vars\n                function _emit_(id, obj) {\n                    result.rows.push({id: id, value: obj});\n                }\n\n                const f = eval('(' + func.map.replace(/^function\\(([a-z0-9A-Z_]+)\\)/g, 'function($1, emit)') + ')');\n\n                objs = objs || [];\n                for (let i = 0; i < keys.length; i++) {\n                    try {\n                        objs[i] = JSON.parse(objs[i]);\n                    } catch (e) {\n                        this.log.error(`${this.namespace} Cannot parse JSON ${keys[i]}: ${objs[i]}`);\n                        continue;\n                    }\n                    if (!utils.checkObject(objs[i], options, utils.CONSTS.ACCESS_READ)) {\n                        continue;\n                    }\n\n                    if (objs[i]) {\n                        try {\n                            f(objs[i], _emit_);\n                        } catch (e) {\n                            this.log.error(`${this.namespace} Cannot execute map: ${e.message}`);\n                        }\n                    }\n                }\n                // Calculate max\n                if (func.reduce === '_stats') {\n                    let max = null;\n                    for (let i = 0; i < result.rows.length; i++) {\n                        if (max === null || result.rows[i].value > max) {\n                            max = result.rows[i].value;\n                        }\n                    }\n                    if (max !== null) {\n                        result.rows = [{id: '_stats', value: {max: max}}];\n                    } else {\n                        result.rows = [];\n                    }\n                }\n                typeof callback === 'function' && callback(null, result);\n            });\n        }\n    }\n\n    _applyView(func, params, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = null;\n        }\n        if (!callback) {\n            return new Promise((resolve, reject) =>\n                this._applyView(func, params, options, (err, obj) =>\n                    err ? reject(err) : resolve(obj)));\n        }\n\n        if (options && options.acl) {\n            options.acl = null;\n        }\n\n        if (typeof callback === 'function') {\n            utils.checkObjectRights(this, null, null, options, 'list', (err, options) => {\n                if (err) {\n                    typeof callback === 'function' && callback(err);\n                } else {\n                    return this._applyViewFunc(func, params, options, callback);\n                }\n            });\n        }\n    }\n\n    _getObjectView(design, search, params, options, callback) {\n        if (!this.client) {\n            return typeof callback === 'function' && setImmediate(() => callback(utils.ERRORS.ERROR_DB_CLOSED));\n        }\n        this.client.get(this.objNamespace + '_design/' + design, (err, obj) => {\n            if (obj) {\n                try {\n                    obj = JSON.parse(obj);\n                } catch (e) {\n                    this.log.error(`${this.namespace} Cannot parse JSON: ${obj}`);\n                    return typeof callback === 'function' && callback(new Error('Cannot parse JSON: \"' + '_design/' + design + '\" / \"' + obj + '\"'));\n                }\n\n                if (obj.views && obj.views[search]) {\n                    return this._applyViewFunc(obj.views[search], params, options, callback);\n                } else {\n                    this.log.error(`${this.namespace} Cannot find search \"${search}\" in \"${design}\"`);\n                    typeof callback === 'function' && callback(new Error('Cannot find search \"' + search + '\" in \"' + design + '\"'));\n                }\n            } else {\n                this.log.error(`${this.namespace} Cannot find view \"${design}\" for search \"${search}\" : ${err}`);\n                typeof callback === 'function' && callback(new Error('Cannot find view \"' + design + '\"'));\n            }\n        });\n    }\n\n    getObjectView(design, search, params, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = null;\n        }\n        if (!callback) {\n            return new Promise((resolve, reject) =>\n                this.getObjectView(design, search, params, options, (err, obj) =>\n                    err ? reject(err) : resolve(obj)));\n        }\n\n        if (options && options.acl) {\n            options.acl = null;\n        }\n\n        if (typeof callback === 'function') {\n            utils.checkObjectRights(this, null, null, options, 'list', (err, options) => {\n                if (err) {\n                    typeof callback === 'function' && setImmediate(() => callback(err));\n                } else {\n                    return this._getObjectView(design, search, params, options, callback);\n                }\n            });\n        }\n    }\n\n    getObjectViewAsync(design, search, params, options) {\n        return new Promise((resolve, reject) =>\n            this.getObjectView(design, search, params, options, (err, arr) =>\n                err ? reject(err) : resolve(arr)));\n    }\n\n    async _getObjectList(params, options, callback) {\n        if (!this.client) {\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\n        }\n        //params = {startkey, endkey, include_docs}\n        params = params || {};\n        params.startkey = params.startkey || '';\n        params.endkey = params.endkey || '\\u9999';\n        const pattern = (params.endkey.substring(0, params.startkey.length) === params.startkey) ? this.objNamespace + params.startkey + '*' : this.objNamespace + '*';\n\n        // todo: use lua script for this\n        let keys;\n        try {\n            keys = await this._getKeysViaScan(pattern);\n        } catch (e) {\n            return tools.maybeCallbackWithError(callback, e);\n        }\n\n        if (!this.client) {\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\n        }\n\n        const _keys = [];\n        for (let i = 0; i < keys.length; i++) {\n            const id = keys[i].substring(this.objNamespaceL);\n            if (params.startkey && id < params.startkey) {\n                continue;\n            }\n            if (params.endkey && id > params.endkey) {\n                continue;\n            }\n            if (!id || utils.regCheckId.test(id) || id.match(/\\|file\\$%\\$/)) {\n                continue;\n            }\n            if (!params.include_docs && id[0] === '_') {\n                continue;\n            }\n            _keys.push(keys[i]);\n        }\n        _keys.sort();\n        this.client.mget(_keys, (err, objs) => {\n            // return rows with id and doc\n            const result = {\n                rows: []\n            };\n            if (objs) {\n                for (let r = 0; r < objs.length; r++) {\n                    try {\n                        objs[r] = JSON.parse(objs[r]);\n                    } catch (e) {\n                        this.log.error(`${this.namespace} Cannot parse JSON ${_keys[r]}: ${objs[r]}`);\n                        continue;\n                    }\n\n                    if (!objs[r] || !utils.checkObject(objs[r], options, utils.CONSTS.ACCESS_READ)) {\n                        continue;\n                    }\n                    result.rows.push({id: objs[r]._id, value: objs[r], doc: objs[r]});\n                }\n            }\n            return tools.maybeCallbackWithError(callback, null, result);\n        });\n    }\n\n    getObjectList(params, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = null;\n        }\n        if (!callback) {\n            return new Promise((resolve, reject) =>\n                this.getObjectList(params, options, (err, obj) =>\n                    err ? reject(err) : resolve(obj)));\n        }\n\n        if (options && options.acl) {\n            options.acl = null;\n        }\n\n        if (typeof callback === 'function') {\n            utils.checkObjectRights(this, null, null, options, 'list', (err, options) => {\n                if (err) {\n                    typeof callback === 'function' && setImmediate(() => callback(err));\n                } else {\n                    return this._getObjectList(params, options, callback);\n                }\n            });\n        }\n    }\n\n    getObjectListAsync(params, options) {\n        return new Promise((resolve, reject) =>\n            this.getObjectList(params, options, (err, arr) =>\n                err ? reject(err) : resolve(arr)));\n    }\n\n    // could be optimised, to read object only once. Now it will read 3 times\n    _extendObject(id, obj, options, callback, _iteration) {\n        if (!id || typeof id !== 'string' || utils.regCheckId.test(id)) {\n            return typeof callback === 'function' && setImmediate(() => callback(`Invalid ID: ${id}`));\n        }\n        if (!this.client) {\n            return typeof callback === 'function' && setImmediate (() => callback(utils.ERRORS.ERROR_DB_CLOSED));\n        }\n        this.client.get(this.objNamespace + id, (err, oldObj) => {\n            try {\n                oldObj = oldObj ? JSON.parse(oldObj) : null;\n            } catch (e) {\n                this.log.error(`${this.namespace} Cannot parse JSON ${id}: ${oldObj}`);\n                oldObj = null;\n                return typeof callback === 'function' && callback(utils.ERRORS.ERROR_PERMISSION);\n            }\n            if (!utils.checkObject(oldObj, options, utils.CONSTS.ACCESS_WRITE)) {\n                return typeof callback === 'function' && callback(utils.ERRORS.ERROR_PERMISSION);\n            }\n\n            let _oldObj;\n            if (oldObj && oldObj.nonEdit) {\n                // copy object\n                _oldObj = deepClone(oldObj);\n            }\n\n            oldObj = oldObj || {};\n            oldObj = extend(true, oldObj, deepClone(obj)); // copy here to prevent \"sandboxed\" objects from JavaScript adapter\n            oldObj._id = id;\n\n            // add user default rights\n            if (this.defaultNewAcl && !oldObj.acl) {\n                oldObj.acl = deepClone(this.defaultNewAcl);\n                delete oldObj.acl.file;\n                if (oldObj.type !== 'state') {\n                    delete oldObj.acl.state;\n                }\n\n                if (options.owner) {\n                    oldObj.acl.owner = options.owner;\n\n                    if (!options.ownerGroup) {\n                        oldObj.acl.ownerGroup = null;\n                        return this.getUserGroup(options.owner, (user, groups /*, permissions */) => {\n                            if (!groups || !groups[0]) {\n                                options.ownerGroup = (this.defaultNewAcl && this.defaultNewAcl.ownerGroup) || utils.CONSTS.SYSTEM_ADMIN_GROUP;\n                            } else {\n                                options.ownerGroup = groups[0];\n                            }\n                            this._extendObject(id, obj, options, callback);\n                        });\n                    }\n                }\n            }\n\n            if (this.defaultNewAcl && options.ownerGroup && oldObj.acl && !oldObj.acl.ownerGroup) {\n                oldObj.acl.ownerGroup = options.ownerGroup;\n            }\n\n            if (obj.common && obj.common.alias && obj.common.alias.id) {\n                if (typeof obj.common.alias.id === 'object') {\n                    if (typeof obj.common.alias.id.write !== 'string' || typeof obj.common.alias.id.read !== 'string') {\n                        return typeof callback === 'function' && callback('Invalid alias ID');\n                    }\n\n                    if (obj.common.alias.id.write.startsWith('alias.') || obj.common.alias.id.read.startsWith('alias.')) {\n                        return typeof callback === 'function' && callback('Cannot make alias on alias');\n                    }\n                } else {\n                    if (typeof obj.common.alias.id !== 'string') {\n                        return typeof callback === 'function' && callback('Invalid alias ID');\n                    }\n\n                    if (obj.common.alias.id.startsWith('alias.')) {\n                        return typeof callback === 'function' && callback('Cannot make alias on alias');\n                    }\n                }\n            }\n\n            if (_oldObj && !tools.checkNonEditable(_oldObj, oldObj)) {\n                return typeof callback === 'function' && callback('Invalid password for update of vendor information');\n            }\n            const message = JSON.stringify(oldObj);\n            this.client.set(this.objNamespace + id, message, err => {\n                if (!err) {\n                    //this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' redis publish ' + this.objNamespace + id + ' ' + message);\n                    this.client.publish(this.objNamespace + id, message)\n                        .catch(_err => {});\n                    // extended -> if its now type meta and currently marked as not -> cache\n                    if (this.existingMetaObjects[id] === false && oldObj && oldObj.type === 'meta') {\n                        this.existingMetaObjects[id] = true;\n                    }\n                }\n                typeof callback === 'function' && callback(err, {id: id, value: oldObj}, id);\n            });\n        });\n    }\n\n    extendObject(id, obj, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = null;\n        }\n        if (!callback) {\n            return new Promise((resolve, reject) =>\n                this.extendObject(id, obj, options, (err, res) =>\n                    err ? reject(err) : resolve(res)));\n        }\n\n        if (options && options.acl) {\n            options.acl = null;\n        }\n\n        utils.checkObjectRights(this, null, null, options, utils.CONSTS.ACCESS_WRITE, (err, options) => {\n            if (err) {\n                typeof callback === 'function' && setImmediate(() => callback(err));\n            } else {\n                return this._extendObject(id, obj, options, callback);\n            }\n        });\n    }\n\n    extendObjectAsync(id, obj, options) {\n        return new Promise((resolve, reject) =>\n            this.extendObject(id, obj, options, (err, res) =>\n                err ? reject(err) : resolve(res)));\n    }\n\n    setConfig(id, obj, options, callback) {\n        return this.setObject(id, obj, options, callback);\n    }\n\n    delConfig(id, options, callback) {\n        return this.delObject(id, options, callback);\n    }\n\n    getConfig(id, options, callback) {\n        return this.getObject(id, options, callback);\n    }\n\n    getConfigs(keys, options, callback, dontModify) {\n        return this.getObjects(keys, options, callback, dontModify);\n    }\n\n    _findObject(idOrName, type, options, callback) {\n        this._getObject(idOrName, options, (err, obj) => {\n            // Assume it is ID\n            if (obj && utils.checkObject(obj, options, utils.CONSTS.ACCESS_READ) && (!type || (obj.common && obj.common.type === type))) {\n                typeof callback === 'function' && callback(null, idOrName, obj.common.name);\n            } else {\n                this._getKeys('*', options, (err, keys) =>\n                    this.client.mget(keys, (err, objs) => {\n                        objs = objs || [];\n                        // Assume it is name\n                        for (let i = 0; i < keys.length; i++) {\n                            try {\n                                objs[i] = JSON.parse(objs[i]);\n                            } catch (e) {\n                                this.log.error(`${this.namespace} Cannot parse JSON ${keys[i]}: ${objs[i]}`);\n                                continue;\n                            }\n                            if (objs[i].common &&\n                                objs[i].common.name === idOrName &&\n                                (!type || (objs[i].common && objs[i].common.type === type))) {\n                                return typeof callback === 'function' && callback(null, objs[i]._id, idOrName);\n                            }\n                        }\n                        typeof callback === 'function' && callback(null, null, idOrName);\n                    }), true);\n            }\n        });\n    }\n\n    findObject(idOrName, type, options, callback) {\n        if (typeof type === 'function') {\n            callback = type;\n            options = null;\n            type = null;\n        }\n        if (typeof options === 'function') {\n            callback = options;\n            options = null;\n        }\n        if (!callback) {\n            return new Promise((resolve, reject) =>\n                this.findObject(idOrName, type, options, (err, id, _idOrName) =>\n                    err ? reject(err) : resolve(id)));\n        }\n\n        if (options && options.acl) {\n            options.acl = null;\n        }\n\n        if (typeof callback === 'function') {\n            utils.checkObjectRights(this, null, null, options, utils.CONSTS.ACCESS_LIST, (err, options) => {\n                if (err) {\n                    typeof callback === 'function' && setImmediate(() => callback(err));\n                } else {\n                    return this._findObject(idOrName, type, options, callback);\n                }\n            });\n        }\n    }\n\n    findObjectAsync(idOrName, type, options) {\n        return new Promise((resolve, reject) =>\n            this.findObject(idOrName, type, options, (err, id, _idOrName) =>\n                err ? reject(err) : resolve(id)));\n    }\n\n    // can be called only from js-controller\n    addPreserveSettings(settings) {\n        if (!Array.isArray(settings)) {\n            settings = [settings];\n        }\n\n        for (let s = 0; s < settings.length; s++) {\n            if (this.preserveSettings.indexOf(settings[s]) === -1) {\n                this.preserveSettings.push(settings[s]);\n            }\n        }\n    }\n\n    _destroyDBHelper(keys, callback) {\n        if (!keys || !keys.length) {\n            typeof callback === 'function' && callback();\n        } else {\n            if (!this.client) {\n                return typeof callback === 'function' && callback(utils.ERRORS.ERROR_DB_CLOSED);\n            }\n            const id = keys.shift();\n            this.client.del(id, _err =>\n                setImmediate(() => this._destroyDBHelper(keys, callback)));\n        }\n    }\n\n    async _destroyDB(options, callback) {\n        if (!this.client) {\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\n        } else {\n            try {\n                const keys = await this._getKeysViaScan(`${this.redisNamespace}*`);\n                this._destroyDBHelper(keys, callback);\n            } catch (e) {\n                return tools.maybeCallbackWithError(callback, e);\n            }\n        }\n    }\n\n    destroyDB(options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = null;\n        }\n        options = options || {};\n\n        utils.checkObjectRights(this, null, null, options, utils.CONSTS.ACCESS_WRITE, (err, options) => {\n            if (err) {\n                typeof callback === 'function' && setImmediate(() => callback(err));\n            } else {\n                if (!options.acl.file.write || options.user !== utils.CONSTS.SYSTEM_ADMIN_USER) {\n                    typeof callback === 'function' && setImmediate(() => callback(utils.ERRORS.ERROR_PERMISSION));\n                } else {\n                    return this._destroyDB(options, callback);\n                }\n            }\n        });\n    }\n\n    destroyDBAsync(options) {\n        return new Promise((resolve, reject) =>\n            this.destroyDB(options, err =>\n                err ? reject(err) : resolve()));\n    }\n\n    // Destructor of the class. Called by shutting down.\n    destroy() {\n        this.stop = true;\n        if (this.client) {\n            try {\n                this.client.quit(() =>\n                    this.client = null);\n            } catch (e) {\n                // ignore error\n            }\n\n        }\n        if (this.sub) {\n            try {\n                this.sub.quit(() =>\n                    this.sub = null);\n            } catch (e) {\n                // ignore error\n            }\n        }\n        if (this.subSystem) {\n            try {\n                this.subSystem.quit(() =>\n                    this.subSystem = null);\n            } catch (e) {\n                // ignore error\n            }\n        }\n    }\n\n    loadLuaScripts(callback, _scripts) {\n        if (!_scripts) {\n            if (scriptFiles && scriptFiles.filter) {\n                _scripts = [];\n                for (const name in scriptFiles) {\n                    if (!Object.prototype.hasOwnProperty.call(scriptFiles, name)) {\n                        continue;\n                    }\n                    const shasum = crypto.createHash('sha1');\n                    const buf = Buffer.from(scriptFiles[name]);\n                    shasum.update(buf);\n                    _scripts.push({\n                        name,\n                        text: buf,\n                        hash: shasum.digest('hex')\n                    });\n                }\n            } else {\n                _scripts = fs.readdirSync(__dirname + '/lua/').map(name => {\n                    const shasum = crypto.createHash('sha1');\n                    const script = fs.readFileSync(__dirname + '/lua/' + name);\n                    shasum.update(script);\n                    const hash = shasum.digest('hex');\n                    return {name: name.replace(/\\.lua$/, ''), text: script, hash};\n                });\n            }\n            const hashes = _scripts.map(e => e.hash);\n            hashes.unshift('EXISTS');\n\n            if (!this.client) {\n                return;\n            }\n\n            return this.client.script(hashes, (err, arr) => {\n                arr && _scripts.forEach((e, i) => _scripts[i].loaded = !!arr[i]);\n                this.loadLuaScripts(callback, _scripts);\n            });\n        }\n\n        if (!this.client) {\n            return;\n        }\n\n        for (let i = 0; i < _scripts.length; i++) {\n            if (!_scripts[i].loaded) {\n                const script = _scripts[i];\n                return this.client.script(['LOAD', script.text], (err, hash) => {\n                    script.hash = hash;\n                    script.loaded = !err;\n                    err && this.log.error(this.namespace + ' Cannot load \"' + script.name + '\": ' + err);\n                    setImmediate(() => this.loadLuaScripts(callback, _scripts));\n                });\n            }\n        }\n        this.scripts = {};\n        _scripts.forEach(e => this.scripts[e.name] = e.hash);\n        typeof callback === 'function' && callback();\n    }\n\n    /**\n     * Get all keys matching a pattern using redis SCAN command, duplicates are filtered out\n     *\n     * @param {string} pattern - pattern to match, e. g. io.hm-rpc.0*\n     * @param {number} count - count argument used by redis SCAN, default is 500\n     * @return {Promise<string[]>}\n     * @private\n     */\n    _getKeysViaScan(pattern, count= 500) {\n        return new Promise(resolve => {\n            const stream = this.client.scanStream({match: pattern, count: count});\n            let uniqueKeys = [];\n\n            stream.on('data', resultKeys => {\n                // append result keys to uniqueKeys without duplicates\n                uniqueKeys = [...uniqueKeys, ...resultKeys];\n            });\n\n            stream.on('end', () => {\n                // return without duplicates\n                resolve(Array.from(new Set(uniqueKeys)));\n            });\n        });\n    }\n}\n\nmodule.exports = ObjectsInRedis;"],"file":"../../dist/index.js"}