{"version":3,"sources":["index.js"],"names":["_0xafa602","require","_0x50ce3c","_0x27182c","_0x36eb87","_0x29c816","isDeepStrictEqual","_0x5bfcab","_0x5d08a2","_0x4d2e75","__dirname","_0x49af1e","_0x13cda0","_0x1850db","_0x35297e","_0x97475a","_0x2c8e87","_0x1c399f","_0x1294cb","Object","_0x209004","Array","undefined","JSON","console","_0x516faa","_0x49e282","_0x20dcdc","_0xdd2a67","_0xfc83a6","_0x1a6f1c","_0x38c19c","setImmediate","_0x3406d4","Promise","_0x36b8c4","_0x17e020","_0x26919c","Error","_0x5036ef","_0x1cc1ba","_0x19927e","_0x537305","_0x27d9c2","_0xdd869a","_0x3b1608","_0x409e91","_0x3f1f7b","constructor","_0x5d33fd","_0x2a2e7c","RegExp","_0x6b1ba1","_0x22618f","_0x3c0886","_0x452155","_0x59365d","_0x4e311b","_0x58ea6c","_0x3190e3","_0x590a7b","_0x23acdc","_0x360f89","_0x4341bc","_0x2422b8","_0x52d05b","_0x3f2190","_0x3be245","_0xf117e2","_0x55be3c","_0x53ba56","_0x48e843","_0x1b97d2","_0xffcaf4","_0x2a8572","_0x17e25f","_0x4194da","_0x20fde1","_0x4c5c41","_0x2a7488","_0xe3d241","_0x4f3b50","_0x531878","_0x3d5301","_0x1ae5f6","_0x3c24a8","_0x2f8ae3","_0x22a941","_0x3d48ca","_0xadb6d9","_0x7cbc47","_0x33dbbd","_0x44c905","_0xdf2fde","_0x4744e4","_0x37f2cd","Buffer","_0x48935d","_0x52618c","_0x3fb1e0","_0x3e26fd","_0x355ad3","_0x496bf2","_0x16238a","_0x5c6f3e","_0x5c9e5c","_0x566dcf","_0x7bf3bd","_0x45148f","_0x50fe9b","_0x5a4173","_0x5a75a9","_0xd1fe5b","_0x4460d9","_0x4b739f","_0x17e991","_0x89a51d","_0x8cfb33","_0x120e2e","_0xbba910","_0x44378e","_0x543b1a","_0x3e16bf","_0x241e2a","_0x3f712e","_0x32a533","_0x47de0b","_0x3d5038","_0x234115","_0x51b04d","_0x37b6da","_0x357378","_0x54b800","_0x3571d5","_0x3ac30c","_0x4b73ad","_0x5566a3","_0x5393e0","_0x23fa65","_0x5b5151","_0x76a2d3","_0x48c8b7","_0x223cda","_0x381f59","_0x2827d4","_0x2f027d","_0x538ef0","_0x59600f","_0x19c48f","_0x3c59c8","_0x4caef9","_0x2d36dc","_0x2d8817","_0x159ad5","_0x1dfe5c","Date","_0x3f3f83","_0x34fa1f","_0x3b41d2","_0x3bbeba","_0x33fdb8","_0x3ac589","_0xb5a58b","_0x41b7c1","_0x599b0d","_0x3a3347","_0x4dd421","_0x4dc4fc","_0x3f0d2a","_0x167074","_0x442aeb","_0x1f5d30","_0x1d7b04","_0x25f18f","_0x352c70","_0x29b5fb","_0x3accaa","_0x57a4e8","_0x5046d4","_0x4e0687","_0x338a2d","_0x4741e7","_0x28e09f","_0x570af3","_0x32871c","_0x398080","_0x535d37","_0x5baaef","_0x4509f3","_0x278cd0","_0x3e427c","_0x23f116","_0x21cae4","_0x19c81c","_0x58fa72","_0x44ec9d","_0x3581bc","_0x576557","_0x156dc7","_0x12fcee","_0x1746d2","_0x456325","_0x5d78e2","_0xb37ec1","_0x4d8c74","_0x437e49","_0x61600a","_0x32da8c","_0x56ebd0","_0x2644bb","_0x2721d2","_0x322f36","_0x53f787","_0x365c1a","_0x3c3b0f","_0x555432","_0x2e33f1","_0x471d5d","_0x207389","_0x1699fd","_0x353df4","_0x1366d3","_0x347191","_0x40423e","_0x2850b5","_0x2d0f8f","_0x2d28d7","_0x343ce8","_0x25fea8","_0x13999c","_0x508347","_0x43331a","_0x5a6afb","_0x358b2b","_0x5778c7","_0x3d48c6","_0x215186","_0x344121","_0x191d4a","_0x15cd86","_0x4e8e2d","_0x27c21d","_0x2642ef","_0x5db23b","_0x4fe495","_0x26d20b","_0x4678b1","_0x2de5bb","_0x5a7f78","_0x1c4498","_0xd9238f","_0x149ff5","_0x4322c7","_0x139316","_0x1ec6e6","_0x2939ac","_0xad028b","_0x111f69","_0x369785","_0x3d7bc5","_0x353229","_0x4804ea","_0x47a117","_0x4234cf","_0x2440ee","_0x13b27a","_0x5a263d","_0x5b2c0a","_0x318c0b","_0xe60470","_0x115cd3","_0x3b6391","_0x49b0f4","_0x4cb8df","_0x508e1a","_0x64b27b","_0xec3da8","_0x4ebf70","_0x1a3aa9","_0x5c97e4","_0x1c79a2","_0x5d02a0","_0x3a9603","_0x19c9f8","_0x25c190","_0x3e5d76","_0x2d0d2b","_0x124efa","_0x41963b","_0x1bffd6","_0x4d9a19","_0x1b64be","_0x2299c8","_0x5e2ef0","_0xcda39e","_0x2011e6","_0x35b05c","_0x5dbafd","_0x43dc44","_0x102263","_0x12d68b","_0x3dc189","_0x288571","_0x3f7d9a","_0x2b812d","_0x4296c2","_0x342ad2","_0x2521dc","_0xf4b6ca","_0x50b934","_0x1ac6a0","_0x3c280a","_0x496f94","_0x5c8c42","_0x27e214","_0x5f2d5a","_0x578e43","_0x20f4f5","_0x163516","_0x2c3747","_0x323cab","_0xa19aed","_0x175c14","_0x49392a","_0x2704e7","_0x1ab537","_0x515124","_0x51d0a5","_0x4ee9a5","_0x47dec3","_0x18fc4c","_0x6d1db","_0x500861","_0x307c4e","_0x5936d1","_0x2ccd06","_0x511349","_0x5e368b","_0xee5044","_0x2499c2","_0x589c7f","_0x5f5d9a","_0x5b0935","_0x453cc1","_0x3d9ff0","_0x4abdb6","_0x20e255","_0x4bc379","_0x5430c9","_0x168c30","_0x2e34fa","_0x191f9f","_0x4a0ca6","_0x542bee","_0x4016b2","_0xdf0f5e","_0x1b2532","_0x1ec0a7","_0x16f66a","_0x32b68d","_0x3714a4","_0x399603","_0x1cab7f","_0x321329","_0x3c7e78","_0x3749b8","_0x58765b","_0x52a793","_0x117bba","_0x10ecdd","_0x78cdee","_0x7a0daf","_0x55198c","_0x21cbb1","_0x4cd3d7","_0x3b5d47","_0x28366d","_0x2feecd","_0x1d0c8d","_0x48b56c","_0x17f499","_0x47d442","_0x21518a","_0x259f8a","_0x486fc0","_0x2b062b","_0x370789","_0xbcc17d","_0x43c864","_0x26107e","_0x521e05","_0x4a6a8","_0x1ff368","_0x23e1d3","_0x3f7864","_0x670b7e","_0x1b8cba","_0x59a0ad","_0x2c298f","_0x65aff8","_0x76b965","_0xa969a2","_0x8a08c7","_0x54b3f0","_0x9cd6c7","_0x56e0bf","_0x377fc2","_0x3ad3a2","_0x54c940","_0x37e6ef","_0x20608d","_0x452c2b","_0x1029ec","_0x58c6f0","_0xdaa234","_0x4f4dbb","_0x5c8caf","_0x5f39c9","_0x4667a2","_0x2348ca","_0x16ad77","_0x36cab7","_0x2787eb","_0x441466","_0x15ec26","_0x46fb9d","_0x3da832","_0x40954b","_0x28f5f2","_0x2833ac","_0xa51818","_0x26ad48","_0x24a521","_0x56cef4","_0x493062","_0x46df84","_0x3dab39","_0x1bd934","_0x29027d","_0x46841e","_0x5b5794","_0x117ed3","_0x19816d","_0x5e4418","_0x2d89c8","_0x44275d","_0xa64b26","_0x1d9398","_0x56da8d","_0x5ec41a","_0x29ecaf","_0x44a1fd","_0x313437","_0x4e0e60","_0x130b43","_0x2dfbb5","_0x15e85d","_0x8eddb5","_0x49cd44","_0x49579e","_0xddd3f9","_0x1b674a","_0x4f1f8d","_0xaf30f0","_0x50bab9","_0x635ff2","_0x5d29e1","_0x3bb990","_0x230f9f","_0x4e2c9e","_0x419c92","_0x607294","_0x2b3f06","_0x40f01a","_0x164f2a","_0x415758","_0x16a4c6","_0x67c05e","_0x193ca0","_0x300298","_0x14c4b9","_0x39cf47","_0x150ae0","_0x575646","_0x3b564c","_0x3c487e","_0x76e644","_0x61c50d","_0x26ce7f","_0x4b95a1","_0x1895a0","_0xd9e155","_0x5810b0","_0x4fbdbf","_0x36e33c","parseInt","_0x27982e","_0x533e0f","_0x3543ec","_0x2dbb1c","_0x133528","_0x5f8af4","_0x59ed0e","_0x1f1875","_0x21ce4f","_0x47074f","_0x5edf2a","_0x4f2de3","_0x185fab","_0x5b1a3c","_0x19b89a","_0x445edb","_0x505ce5","_0x585887","_0x1a37f7","_0x13bd0f","_0x2d2cb0","_0x316ca6","_0x18335b","_0x3bed89","_0x57bd34","_0x52cbab","_0x1c62ea","_0x4bea55","_0x4737b5","_0x2c3641","_0x35fd76","_0x432b02","_0x10c68e","_0x279741","_0x8791","_0x4e33d1","_0xcc807","_0x1e623d","_0x524010","_0x1fa75a","_0x36ba0f","_0x49ee58","_0x4128e1","_0x542d47","_0x5f57f3","_0x50ea67","_0x4ec25b","_0x4c1bb9","_0x587fa3","_0x35d5bb","_0x30011d","_0x25c15e","_0x57ac40","_0x3a6089","_0x2cac84","_0x2aacaf","_0x23357b","_0x193bec","_0x300fe9","_0x56b869","_0x14c967","_0xcd1e6d","_0x136209","_0x55eb5f","_0x26d724","_0x1ee82f","_0x4876c2","_0x189592","_0x5edfb1","_0x584be6","_0x4198b5","_0x1f9e3e","_0x191db1","_0xe95a96","_0x36f9e2","_0xb2507f","_0x3d9f8b","_0x2cdcfb","_0x4cfe9e","_0x4aeedf","_0x3ee826","_0x38cf86","_0x4280a4","_0x4cac97","_0x355db0","_0x287c4f","_0x12015f","_0x4d1cf7","_0x37fdd3","_0x3bb967","_0x2d7454","_0x67a6ae","_0x17f596","_0x3d4b55","_0x264d51","_0x28de2a","_0x557afc","_0x386390","_0x3a9565","_0x379e8c","_0xc1048c","_0x251b1a","_0x86b47b","_0x4d5acf","_0x208e7f","_0x2a0ca0","_0x5f593f","_0x4ea42a","_0x5e3425","_0x440450","_0x16e422","_0x171410","_0x11d223","_0x1f91b6","_0x4686dd","_0x17c99e","_0x58fc73","_0x38437e","_0x8ed453","_0x589f42","_0x3da2b5","_0x2420ef","_0x1b2582","_0x1d57c0","_0xa99682","_0x1b3ed6","_0x1cd120","_0x2f2fc4","_0xbbee0b","_0x442549","_0x5dc2aa","_0x45d962","_0xec1adc","_0x3e431c","_0x2f0533","_0x1cf707","_0x14f86d","_0x4a8b1e","_0x2c984a","_0x4aac60","_0x1b6036","_0x248b31","_0x54e70c","_0x454b00","_0x5b871b","_0x4b688a","_0xff3efa","_0x5ac564","_0x10a1af","_0x332ccc","_0x5b2277","_0x183855","_0x4d88b9","_0x4112d3","_0x3b77ab","_0xd9e20c","_0x139040","_0xf794c0","_0x5472cd","_0x5a9a02","_0x9676d1","_0x17aea8","_0x11f387","_0x188977","_0x28e2c2","_0x36604d","_0xd8f52e","_0x1d3f7b","_0x16a892","_0x407254","_0x26fa32","_0x411c0d","_0x49cfe1","_0xd1f157","_0x51ff9f","_0x5d4c37","_0x32c085","_0x8791a4","_0x51d393","_0x15e1be","_0x339b65","_0x5b7e66","_0x36d853","_0x151734","_0x37bd1d","_0x54258e","_0x2f4ac6","_0x5bfc76","_0x423624","_0x1322e3","_0x2a00da","_0x42b0b2","_0x4ad96d","_0x537779","_0x4a5c54","_0x423bbc","_0xc5c568","_0x4e97ef","_0x207a0a","_0x3f076c","_0x48e84a","_0x1db10d","_0x5554ba","_0xaab142","_0x2d9d98","_0x1027f0","_0x2d3143","_0x1bdf12","_0x474124","_0x1e26f7","_0x2b48b4","_0x55558c","_0x2b5a79","_0x102b5b","_0x7dab87","_0x4d7030","_0x3073c8","_0x1675c4","_0x4cd3de","_0x5c3db7","_0x2827b0","_0x18c34c","_0x3714a5","_0x5b2b5f","_0x90a311","_0x22878c","_0x2eecc8","_0x17e1ed","_0x183dc6","_0x4347e3","_0xc86d24","_0xcfa23c","_0xcebad7","_0x4702ce","_0x271aed","_0x9d6179","_0x57e76","_0x37d64e","_0x31e682","_0x3d4ce4","_0xe26f5","_0x56f0d7","_0x22165d","_0x2eb835","_0x4bbfe1","_0x1f82f3","_0x44d72d","_0x2352ee","_0x4759de","_0x54d31d","_0x1b4cdf","_0xbbe5ef","_0x166776","_0x1a7aff","_0x424a7a","_0x3a2323","_0x274ddd","_0xd37b03","_0x397c3b","_0x21bef1","_0x39d5ab","_0xf5de12","_0x134c28","_0x406161","_0x49cce4","_0x2c7bb0","_0x44369a","_0x4d81fd","_0x2da9b3","_0x3c650f","_0x22b19c","_0x3f90f2","_0x185f0a","_0x1e0f9b","_0x4943e2","_0x1ddf19","_0x4d3bf4","_0x42c44b","_0x8415fa","_0x346830","_0x4f2616","_0x4c52ce","_0x508156","_0x1055da","_0x2a1e77","_0x25d27e","_0xb39838","_0x5666c3","_0x82081b","_0x32eb4a","_0x280bab","_0x10354f","_0x47c7f7","_0x3b25a1","_0x92ede8","_0x42dc15","_0x3a31b9","_0x5957a8","_0x582e0d","_0x8fee31","_0x194f16","_0x5eb518","_0x988077","_0x56307d","_0x45b331","_0x4aaf56","_0x125224","_0x5518f0","_0x3a6743","_0x5e9b68","_0x393940","_0x53dc73","_0xbb1a82","_0x477cc3","_0x5ce8e4","_0x114ddc","_0x3c8de3","_0x311c27","_0x34d932","_0x381337","_0x33da23","_0x5969ec","_0xb6d3a4","_0x3d756a","_0x16a327","_0x40365c","_0x36567f","_0x27dfc1","_0xdabcac","_0x485161","_0x1307bb","_0x52fd93","_0x2fb3a9","_0x2786ff","_0x17beac","_0x5a0ccb","_0x243a9f","_0x28bd06","_0x42e0f8","_0x4b063a","_0x1c7bb9","_0xa45968","_0x24d289","_0x5888ac","_0x1b06fb","_0x2ccfeb","_0x13c601","_0x212583","_0x277375","_0x5190ad","_0x33e1f6","_0xd2844c","_0x596662","_0x329b34","_0x1a3b0a","_0x890148","eval","_0x53f0a4","_0x5c80c1","_0x592dbf","_0x15b69d","_0x568f5d","_0x57fb05","_0x1f13ea","_0xf335ad","_0x2768d6","_0x2199a4","_0x280c5d","_0x14fd89","_0x15dbf7","_0x6014cb","_0x3d27d2","_0x2df16c","_0x202716","_0x36a09a","_0x2a3260","_0x45e6ae","_0x4359bb","_0x20bb11","_0x3bc445","_0x36e43e","_0x4f3c03","_0xa7efed","_0x231f46","_0x2ed342","_0x253437","_0x3d20ab","_0x5e1cf5","_0x12b297","_0x1c9db7","_0x470475","_0x2b6253","_0x500858","_0x1040c1","_0x310ddf","_0x160f5c","_0xf16f9","_0x52e6d8","_0x328420","_0x4aad9e","_0x45d01","_0x38be32","_0x1ec75b","_0x3ff23f","_0x19d85f","_0x3fb098","_0x4b758f","_0x5560e8","_0x14bc43","_0x524424","_0x53b6e1","_0x27fecc","_0x2ac6d7","_0x4c3b17","_0x43b2be","_0x10dda0","_0x432caa","_0x29f43f","_0x3c3126","_0x423392","_0x8e800a","_0x236b45","_0x25c95d","_0x5c2145","_0x25ecb6","_0x128fa0","_0x58a9fd","_0x4915b1","_0x578310","_0x4a807e","_0x3df367","_0x43b785","_0x16d817","_0x9897f2","_0x2a15bf","_0x5ab072","_0x3c47f2","_0x4bdd41","_0x732a46","_0xa7cc35","_0x135c6f","_0x57b4ae","_0x24d7b6","_0x534c7c","_0x2894fd","_0x95a69b","_0x2d6511","_0x18c3d0","_0x39bd19","_0x3f2942","_0x5b96ed","_0x568c76","_0x35bca1","_0x33d2a2","_0x4a5ef6","_0x2442e6","_0x4ce7bc","_0x282a35","_0x3650c5","_0x256598","_0x16d9bd","_0x2aab4f","_0x395f46","_0x40a2bc","_0x2ef8fb","_0x161f12","_0xd3d1b8","_0x1f2969","_0x56fd24","_0x5385ae","_0x19a9d4","_0x17a264","_0x39c2ad","_0x3bcd0f","_0x42b0f1","_0x44592b","_0x3b153c","_0x51b20b","_0x8bf049","_0x5a454f","_0x45c45a","_0x35550a","_0x35c270","_0x134687","_0x57a54f","_0x61cd0a","_0x49816b","_0x2f45eb","_0x36bce2","_0x18a9d4","_0x57d635","_0x65e76d","_0x31bbfd","_0x26b1db","_0x1c9565","_0x113591","_0x49a67c","_0x2c05b0","_0x87917e","_0x1c1cf9","_0x421de7","_0x37bdfc","_0x54d946","_0x1c29f9","_0x9cfa94","_0x4a37da","_0x468bc2","_0x379d00","_0x128886","_0x5876ef","_0x56c2b8","_0x2d8389","_0x242087","_0x4088a0","_0x245c15","_0x49383c","_0x53e19f","_0x58f7db","_0x791c27","_0x57cdd1","_0x201a7b","_0x3e5f80","_0x46a756","_0x314d6c","_0x1ae7f1","_0x502149","_0xb451f9","_0x3b959c","_0x419b62","_0x15049c","_0x17f4bb","_0x5bd1cc","_0x49e922","_0x11a727","_0x14b642","_0x178f22","_0xfd9151","_0x455227","_0x43bf1d","_0x5608b4","_0x4414ea","_0x1e0b23","_0x18b070","_0x19c676","Set","module"],"mappings":"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","sourcesContent":["/**\r\n * Object DB in REDIS - Client\r\n *\r\n * Copyright (c) 2018-2020 ioBroker GmbH - All rights reserved.\r\n *\r\n * You may not to use, modify or distribute this package in any form without explicit agreement from ioBroker GmbH.\r\n *\r\n * Unauthorized using, modifying or copying of this file, via any medium is strictly prohibited.\r\n * Proprietary and confidential\r\n * Written by bluefox <dogafox@gmail.com>, 2014-2019\r\n *\r\n */\r\n/* jshint -W097 */\r\n/* jshint strict: false */\r\n/* jslint node: true */\r\n/* jshint -W061 */\r\n'use strict';\r\n\r\nconst extend                = require('node.extend');\r\nconst Redis                 = require('ioredis');\r\n\nconst fs                    = require('fs');\r\nconst path                  = require('path');\r\nconst crypto                = require('crypto');\r\nconst { isDeepStrictEqual } = require('util');\r\nconst deepClone             = require('deep-clone');\r\n\r\nconst utils                 = require(path.join(getControllerDir() || __dirname, 'objectsUtils.js'));\r\n\r\n// copied from tools.js\r\n/**\r\n * Converts ioB pattern into regex.\r\n * @param {string} pattern - Regex string to us it in new RegExp(pattern)\r\n * @returns {string}\r\n */\r\nfunction pattern2RegEx(pattern) {\r\n    pattern = (pattern || '').toString()\r\n        .replace(/\\$/g, '\\\\$')\r\n        .replace(/\\^/g, '\\\\^');\r\n\r\n    if (pattern !== '*') {\r\n        if (pattern[0] === '*' && pattern[pattern.length - 1] !== '*') pattern += '$';\r\n        if (pattern[0] !== '*' && pattern[pattern.length - 1] === '*') pattern = '^' + pattern;\r\n        if (pattern[0] !== '*' && pattern[pattern.length - 1] !== '*') pattern = '^' + pattern + '$';\r\n    }\r\n\r\n    pattern = pattern\r\n        .replace(/\\?/g, '\\\\?')\r\n        .replace(/\\./g, '\\\\.')\r\n        .replace(/\\(/g, '\\\\(')\r\n        .replace(/\\)/g, '\\\\)')\r\n        .replace(/\\[/g, '\\\\[')\r\n        .replace(/]/g, '\\\\]')\r\n        .replace(/\\*/g, '.*');\r\n\r\n    return pattern;\r\n}\r\n\r\nlet crypto_;\r\n\r\n/**\r\n * recursively copy values from old object to new one\r\n *\r\n * @alias copyAttributes\r\n * @memberof tools\r\n * @param {object} oldObj source object\r\n * @param {object} newObj destination object\r\n * @param {object} [originalObj] optional object for read __no_change__ values\r\n * @param {boolean} [isNonEdit] optional indicator if copy is in nonEdit part\r\n *\r\n */\r\nfunction copyAttributes(oldObj, newObj, originalObj, isNonEdit) {\r\n    Object.keys(oldObj).forEach(attr => {\r\n        if (typeof oldObj[attr] !== 'object' || oldObj[attr] instanceof Array) {\r\n            if (oldObj[attr] === '__no_change__' && originalObj && !isNonEdit) {\r\n                if (originalObj[attr] !== undefined) {\r\n                    newObj[attr] = JSON.parse(JSON.stringify(originalObj[attr]));\r\n                } else {\r\n                    console.log(`Attribute ${attr} ignored by copying`);\r\n                }\r\n            } else\r\n            if (oldObj[attr] === '__delete__' && !isNonEdit) {\r\n                if (newObj[attr] !== undefined) {\r\n                    delete newObj[attr];\r\n                }\r\n            } else {\r\n                newObj[attr] = oldObj[attr];\r\n            }\r\n        } else {\r\n            newObj[attr] = newObj[attr] || {};\r\n            copyAttributes(oldObj[attr], newObj[attr], originalObj && originalObj[attr], isNonEdit || attr === 'nonEdit');\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Checks the flag nonEdit and restores non-changeable values if required\r\n *\r\n * @alias checkNonEditable\r\n * @memberof tools\r\n * @param {object} oldObject source object\r\n * @param {object} newObject destination object\r\n *\r\n */\r\nfunction checkNonEditable(oldObject, newObject) {\r\n    if (!oldObject) {\r\n        return true;\r\n    } else\r\n    if (!oldObject.nonEdit && !newObject.nonEdit) {\r\n        return true;\r\n    }\r\n\r\n    // if nonEdit is protected with password\r\n    if (oldObject.nonEdit && oldObject.nonEdit.passHash) {\r\n        // If new Object wants to update the nonEdit information\r\n        if (newObject.nonEdit && newObject.nonEdit.password) {\r\n            crypto_ = crypto_ || require('crypto');\r\n            const hash = crypto_.createHash('sha256').update(newObject.nonEdit.password.toString()).digest('base64');\r\n            if (oldObject.nonEdit.passHash !== hash) {\r\n                delete newObject.nonEdit;\r\n                return false;\r\n            } else {\r\n                oldObject.nonEdit = JSON.parse(JSON.stringify(newObject.nonEdit));\r\n                delete oldObject.nonEdit.password;\r\n                delete newObject.nonEdit.password;\r\n                oldObject.nonEdit.passHash = hash;\r\n                newObject.nonEdit.passHash = hash;\r\n            }\r\n            copyAttributes(newObject.nonEdit, newObject, newObject);\r\n\r\n            if (newObject.passHash) {\r\n                delete newObject.passHash;\r\n            }\r\n            if (newObject.nonEdit && newObject.nonEdit.password) {\r\n                delete newObject.nonEdit.password;\r\n            }\r\n\r\n            return true;\r\n        } else {\r\n            newObject.nonEdit = oldObject.nonEdit;\r\n        }\r\n\r\n    } else if (newObject.nonEdit) {\r\n        oldObject.nonEdit = JSON.parse(JSON.stringify(newObject.nonEdit));\r\n        if (newObject.nonEdit.password) {\r\n            crypto_ = crypto_ || require('crypto');\r\n            const hash = crypto_.createHash('sha256').update(newObject.nonEdit.password.toString()).digest('base64');\r\n            delete oldObject.nonEdit.password;\r\n            delete newObject.nonEdit.password;\r\n            oldObject.nonEdit.passHash = hash;\r\n            newObject.nonEdit.passHash = hash;\r\n        }\r\n    }\r\n\r\n    // restore settings\r\n    copyAttributes(oldObject.nonEdit, newObject, oldObject);\r\n\r\n    if (newObject.passHash) {\r\n        delete newObject.passHash;\r\n    }\r\n    if (newObject.nonEdit && newObject.nonEdit.password) {\r\n        delete newObject.nonEdit.password;\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * Checks if the given callback is a function and if so calls it with the given parameter immediately, else a resolved Promise is returned\r\n *\r\n * @param {(...args: any[]) => void | null | undefined} callback - callback function to be executed\r\n * @param {any[]} args - as many arguments as needed, which will be returned by the callback function or by the Promise\r\n * @returns {Promise<any>} - if Promise is resolved with multiple arguments, an array is returned\r\n */\r\nfunction maybeCallback(callback, ...args) {\r\n    if (typeof callback === 'function') {\r\n        // if function we call it with given param\r\n        setImmediate(callback, ...args);\r\n    } else {\r\n        return Promise.resolve(args.length > 1 ? args : args[0]);\r\n    }\r\n}\r\n\r\n/**\r\n * Checks if the given callback is a function and if so calls it with the given error and parameter immediately, else a resolved or rejected Promise is returned\r\n *\r\n * @param {((error: Error, ...args: any[]) => void) | null | undefined} callback - callback function to be executed\r\n * @param {Error | string | null | undefined} error - error which will be used by the callback function. If callback is not a function and\r\n * error is given, a rejected Promise is returned. If error is given but it is not an instance of Error, it is converted into one.\r\n * @param {any[]} args - as many arguments as needed, which will be returned by the callback function or by the Promise\r\n * @returns {Promise<any>} - if Promise is resolved with multiple arguments, an array is returned\r\n */\r\nfunction maybeCallbackWithError(callback, error, ...args) {\r\n    if (error !== undefined && error !== null && !(error instanceof Error)) {\r\n        // if its not a real Error, we convert it into one\r\n        error = new Error(error);\r\n    }\r\n\r\n    if (typeof callback === 'function') {\r\n        setImmediate(callback, error, ...args);\r\n    } else if (error) {\r\n        return Promise.reject(error);\r\n    } else {\r\n        return Promise.resolve(args.length > 1 ? args : args[0]);\r\n    }\r\n}\r\n\r\nconst tools       = {\r\n    checkNonEditable,\r\n    pattern2RegEx,\r\n    maybeCallback,\r\n    maybeCallbackWithError\r\n};\r\n\n\nconst scriptFiles = {};\r\nscriptFiles.custom = '-- design: custom\\n-- search: state\\nlocal rep = {}\\n-- local keys=redis.call(\"keys\", KEYS[1]..\"*\")\\nlocal cursor = KEYS[4];\\nlocal result = redis.call(\"SCAN\", cursor, \"MATCH\", KEYS[1] .. \"*\", \"COUNT\", 500)\\ncursor = result[1]\\nlocal keys = result[2]\\nlocal argStart = KEYS[1] .. KEYS[2]\\nlocal argEnd = KEYS[1] .. KEYS[3]\\n--  function(doc) {\\n--      if (doc.type===\"state\" && (doc.common.custom || doc.common.history))\\n--          emit(doc._id, doc.common.custom || doc.common.history)\\n--   }\\nfor _, key in ipairs(keys) do\\n    if (key >= argStart and key < argEnd) then\\n        local obj = redis.call(\"get\", key)\\n        local success, decoded = pcall(cjson.decode, obj)\\n        if (success and decoded.type == \"state\" and decoded.common ~= nil and decoded.common.custom ~= nil) then\\n            rep[#rep + 1] = obj\\n        end\\n    end\\nend\\nreturn { rep, cursor }\\n';\nscriptFiles.filter = '-- func: function(doc) { if (doc.type === \"%1\") emit(doc._id, doc); }\\nlocal rep = {}\\n-- local keys=redis.call(\"keys\", KEYS[1]..\"*\")\\nlocal cursor = KEYS[5];\\nlocal result = redis.call(\"SCAN\", cursor, \"MATCH\", KEYS[1] .. \"*\", \"COUNT\", 500)\\ncursor = result[1]\\nlocal keys = result[2]\\nlocal argStart = KEYS[1] .. KEYS[2]\\nlocal argEnd = KEYS[1] .. KEYS[3]\\nlocal type = KEYS[4]\\n-- function(doc) { if (doc.type === \"chart\") emit(doc._id, doc); }\\nfor _, key in ipairs(keys) do\\n    if (key >= argStart and key < argEnd) then\\n        local obj = redis.call(\"get\", key)\\n        local success, decoded = pcall(cjson.decode, obj)\\n        if (success and decoded.type == type) then\\n            rep[#rep + 1] = obj\\n        end\\n    end\\nend\\nreturn { rep, cursor }\\n';\nscriptFiles.programs = '-- design: hm-rega\\n-- search: programs\\nlocal rep = {}\\nlocal cursor = KEYS[4];\\nlocal result = redis.call(\"SCAN\", cursor, \"MATCH\", KEYS[1] .. \"*\", \"COUNT\", 500)\\ncursor = result[1]\\nlocal keys = result[2]\\nlocal argStart = KEYS[1] .. KEYS[2]\\nlocal argEnd = KEYS[1] .. KEYS[3]\\n--  function(doc) {\\n--      if (doc._id.match(/^hm-rega\\\\.[0-9]+\\\\.[0-9,A-Z,a-z]+/) && (doc.native.TypeName === \"PROGRAM\")) {\\n--          emit(doc._id, doc);\\n--      }\\n--  }\\nfor _, key in ipairs(keys) do\\n    if (key >= argStart and key < argEnd and key:sub(7, 13) == \"hm-rega\") then\\n        local obj = redis.call(\"get\", key)\\n        local success, decoded = pcall(cjson.decode, obj)\\n        if (success and decoded.native ~= nil and decoded.native.TypeName == \"PROGRAM\") then\\n            rep[#rep + 1] = obj\\n        end\\n    end\\nend\\nreturn { rep, cursor }\\n';\nscriptFiles.script = '-- design: script\\n-- search: javascript\\nlocal rep = {}\\nlocal cursor = KEYS[4];\\nlocal result = redis.call(\"SCAN\", cursor, \"MATCH\", KEYS[1] .. \"*\", \"COUNT\", 500)\\ncursor = result[1]\\nlocal keys = result[2]\\nlocal argStart = KEYS[1] .. KEYS[2]\\nlocal argEnd = KEYS[1] .. KEYS[3]\\n--  function(doc) {\\n--      if (doc.type === \"script\" && doc.common.engineType.match(/^[jJ]ava[sS]cript|^[cC]offee[sS]cript|^[tT]ype[sS]cript|^Blockly/)) emit(doc.common.name, doc); }\\nfor _, key in ipairs(keys) do\\n    if (key >= argStart and key < argEnd) then\\n        local obj = redis.call(\"get\", key)\\n        local success, decoded = pcall(cjson.decode, obj)\\n        if (success and decoded.type == \"script\") then\\n            rep[#rep + 1] = obj\\n        end\\n    end\\nend\\nreturn { rep, cursor }\\n';\nscriptFiles.variables = '-- design: hm-rega\\n-- search: variables\\nlocal rep = {}\\n-- local keys=redis.call(\"keys\", KEYS[1]..\"*\")\\nlocal cursor = KEYS[4];\\nlocal result = redis.call(\"SCAN\", cursor, \"MATCH\", KEYS[1] .. \"*\", \"COUNT\", 500)\\ncursor = result[1]\\nlocal keys = result[2]\\nlocal argStart = KEYS[1] .. KEYS[2]\\nlocal argEnd = KEYS[1] .. KEYS[3]\\n--  function(doc) {\\n--      if (doc._id.match(/^hm-rega\\\\.[0-9]+\\\\.[0-9,A-Z,a-z]+/) && (doc.native.TypeName === \"ALARMDP\" || doc.native.TypeName === \"VARDP\")) {\\n--          emit(doc._id, doc);\\n--      }\\n--  }\\nfor _, key in ipairs(keys) do\\n    if (key >= argStart and key < argEnd and key:sub(7, 13) == \"hm-rega\") then\\n        local obj = redis.call(\"get\", key)\\n        local success, decoded = pcall(cjson.decode, obj)\\n        if (success and decoded.native ~= nil and (decoded.native.TypeName == \"ALARMDP\" or decoded.native.TypeName == \"VARDP\")) then\\n            rep[#rep + 1] = obj\\n        end\\n    end\\nend\\nreturn { rep, cursor }\\n';\n\r\nfunction getControllerDir() {\r\n    const possibilities = ['iobroker.js-controller', 'ioBroker.js-controller'];\r\n    let controllerPath = null;\r\n    for (const pkg of possibilities) {\r\n        try {\r\n            const possiblePath = require.resolve(pkg);\r\n            if (fs.existsSync(possiblePath)) {\r\n                controllerPath = possiblePath;\r\n                break;\r\n            }\r\n        } catch (_a) {\r\n            /* not found */\r\n        }\r\n    }\r\n    // Apparently, checking vs null/undefined may miss the odd case of controllerPath being \"\"\r\n    // Thus we check for falsyness, which includes failing on an empty path\r\n    if (!controllerPath) {\r\n        controllerPath = path.join(__dirname, '..', '..', 'lib', 'objects');\r\n        if (!fs.existsSync(controllerPath)) {\r\n            controllerPath = null;\r\n        }\r\n    } else {\r\n        controllerPath = path.join(path.dirname(controllerPath), 'lib', 'objects');\r\n    }\r\n    return controllerPath;\r\n}\r\n\r\nclass ObjectsInRedis {\r\n\r\n    constructor(settings) {\r\n        // const originalSettings = settings;\r\n        this.settings = settings || {};\r\n        this.redisNamespace = (this.settings.redisNamespace || (this.settings.connection && this.settings.connection.redisNamespace) || 'cfg') + '.';\r\n        this.fileNamespace = this.redisNamespace + 'f.';\r\n        this.fileNamespaceL = this.fileNamespace.length;\r\n        this.objNamespace = this.redisNamespace + 'o.';\r\n        this.objNamespaceL = this.objNamespace.length;\r\n        const ioRegExp = new RegExp('^' + this.objNamespace.replace(/\\./g, '\\\\.') + '[_A-Za-z0-9ÄÖÜäöüа-яА-Я]+'); // cfg.o.[_A-Za-z0-9]+\r\n\r\n        const onChange = this.settings.change; // on change handler\r\n        const onChangeUser = this.settings.changeUser; // on change handler for User events\r\n\r\n        this.stop = false;\r\n        this.client = null;\r\n        this.sub = null;\r\n        this.subSystem = null;\r\n        this.preserveSettings = ['custom', 'smartName', 'material', 'habpanel', 'mobile'];\r\n        this.defaultNewAcl = this.settings.defaultNewAcl || null;\r\n        this.namespace = this.settings.namespace || this.settings.hostname || '';\r\n        this.scripts = {};\r\n\r\n        // cached meta objects for file operations\r\n        this.existingMetaObjects = {};\r\n\r\n        this.log = utils.getLogger(this.settings.logger);\r\n\r\n        this.settings.connection = this.settings.connection || {};\r\n\r\n        // limit max number of log entries in the list\r\n        this.settings.connection.maxQueue = this.settings.connection.maxQueue || 1000;\r\n\r\n        this.settings.connection.options = this.settings.connection.options || {};\r\n        const retry_max_delay = this.settings.connection.options.retry_max_delay || 5000;\r\n        const retry_max_count = this.settings.connection.options.retry_max_count || 19;\r\n\r\n        this.settings.connection.options.retryStrategy = reconnectCount => {\r\n            if (!ready && initError && ignoreErrors) {\r\n                return new Error('No more tries');\r\n            }\r\n            if (this.stop) {\r\n                return new Error('Client has stopped ... no retries anymore');\r\n            }\r\n            if (ready && reconnectCount >= retry_max_count) {\r\n                return new Error('Stop trying to reconnect');\r\n            }\r\n            // A function that receives an options object as parameter including the retry attempt,\r\n            // the total_retry_time indicating how much time passed since the last time connected,\r\n            // the error why the connection was lost and the number of times_connected in total.\r\n            // If you return a number from this function, the retry will happen exactly after that\r\n            // time in milliseconds. If you return a non-number, no further retry will happen and\r\n            // all offline commands are flushed with errors. Return an error to return that\r\n            // specific error to all offline commands.\r\n\r\n            if (!ready) {\r\n                return 300;\r\n            } else {\r\n                return retry_max_delay;\r\n            }\r\n            /*if (options.error.code === 'ECONNREFUSED') {\r\n                // End reconnecting on a specific error and flush all commands with a individual error\r\n                return new Error('The server refused the connection');\r\n            }\r\n            if (options.total_retry_time > 1000 * 60 * 60) {\r\n                // End reconnecting after a specific timeout and flush all commands with a individual error\r\n                return new Error('Retry time exhausted');\r\n            }\r\n            if (options.times_connected > 10) {\r\n                // End reconnecting with built in error\r\n                return undefined;\r\n            }\r\n            // reconnect after\r\n            return Math.max(options.attempt * 100, 3000);*/\r\n        };\r\n\r\n        delete this.settings.connection.options.retry_max_delay;\r\n        this.settings.connection.options.enableReadyCheck = true;\r\n\r\n        let ready = false;\r\n        let initError = false;\r\n        let ignoreErrors = false;\r\n        let connected = false;\r\n        let reconnectCounter = 0;\r\n\r\n        if (this.settings.connection.port === 0) { // Port = 0 means unix socket\r\n            // initiate a unix socket connection\r\n            this.settings.connection.options.path = this.settings.connection.host;\r\n            this.log.debug(this.namespace + ' Redis Objects: Use File Socket for connection: ' + this.settings.connection.options.path);\r\n        } else if (Array.isArray(this.settings.connection.host)) { // Host is an array means we use a sentinel\r\n            const defaultPort = Array.isArray(this.settings.connection.port) ? null : this.settings.connection.port;\r\n\r\n            this.settings.connection.options.sentinels = this.settings.connection.host.map((redisNode, idx) => ({\r\n                host: redisNode,\r\n                port: defaultPort || this.settings.connection.port[idx]\r\n            }));\r\n\r\n            this.settings.connection.options.name = this.settings.connection.sentinelName ? this.settings.connection.sentinelName : 'mymaster';\r\n            this.log.debug(this.namespace + ' Redis Objects: Use Sentinel for connection: ' + this.settings.connection.options.name + ', ' + JSON.stringify(this.settings.connection.options.sentinels));\r\n        } else {\r\n            this.settings.connection.options.host = this.settings.connection.host;\r\n            this.settings.connection.options.port = this.settings.connection.port;\r\n            this.log.debug(this.namespace + ' Redis Objects: Use Redis connection: ' + this.settings.connection.options.host + ':' + this.settings.connection.options.port);\r\n        }\r\n        this.settings.connection.options.db = this.settings.connection.options.db || 0;\r\n        this.settings.connection.options.family = this.settings.connection.options.family || 0;\r\n        this.settings.connection.options.password = this.settings.connection.options.auth_pass || this.settings.connection.pass || null;\r\n\r\n        this.settings.connection.options.autoResubscribe = false; // We do our own resubscribe because other sometimes not work\r\n        this.settings.connection.options.connectionName = this.namespace;\r\n\r\n        this.client = new Redis(this.settings.connection.options);\r\n\r\n        this.client.on('error', error => {\r\n            this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' Redis ERROR Objects: (' + ignoreErrors + '/' + this.stop + ') ' + error.message + ' / ' + error.stack);\r\n            if (this.stop) {\r\n                return;\r\n            }\r\n            if (!ready) {\r\n                initError = true;\r\n                // Seems we have a socket.io server\r\n                if (!ignoreErrors && error.message.startsWith('Protocol error, got \"H\" as reply type byte.')) {\r\n                    this.log.error('Socket.io Server detected. Please update to js-controller 2.0 or higher!');\r\n                }\r\n                return;\r\n            }\r\n            this.log.error(this.settings.namespace + ' ' + error.message);\r\n        });\r\n\r\n        this.client.on('end', () => {\r\n            this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' Objects-Redis Event end (stop=' + this.stop + ')');\r\n            ready && typeof this.settings.disconnected === 'function' && this.settings.disconnected();\r\n        });\r\n\r\n        this.client.on('connect', () => {\r\n            this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' Objects-Redis Event connect (stop=' + this.stop + ')');\r\n            connected = true;\r\n        });\r\n\r\n        this.client.on('close', () => {\r\n            this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' Objects-Redis Event close (stop=' + this.stop + ')');\r\n            //if (ready && typeof this.settings.disconnected === 'function') this.settings.disconnected();\r\n        });\r\n\r\n        this.client.on('reconnecting', () => {\r\n            if (connected && !ready && !initError && !ignoreErrors) {\r\n                reconnectCounter++;\r\n            }\r\n\r\n            this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' Objects-Redis Event reconnect (reconnectCounter=' + reconnectCounter + ', stop=' + this.stop + ')');\r\n\r\n            if (reconnectCounter > 2) { // fallback logic for nodejs <10\r\n                this.log.error('Could not connect database at ' + this.settings.connection.options.host + ':' + this.settings.connection.options.port + ' (invalid protocol). Please make sure the configured IP and port points to a host running JS-Controller >= 2.0.');\r\n                return;\r\n            }\r\n            connected = false;\r\n            initError = false;\r\n        });\r\n\r\n        this.client.on('ready', async () => {\r\n            if (this.stop) {\r\n                return;\r\n            }\r\n            initError = false;\r\n            ignoreErrors = false;\r\n\r\n            this.log.debug(this.namespace + ' Objects client ready ... initialize now');\r\n            try {\r\n                await this.client.config('set', ['lua-time-limit', 10000]); // increase LUA timeout TODO needs better fix\r\n            } catch (e) {\r\n                this.log.warn(`Unable to increase LUA script timeout: ${e}`);\r\n            }\r\n\r\n            let initCounter = 0;\r\n            if (!this.subSystem && typeof onChange === 'function') {\r\n                initCounter++;\r\n                this.log.debug(this.namespace + ' Objects create System PubSub Client');\r\n                this.subSystem = new Redis(this.settings.connection.options);\r\n                this.subSystem.ioBrokerSubscriptions = {};\r\n\r\n                if (typeof onChange === 'function') {\r\n                    this.subSystem.on('pmessage', (pattern, channel, message) =>\r\n                        setImmediate(() => {\r\n                            this.log.silly(`${this.namespace} Objects system redis pmessage ${pattern}/${channel}:${message}`);\r\n                            try {\r\n                                if (ioRegExp.test(channel)) {\r\n                                    const id = channel.substring(this.objNamespaceL);\r\n                                    try {\r\n                                        const obj = message ? JSON.parse(message) : null;\r\n\r\n                                        if (this.settings.controller &&\r\n                                                id === 'system.config' &&\r\n                                                obj &&\r\n                                                obj.common &&\r\n                                                obj.common.defaultNewAcl &&\r\n                                                !isDeepStrictEqual(obj.common.defaultNewAcl, this.defaultNewAcl)) {\r\n                                            this.defaultNewAcl = JSON.parse(JSON.stringify(obj.common.defaultNewAcl));\r\n                                            this.setDefaultAcl(this.defaultNewAcl);\r\n                                        }\r\n\r\n                                        onChange(id, obj);\r\n                                    } catch (e) {\r\n                                        this.log.warn(`${this.namespace} Objects Cannot process system pmessage ${id} - ${message}: ${e.message}`);\r\n                                        this.log.warn(`${this.namespace} ${e.stack}`);\r\n                                    }\r\n                                } else {\r\n                                    this.log.warn(`${this.namespace} Objects Received unexpected system pmessage: ${channel}`);\r\n                                }\r\n                            } catch (e) {\r\n                                this.log.warn(this.namespace + ' Objects system pmessage ' + channel + ' ' + JSON.stringify(message) + ' ' + e.message);\r\n                                this.log.warn(this.namespace + ' ' + e.stack);\r\n                            }\r\n                        }));\r\n                }\r\n\r\n                this.subSystem.on('end', () => {\r\n                    this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' Objects-Redis System Event end sub (stop=' + this.stop + ')');\r\n                    ready && typeof this.settings.disconnected === 'function' && this.settings.disconnected();\r\n                });\r\n\r\n                this.subSystem.on('error', error => {\r\n                    if (this.stop) {\r\n                        return;\r\n                    }\r\n                    this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' PubSub System client Objects No redis connection: ' + JSON.stringify(error));\r\n                });\r\n\r\n                if (this.settings.connection.enhancedLogging) {\r\n                    this.subSystem.on('connect', () =>\r\n                        this.log.silly(this.namespace + ' PubSub System client Objects-Redis Event connect (stop=' + this.stop + ')'));\r\n\r\n                    this.subSystem.on('close', () =>\r\n                        this.log.silly(this.namespace + ' PubSub System client Objects-Redis Event close (stop=' + this.stop + ')'));\r\n\r\n                    this.subSystem.on('reconnecting', reconnectCounter =>\r\n                        this.log.silly(this.namespace + ' PubSub System client Objects-Redis Event reconnect (reconnectCounter=' + reconnectCounter + ', stop=' + this.stop + ')'));\r\n                }\r\n\r\n                this.subSystem.on('ready', async () => {\r\n                    if (--initCounter < 1) {\r\n                        if (this.settings.connection.port === 0) {\r\n                            this.log.debug(this.namespace + ' Objects ' + (ready ? 'system re' : '') + 'connected to redis: ' + this.settings.connection.host);\r\n                        } else {\r\n                            this.log.debug(this.namespace + ' Objects ' + (ready ? 'system re' : '') + 'connected to redis: ' + this.settings.connection.host + ':' + this.settings.connection.port);\r\n                        }\r\n                        !ready && typeof this.settings.connected === 'function' && this.settings.connected(this);\r\n                        ready = true;\r\n                    }\r\n                    // subscribe on system.config only if js-controller\r\n                    if (this.settings.controller) {\r\n                        try {\r\n                            await this.subSystem.psubscribe(`${this.objNamespace}system.config`);\r\n                        } catch {\r\n                            // ignore\r\n                        }\r\n                    }\r\n                    for (const sub of Object.keys(this.subSystem.ioBrokerSubscriptions)) {\r\n                        try {\r\n                            await this.subSystem.psubscribe(sub);\r\n                        } catch {\r\n                            // ignore\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (!this.sub && typeof onChangeUser === 'function') {\r\n                initCounter++;\r\n                this.log.debug(this.namespace + ' Objects create User PubSub Client');\r\n                this.sub = new Redis(this.settings.connection.options);\r\n                this.sub.ioBrokerSubscriptions = {};\r\n\r\n                this.sub.on('pmessage', (pattern, channel, message) => {\r\n                    setImmediate(() => {\r\n                        this.log.silly(this.namespace + ' Objects user redis pmessage ' + pattern + '/' + channel + ':' + message);\r\n                        try {\r\n                            if (ioRegExp.test(channel)) {\r\n                                const id = channel.substring(this.objNamespaceL);\r\n                                try {\r\n                                    const obj = message ? JSON.parse(message) : null;\r\n\r\n                                    onChangeUser(id, obj);\r\n                                } catch (e) {\r\n                                    this.log.warn(`${this.namespace} Objects user cannot process pmessage ${id} - ${message}: ${e.message}`);\r\n                                    this.log.warn(`${this.namespace} ${e.stack}`);\r\n                                }\r\n                            } else {\r\n                                this.log.warn(`${this.namespace} Objects user received unexpected pmessage: ${channel}`);\r\n                            }\r\n                        } catch (e) {\r\n                            this.log.warn(this.namespace + ' Objects user pmessage ' + channel + ' ' + JSON.stringify(message) + ' ' + e.message);\r\n                            this.log.warn(this.namespace + ' ' + e.stack);\r\n                        }\r\n                    });\r\n                });\r\n\r\n                this.sub.on('end', () => {\r\n                    this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' Objects-Redis Event end user sub (stop=' + this.stop + ')');\r\n                    ready && typeof this.settings.disconnected === 'function' && this.settings.disconnected();\r\n                });\r\n\r\n                this.sub.on('error', error => {\r\n                    if (this.stop) {\r\n                        return;\r\n                    }\r\n                    this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' PubSub user client Objects No redis connection: ' + JSON.stringify(error));\r\n                });\r\n\r\n                if (this.settings.connection.enhancedLogging) {\r\n                    this.sub.on('connect', () =>\r\n                        this.log.silly(this.namespace + ' PubSub user client Objects-Redis Event connect (stop=' + this.stop + ')'));\r\n\r\n                    this.sub.on('close', () =>\r\n                        this.log.silly(this.namespace + ' PubSub user client Objects-Redis Event close (stop=' + this.stop + ')'));\r\n\r\n                    this.sub.on('reconnecting', reconnectCounter =>\r\n                        this.log.silly(this.namespace + ' PubSub user client Objects-Redis Event reconnect (reconnectCounter=' + reconnectCounter + ', stop=' + this.stop + ')'));\r\n                }\r\n\r\n                this.sub.on('ready', async () => {\r\n                    if (--initCounter < 1) {\r\n                        if (this.settings.connection.port === 0) {\r\n                            this.log.debug(this.namespace + ' Objects ' + (ready ? 'user re' : '') + 'connected to redis: ' + this.settings.connection.host);\r\n                        } else {\r\n                            this.log.debug(this.namespace + ' Objects ' + (ready ? 'user re' : '') + 'connected to redis: ' + this.settings.connection.host + ':' + this.settings.connection.port);\r\n                        }\r\n                        !ready && typeof this.settings.connected === 'function' && this.settings.connected(this);\r\n                        ready = true;\r\n                    }\r\n\r\n                    for (const sub of Object.keys(this.sub.ioBrokerSubscriptions)) {\r\n                        try {\r\n                            await this.sub.psubscribe(sub);\r\n                        } catch {\r\n                            // ignore\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            this.log.debug(this.namespace + ' Objects client initialize lua scripts');\r\n            initCounter++;\r\n            this.loadLuaScripts(async () => {\r\n                if (!this.client) {\r\n                    return;\r\n                }\r\n                // init default new acl\r\n                let obj;\r\n                try {\r\n                    obj = await this.client.get(this.objNamespace + 'system.config');\r\n                } catch {\r\n                    // ignore\r\n                }\r\n                if (obj) {\r\n                    try {\r\n                        obj = JSON.parse(obj);\r\n                    } catch (e) {\r\n                        this.log.error(`${this.namespace} Cannot parse JSON system.config: ${obj}`);\r\n                        obj = null;\r\n                    }\r\n                    if (obj && obj.common && obj.common.defaultNewAcl) {\r\n                        this.defaultNewAcl = obj.common.defaultNewAcl;\r\n                    }\r\n                } else {\r\n                    this.log.error(`${this.namespace} Cannot read system.config: ${obj} (OK when migrating or restoring)`);\r\n                }\r\n\r\n                if (--initCounter < 1) {\r\n                    if (this.settings.connection.port === 0) {\r\n                        this.log.debug(this.namespace + ' Objects ' + (ready ? 'client re' : '') + 'connected to redis: ' + this.settings.connection.host);\r\n                    } else {\r\n                        this.log.debug(this.namespace + ' Objects ' + (ready ? 'client re' : '') + 'connected to redis: ' + this.settings.connection.host + ':' + this.settings.connection.port);\r\n                    }\r\n                    !ready && typeof this.settings.connected === 'function' && this.settings.connected(this);\r\n                    ready = true;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    getStatus() {\r\n        return {type: 'redis', server: false};\r\n    }\r\n\r\n    /**\r\n     * Checks if given Id is a meta object, else throws error\r\n     *\r\n     * @param {string} id to check\r\n     * @throws Error if id is invalid\r\n     */\r\n    async validateMetaObject(id) {\r\n        if (this.existingMetaObjects[id] === undefined) {\r\n            // if not cached -> getObject\r\n            const obj = await this.getObjectAsync(id);\r\n            if (obj && obj.type === 'meta') {\r\n                this.existingMetaObjects[id] = true;\r\n            } else {\r\n                this.existingMetaObjects[id] = false;\r\n                return Promise.reject(new Error(`${id} is not an object of type \"meta\"`));\r\n            }\r\n        } else if (this.existingMetaObjects[id] === false) {\r\n            return Promise.reject(new Error(`${id} is not an object of type \"meta\"`));\r\n        }\r\n    }\r\n\r\n    normalizeFilename(name) {\r\n        return name ? name.replace(/[/\\\\]+/g, '/') : name;\r\n    }\r\n\r\n    // -------------- FILE FUNCTIONS -------------------------------------------\r\n    async _setBinaryState(id, data, callback) {\r\n        if (!this.client) {\r\n            return typeof callback === 'function' && setImmediate(() => callback(utils.ERRORS.ERROR_DB_CLOSED));\r\n        }\r\n        if (!Buffer.isBuffer(data)) {\r\n            data = Buffer.from(data);\r\n        }\r\n        try {\r\n            await this.client.set(id, data);\r\n            return tools.maybeCallback(callback);\r\n        } catch (e) {\r\n            return tools.maybeCallbackWithError(callback, e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get buffer of given id from redis\r\n     *\r\n     * @param {string} id - id of the data with namespace prefix\r\n     * @param {function(Error|null, Buffer?):void} [callback] - cb function, if not given a Promise is returned\r\n     * @return {Promise<Buffer|void>}\r\n     * @private\r\n     */\r\n    async _getBinaryState(id, callback) {\r\n        if (!this.client) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n        }\r\n\r\n        try {\r\n            const data = await this.client.getBuffer(id);\r\n            return tools.maybeCallbackWithError(callback, null, data);\r\n        } catch (e) {\r\n            return tools.maybeCallbackWithError(callback, e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * deletes binary state of given id from redis db\r\n     *\r\n     * @param {string} id - id to delete, with namespace prefix\r\n     * @param {function(Error|null):void} [callback] - callback function, if not given promise is returned\r\n     * @return {Promise<void>}\r\n     * @private\r\n     */\r\n    async _delBinaryState(id, callback) {\r\n        if (!this.client) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n        } else {\r\n            try {\r\n                await this.client.del(id);\r\n                return tools.maybeCallback(callback);\r\n            } catch (e) {\r\n                return tools.maybeCallbackWithError(callback, e);\r\n            }\r\n        }\r\n    }\r\n\r\n    getFileId(id, name, isMeta) {\r\n        name = this.normalizeFilename(name);\r\n        // e.g. ekey.admin and admin/ekey.png\r\n        if (id.match(/\\.admin$/)) {\r\n            if (name.match(/^admin\\//)) {\r\n                name = name.replace(/^admin\\//, '');\r\n            } else\r\n            // e.g. ekey.admin and iobroker.ekey/admin/ekey.png\r\n            if (name.match(/^iobroker.[-\\d\\w]\\/admin\\//i)) {\r\n                name = name.replace(/^iobroker.[-\\d\\w]\\/admin\\//i, '');\r\n            }\r\n        }\r\n        const normalized = utils.sanitizePath(id, name);\r\n        if (!normalized) {\r\n            this.log.debug(this.namespace + ' Invalid file path ' + id + '/' + name);\r\n            return '';\r\n        }\r\n        id = normalized.id;\r\n        name = normalized.name;\r\n\r\n        return this.fileNamespace + id + '$%$' + name + (isMeta !== undefined ? (isMeta ? '$%$meta' : '$%$data') : '');\r\n    }\r\n\r\n    async checkFile(id, name, options, flag, callback) {\r\n        // read file settings from redis\r\n        const fileId = this.getFileId(id, name, true);\r\n        if (!fileId) {\r\n            const fileOptions = {'notExists': true};\r\n            if (utils.checkFile(fileOptions, options, flag, this.defaultNewAcl)) {\r\n                return typeof callback === 'function' && setImmediate(() => callback(false, options, fileOptions)); // NO error\r\n            } else {\r\n                return typeof callback === 'function' && setImmediate(() => callback(true, options)); // error\r\n            }\r\n        }\r\n        if (!this.client) {\r\n            return typeof callback === 'function' && setImmediate(() => callback(utils.ERRORS.ERROR_DB_CLOSED, options));\r\n        }\r\n        let fileOptions;\r\n        try {\r\n            fileOptions = await this.client.get(fileId);\r\n        } catch {\r\n            // ignore\r\n        }\r\n        fileOptions = fileOptions || '{\"notExists\": true}';\r\n        try {\r\n            fileOptions = JSON.parse(fileOptions);\r\n        } catch (e) {\r\n            this.log.error(`${this.namespace} Cannot parse JSON ${id}: ${fileOptions}`);\r\n            fileOptions = {notExists: true};\r\n        }\r\n        if (utils.checkFile(fileOptions, options, flag, this.defaultNewAcl)) {\r\n            return typeof callback === 'function' && callback(false, options, fileOptions); // NO error\r\n        } else {\r\n            return typeof callback === 'function' && callback(true, options); // error\r\n        }\r\n    }\r\n\r\n    checkFileRights(id, name, options, flag, callback) {\r\n        return utils.checkFileRights(this, id, name, options, flag, callback);\r\n    }\r\n\r\n    _setDefaultAcl(ids, defaultAcl) {\r\n        if (ids && ids.length) {\r\n            const id = ids.shift();\r\n            this.getObject(id, (err, obj) => {\r\n                if (obj && !obj.acl) {\r\n                    obj.acl = defaultAcl;\r\n                    this.setObject(id, obj, null, () =>\r\n                        setImmediate(() =>\r\n                            this._setDefaultAcl(ids, defaultAcl)));\r\n                } else {\r\n                    setImmediate(() =>\r\n                        this._setDefaultAcl(ids, defaultAcl));\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    setDefaultAcl(defaultNewAcl) {\r\n        this.defaultNewAcl = defaultNewAcl || {\r\n            owner: utils.CONSTS.SYSTEM_ADMIN_USER,\r\n            ownerGroup: utils.CONSTS.SYSTEM_ADMIN_GROUP,\r\n            object: 0x664,\r\n            state: 0x664,\r\n            file: 0x664\r\n        };\r\n        // Get ALL Objects\r\n        this.getKeys('*', (err, ids) => this._setDefaultAcl(ids, this.defaultNewAcl));\r\n    }\r\n\r\n    getUserGroup(user, callback) {\r\n        return utils.getUserGroup(this, user, (error, user, userGroups, userAcl) => {\r\n            if (error) {\r\n                this.log.error(this.namespace + ' ' + error);\r\n            }\r\n            callback.call(this, user, userGroups, userAcl);\r\n        });\r\n    }\r\n\r\n    insert(id, attName, ignore, options, obj, callback) {\r\n        return utils.insert(this, id, attName, ignore, options, obj, callback);\r\n    }\r\n\r\n    async _writeFile(id, name, data, options, callback, meta) {\r\n        const ext         = name.match(/\\.[^.]+$/);\r\n        const mime        = utils.getMimeType(ext);\r\n        const _mimeType   = mime.mimeType;\r\n        const isBinary    = mime.isBinary;\r\n\r\n        const metaID = this.getFileId(id, name, true);\r\n        if (!this.client) {\r\n            return typeof callback === 'function' && callback(utils.ERRORS.ERROR_DB_CLOSED);\r\n        }\r\n        // virtual files only get Meta objects\r\n        if (options.virtualFile) {\r\n            meta = {\r\n                notExists: true,\r\n                virtualFile: true\r\n            }; // Store file with flags as it would not exist\r\n            try {\r\n                await this.client.set(metaID, JSON.stringify(meta));\r\n                return tools.maybeCallback(callback);\r\n            } catch (e) {\r\n                return tools.maybeCallbackWithError(callback, e);\r\n            }\r\n        } else {\r\n            if (!meta) {\r\n                meta = {createdAt: Date.now()};\r\n            }\r\n            if (!meta.acl) {\r\n                meta.acl = {\r\n                    owner: options.user || (this.defaultNewAcl && this.defaultNewAcl.owner) || utils.CONSTS.SYSTEM_ADMIN_USER,\r\n                    ownerGroup: options.group || (this.defaultNewAcl && this.defaultNewAcl.ownerGroup) || utils.CONSTS.SYSTEM_ADMIN_GROUP,\r\n                    permissions: options.mode || (this.defaultNewAcl && this.defaultNewAcl.file) || 0x644\r\n                };\r\n            }\r\n            meta.stats = {\r\n                size: data ? data.length : 0\r\n            };\r\n            if (Object.prototype.hasOwnProperty.call(meta, 'notExists')) {\r\n                delete meta.notExists;\r\n            }\r\n\r\n            meta.mimeType = options.mimeType || _mimeType;\r\n            meta.binary = isBinary;\r\n            meta.acl.ownerGroup = meta.acl.ownerGroup || (this.defaultNewAcl && this.defaultNewAcl.ownerGroup) || utils.CONSTS.SYSTEM_ADMIN_GROUP;\r\n            meta.modifiedAt = Date.now();\r\n\r\n            this._setBinaryState(this.getFileId(id, name, false), data, async err => {\r\n                try {\r\n                    await this.client.set(metaID, JSON.stringify(meta));\r\n                    return tools.maybeCallbackWithError(callback, err);\r\n                } catch (e) {\r\n                    return tools.maybeCallbackWithError(callback, err || e);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    async writeFile(id, name, data, options, callback) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = null;\r\n        }\r\n        if (typeof options === 'string') {\r\n            options = {mimeType: options};\r\n        }\r\n\r\n        if (options && options.acl) {\r\n            options.acl = null;\r\n        }\r\n\r\n        if (!callback) {\r\n            return new Promise((resolve, reject) =>\r\n                this.writeFile(id, name, data, options, err =>\r\n                    err ? reject(err) : resolve()));\r\n        }\r\n\r\n        try {\r\n            await this.validateMetaObject(id);\r\n        } catch (e) {\r\n            this.log.error(`Cannot write file ${name}: ${e.message}`);\r\n            return tools.maybeCallbackWithError(callback, e);\r\n        }\r\n\r\n        if (typeof name !== 'string' || !name.length || name === '/') {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_NOT_FOUND);\r\n        }\r\n\r\n        if (name.startsWith('/')) {\r\n            name = name.substring(1);\r\n        }\r\n\r\n        if (data === undefined) {\r\n            data = null;\r\n        }\r\n\r\n        // If file yet exists => check the permissions\r\n        return this.checkFileRights(id, name, options, utils.CONSTS.ACCESS_WRITE, (err, options, meta) => {\r\n            if (err) {\r\n                return tools.maybeCallbackWithError(callback, err);\r\n            } else {\r\n                return this._writeFile(id, name, data, options, callback, meta);\r\n            }\r\n        });\r\n    }\r\n\r\n    writeFileAsync(id, name, data, options) {\r\n        return new Promise((resolve, reject) =>\r\n            this.writeFile(id, name, data, options, err =>\r\n                err ? reject(err) : resolve()));\r\n    }\r\n\r\n    async _readFile(id, name, options, callback, meta) {\r\n        if (meta.notExists) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_NOT_FOUND);\r\n        }\r\n        if (!this.client) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n        }\r\n\r\n        let buffer;\r\n        try {\r\n            buffer = await this._getBinaryState(this.getFileId(id, name, false));\r\n        } catch (e) {\r\n            return tools.maybeCallbackWithError(callback, e);\r\n        }\r\n        const mimeType = meta && meta.mimeType;\r\n        if (meta && !meta.binary && buffer) {\r\n            buffer = buffer.toString();\r\n        }\r\n        return tools.maybeCallbackWithError(callback, null, buffer, mimeType);\r\n    }\r\n\r\n    async readFile(id, name, options, callback) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options  = null;\r\n        }\r\n        if (options && options.acl) {\r\n            options.acl = null;\r\n        }\r\n\r\n        if (!callback) {\r\n            return new Promise((resolve, reject) =>\r\n                this.readFile(id, name, options, (err, res, mimeType) =>\r\n                    err ? reject(err) : resolve({data: res, mimeType: mimeType})));\r\n        }\r\n\r\n        if (typeof name !== 'string' || !name.length || name === '/') {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_NOT_FOUND);\r\n        }\r\n\r\n        if (name.startsWith('/')) {\r\n            name = name.substring(1);\r\n        }\r\n\r\n        options = options || {};\r\n        this.checkFileRights(id, name, options, utils.CONSTS.ACCESS_READ, (err, options, meta) => {\r\n            if (err) {\r\n                return tools.maybeCallbackWithError(callback, err);\r\n            } else {\r\n                return this._readFile(id, name, options, callback, meta);\r\n            }\r\n        });\r\n    }\r\n\r\n    readFileAsync(id, name, options) {\r\n        return new Promise((resolve, reject) =>\r\n            this.readFile(id, name, options, (err, res, mimeType) =>\r\n                err ? reject(err) : resolve({data: res, mimeType: mimeType})));\r\n    }\r\n\r\n    /**\r\n     * Check if given object exists\r\n     *\r\n     * @param {string} id id of the object\r\n     * @param {object} [options] optional user context\r\n     * @return {Promise<boolean>}\r\n     */\r\n    async objectExists(id, options) {\r\n        if (!this.client) {\r\n            return Promise.reject(new Error(utils.ERRORS.ERROR_DB_CLOSED));\r\n        }\r\n        if (!id || typeof id !== 'string') {\r\n            return Promise.reject(new Error(`invalid id ${JSON.stringify(id)}`));\r\n        }\r\n\r\n        try {\r\n            await new Promise((resolve, reject) => {\r\n                utils.checkObjectRights(this, null, null, options, utils.CONSTS.ACCESS_LIST, err => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                });\r\n            });\r\n            const exists = await this.client.exists(this.objNamespace + id);\r\n            return !!exists;\r\n        } catch (e) {\r\n            this.log.error(`${this.namespace} Cannot check object existence of \"${id}\": ${e}`);\r\n            return Promise.reject(new Error(`Cannot check object existence of \"${id}\": ${e}`));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if given file exists\r\n     *\r\n     * @param {string} id id of the namespace\r\n     * @param {string} [name] name of the file\r\n     * @param {object} [options] optional user context\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    async fileExists(id, name, options) {\r\n        if (name.startsWith('/')) {\r\n            name = name.substring(1);\r\n        }\r\n\r\n        try {\r\n            await new Promise((resolve, reject) => {\r\n                this.checkFileRights(id, name, options, utils.CONSTS.ACCESS_READ, err => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                });\r\n            });\r\n            id = this.getFileId(id, name, false);\r\n            const exists = await this.client.exists(id);\r\n            return !!exists;\r\n        } catch (e) {\r\n            this.log.error(`${this.namespace} Cannot check file existence of \"${id}\": ${e}`);\r\n            return Promise.reject(new Error(`Cannot check file existence of \"${id}\": ${e}`));\r\n        }\r\n    }\r\n\r\n    async _unlink(id, name, options, callback, meta) {\r\n        if (!this.client) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n        }\r\n        if (meta && meta.notExists) {\r\n            this._rm(id, name, options, callback);\r\n            //typeof callback === 'function' && callback(utils.ERRORS.ERROR_NOT_FOUND);\r\n        } else {\r\n            const metaID = this.getFileId(id, name, true);\r\n            const dataID = this.getFileId(id, name, false);\r\n            try {\r\n                await this._delBinaryState(dataID);\r\n                await this.client.del(metaID);\r\n                return tools.maybeCallback(callback);\r\n            } catch (e) {\r\n                return tools.maybeCallbackWithError(callback, e);\r\n            }\r\n        }\r\n    }\r\n\r\n    unlink(id, name, options, callback) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options  = null;\r\n        }\r\n        if (options && options.acl) {\r\n            options.acl = null;\r\n        }\r\n\r\n        if (typeof name !== 'string') {\r\n            name = '';\r\n        }\r\n\r\n        if (name.startsWith('/')) {\r\n            name = name.substring(1);\r\n        }\r\n\r\n        this.checkFileRights(id, name, options, utils.CONSTS.ACCESS_DELETE, (err, options, meta) => {\r\n            if (err) {\r\n                return tools.maybeCallbackWithError(callback, err);\r\n            } else {\r\n                if (!options.acl.file['delete']) {\r\n                    return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_PERMISSION);\r\n                } else {\r\n                    return this._unlink(id, name, options, callback, meta);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    unlinkAsync(id, name, options) {\r\n        return new Promise((resolve, reject) =>\r\n            this.unlink(id, name, options, err =>\r\n                err ? reject(err) : resolve()));\r\n    }\r\n\r\n    delFile(id, name, options, callback) {\r\n        return this.unlink(id, name, options, callback);\r\n    }\r\n\r\n    delFileAsync(id, name, options) {\r\n        return this.unlinkAsync(id, name, options);\r\n    }\r\n\r\n    async _readDir(id, name, options, callback) {\r\n        name = this.normalizeFilename(name);\r\n        if (!this.client) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n        }\r\n        if (id === '') { // special case for \"root\"\r\n            const dirID = this.getFileId('*', '*');\r\n\r\n            let keys;\r\n            try {\r\n                keys = await this._getKeysViaScan(dirID);\r\n            } catch (e) {\r\n                return tools.maybeCallbackWithError(callback, e);\r\n            }\r\n\r\n            if (!this.client) {\r\n                return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n            }\r\n\r\n            const result = [];\r\n            if (!keys || !keys.length) {\r\n                return tools.maybeCallbackWithError(callback, null, result);\r\n            }\r\n            let lastDir;\r\n            keys.sort().forEach(dir => {\r\n                dir = dir.substring(this.fileNamespaceL, dir.indexOf('$%$'));\r\n                if (dir !== lastDir) {\r\n                    result.push({\r\n                        file: dir,\r\n                        stats: {},\r\n                        isDir: true\r\n                    });\r\n                }\r\n                lastDir = dir;\r\n            });\r\n            return tools.maybeCallbackWithError(callback, null, result);\r\n        }\r\n\r\n        const dirID = this.getFileId(id, name + (name.length ? '/' : '') + '*');\r\n\r\n        let keys;\r\n        try {\r\n            keys = await this._getKeysViaScan(dirID);\r\n        } catch (e) {\r\n            return tools.maybeCallbackWithError(callback, e);\r\n        }\r\n\r\n        if (!this.client) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n        }\r\n\r\n        const start = dirID.indexOf('$%$') + 3;\r\n        const end = '$%$meta'.length;\r\n\r\n        const baseName = name + (name.length ? '/' : '');\r\n        const dirs = [];\r\n        const deepLevel = baseName.split('/').length;\r\n        if (!keys || !keys.length) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_NOT_FOUND, []);\r\n        }\r\n        keys = keys\r\n            .sort()\r\n            .filter(key => {\r\n                if (key.match(/\\$%\\$meta$/)) {\r\n                    const parts = key.substr(start, key.length - end).split('/');\r\n                    if (parts.length === deepLevel) {\r\n                        return !key.includes('/_data.json$%$') && key !== '_data.json'; // sort out \"virtual\" files that are used to mark directories\r\n                    } else {\r\n                        const dir = parts[deepLevel - 1];\r\n                        if (dirs.indexOf(dir) === -1) {\r\n                            dirs.push(dir);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        if (!keys.length) {\r\n            const result = [];\r\n            while (dirs.length) {\r\n                result.push({\r\n                    file: dirs.shift(),\r\n                    stats: {},\r\n                    isDir: true\r\n                });\r\n            }\r\n            return tools.maybeCallbackWithError(callback, null, result);\r\n        }\r\n\r\n        // Check permissions\r\n        let objs;\r\n        try {\r\n            objs = await this.client.mget(keys);\r\n        } catch (e) {\r\n            return tools.maybeCallbackWithError(callback, e);\r\n        }\r\n\r\n        const result = [];\r\n        const dontCheck =\r\n                    options.user === utils.CONSTS.SYSTEM_ADMIN_USER ||\r\n                    options.group !== utils.CONSTS.SYSTEM_ADMIN_GROUP ||\r\n                    (options.groups && options.groups.indexOf(utils.CONSTS.SYSTEM_ADMIN_GROUP) !== -1);\r\n\r\n        objs = objs || [];\r\n        for (let i = 0; i < keys.length; i++) {\r\n            const file = keys[i].substring(start + baseName.length, keys[i].length - end);\r\n            while (dirs.length && dirs[0] < file) {\r\n                result.push({\r\n                    file: dirs.shift(),\r\n                    stats: {},\r\n                    isDir: true\r\n                });\r\n            }\r\n\r\n            try {\r\n                objs[i] = JSON.parse(objs[i]);\r\n            } catch (e) {\r\n                this.log.error(`${this.namespace} Cannot parse JSON ${keys[i]}: ${objs[i]}`);\r\n                continue;\r\n            }\r\n            if (dontCheck || utils.checkObject(objs[i], options, utils.CONSTS.ACCESS_READ)) {\r\n                if (!objs[i] || objs[i].virtualFile) {\r\n                    continue;\r\n                } // virtual file, ignore\r\n                objs[i].acl = objs[i].acl || {};\r\n                if (options.user !== utils.CONSTS.SYSTEM_ADMIN_USER && options.groups.indexOf(utils.CONSTS.SYSTEM_ADMIN_GROUP) === -1) {\r\n                    objs[i].acl.read  = !!(objs[i].acl.permissions & utils.CONSTS.ACCESS_EVERY_READ);\r\n                    objs[i].acl.write = !!(objs[i].acl.permissions & utils.CONSTS.ACCESS_EVERY_WRITE);\r\n                } else {\r\n                    objs[i].acl.read  = true;\r\n                    objs[i].acl.write = true;\r\n                }\r\n                result.push({\r\n                    file: file,\r\n                    stats: objs[i].stats,\r\n                    isDir: false,\r\n                    acl: objs[i].acl,\r\n                    modifiedAt: objs[i].modifiedAt,\r\n                    createdAt:  objs[i].createdAt\r\n                });\r\n            }\r\n        }\r\n        while (dirs.length) {\r\n            result.push({\r\n                file: dirs.shift(),\r\n                stats: {},\r\n                isDir: true\r\n            });\r\n        }\r\n        return tools.maybeCallbackWithError(callback, null, result);\r\n    }\r\n\r\n    async readDir(id, name, options, callback) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = null;\r\n        }\r\n        if (options && options.acl) {\r\n            options.acl = null;\r\n        }\r\n\r\n        if (typeof name !== 'string') {\r\n            name = '';\r\n        }\r\n\r\n        // remove first and last\r\n        if (name.startsWith('/')) {\r\n            name = name.substring(1);\r\n        }\r\n        if (name.endsWith('/')) {\r\n            name = name.substring(0, name.length - 1);\r\n        }\r\n\r\n        this.checkFileRights(id, name, options, utils.CONSTS.ACCESS_READ, (err, options) => {\r\n            if (err) {\r\n                return tools.maybeCallbackWithError(callback, err);\r\n            } else {\r\n                if (!options.acl.file.list) {\r\n                    return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_PERMISSION);\r\n                } else {\r\n                    this._readDir(id, name, options, callback);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    readDirAsync(id, name, options) {\r\n        return new Promise((resolve, reject) =>\r\n            this.readDir(id, name, options, (err, res) =>\r\n                err ? reject(err) : resolve(res)));\r\n    }\r\n\r\n    async _renameHelper(keys, oldBase, newBase, callback) {\r\n        if (!keys || !keys.length) {\r\n            return tools.maybeCallback(callback);\r\n        } else {\r\n            if (!this.client) {\r\n                return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n            }\r\n            for (const id of keys) {\r\n                try {\r\n                    await this.client.rename(id.replace(/\\$%\\$meta$/, '$%$data'), id.replace(oldBase, newBase).replace(/\\$%\\$meta$/, '$%$data'));\r\n                    await this.client.rename(id, id.replace(oldBase, newBase));\r\n                } catch (e) {\r\n                    return tools.maybeCallbackWithError(callback, e);\r\n                }\r\n            }\r\n            return tools.maybeCallback(callback);\r\n        }\r\n    }\r\n\r\n    async _rename(id, oldName, newName, options, callback, meta) {\r\n        const oldMetaID = this.getFileId(id, oldName, true);\r\n        const oldDataID = this.getFileId(id, oldName, false);\r\n        const newMetaID = this.getFileId(id, newName, true);\r\n        const newDataID = this.getFileId(id, newName, false);\r\n        if (!meta || !this.client) {\r\n            return typeof callback === 'function' && callback(utils.ERRORS.ERROR_DB_CLOSED);\r\n        } else if (meta.notExists) {\r\n            oldName = this.normalizeFilename(oldName);\r\n            newName = this.normalizeFilename(newName);\r\n\r\n            // it could be dir\r\n            if (!oldName.endsWith('/*')) {\r\n                oldName += '/*';\r\n            } else if (oldName.endsWith('/')) {\r\n                oldName += '*';\r\n            }\r\n\r\n            if (!newName.endsWith('/*')) {\r\n                newName += '/*';\r\n            } else if (newName.endsWith('/')) {\r\n                newName += '*';\r\n            }\r\n\r\n            const oldBase = oldName.substring(0, oldName.length - 1);\r\n            const newBase = newName.substring(0, newName.length - 1);\r\n            const dirID = this.getFileId(id, oldName);\r\n            let keys;\r\n            try {\r\n                keys = await this._getKeysViaScan(dirID);\r\n            } catch (e) {\r\n                return tools.maybeCallbackWithError(callback, e);\r\n            }\r\n\r\n            if (!this.client) {\r\n                return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n            }\r\n            if (!keys) {\r\n                return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_NOT_FOUND);\r\n            }\r\n\r\n            keys = keys\r\n                .sort()\r\n                .filter(key => key.match(/\\$%\\$meta$/));\r\n\r\n            if (!keys.length) {\r\n                return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_NOT_FOUND);\r\n            }\r\n            // Check permissions\r\n            let objs;\r\n            try {\r\n                objs = await this.client.mget(keys);\r\n            } catch (e) {\r\n                return tools.maybeCallbackWithError(callback, e);\r\n            }\r\n            let result;\r\n            const dontCheck =\r\n                        options.user === utils.CONSTS.SYSTEM_ADMIN_USER ||\r\n                        options.group !== utils.CONSTS.SYSTEM_ADMIN_GROUP ||\r\n                        (options.groups && options.groups.indexOf(utils.CONSTS.SYSTEM_ADMIN_GROUP) !== -1);\r\n\r\n            objs = objs || [];\r\n            if (!dontCheck) {\r\n                result = [];\r\n                for (let i = 0; i < keys.length; i++) {\r\n                    try {\r\n                        objs[i] = JSON.parse(objs[i]);\r\n                    } catch (e) {\r\n                        this.log.error(`${this.namespace} Cannot parse JSON ${keys[i]}: ${objs[i]}`);\r\n                        continue;\r\n                    }\r\n                    if (utils.checkObject(objs[i], options, utils.CONSTS.ACCESS_READ)) {\r\n                        result.push(keys[i]);\r\n                    }\r\n                }\r\n            } else {\r\n                result = keys;\r\n            }\r\n            return this._renameHelper(result, oldBase, newBase, callback);\r\n        } else {\r\n            try {\r\n                await this.client.rename(oldDataID, newDataID);\r\n                await this.client.rename(oldMetaID, newMetaID);\r\n                return tools.maybeCallback(callback);\r\n            } catch (e) {\r\n                return tools.maybeCallbackWithError(callback, e);\r\n            }\r\n        }\r\n    }\r\n\r\n    rename(id, oldName, newName, options, callback) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = null;\r\n        }\r\n        if (options && options.acl) {\r\n            options.acl = null;\r\n        }\r\n        if (typeof oldName !== 'string' || !oldName.length || oldName === '/' || oldName === '//' ||\r\n            typeof newName !== 'string' || !newName.length || newName === '/' || newName === '//') {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_NOT_FOUND);\r\n        }\r\n        if (oldName.startsWith('/')) {\r\n            oldName = oldName.substring(1);\r\n        }\r\n        if (newName.startsWith('/')) {\r\n            newName = newName.substring(1);\r\n        }\r\n        if (oldName.endsWith('/')) {\r\n            oldName = oldName.substring(0, oldName.length - 1);\r\n        }\r\n        if (newName.endsWith('/')) {\r\n            newName = newName.substring(0, newName.length - 1);\r\n        }\r\n\r\n        this.checkFileRights(id, oldName, options, utils.CONSTS.ACCESS_WRITE, (err, options, meta) => {\r\n            if (err) {\r\n                typeof callback === 'function' && callback(err);\r\n            } else {\r\n                if (!options.acl.file.write) {\r\n                    typeof callback === 'function' && callback(utils.ERRORS.ERROR_PERMISSION);\r\n                } else {\r\n                    this._rename(id, oldName, newName, options, callback, meta);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    renameAsync(id, oldName, newName, options) {\r\n        return new Promise((resolve, reject) =>\r\n            this.rename(id, oldName, newName, options, err =>\r\n                err ? reject(err) : resolve()));\r\n    }\r\n\r\n    async _touch(id, name, options, callback, meta) {\r\n        const metaID = this.getFileId(id, name, true);\r\n        if (!this.client) {\r\n            return typeof callback === 'function' && callback(utils.ERRORS.ERROR_DB_CLOSED);\r\n        }\r\n        if (!meta || meta.notExists) {\r\n            return typeof callback === 'function' && callback(utils.ERRORS.ERROR_NOT_FOUND);\r\n        }\r\n        meta.modifiedAt = Date.now();\r\n        try {\r\n            await this.client.set(metaID, JSON.stringify(meta));\r\n            return tools.maybeCallback(callback);\r\n        } catch (e) {\r\n            return tools.maybeCallbackWithError(callback, e);\r\n        }\r\n    }\r\n\r\n    touch(id, name, options, callback) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = null;\r\n        }\r\n        if (options && options.acl) {\r\n            options.acl = null;\r\n        }\r\n\r\n        if (typeof name !== 'string' || !name.length || name === '/') {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_NOT_FOUND);\r\n        }\r\n\r\n        if (name.startsWith('/')) {\r\n            name = name.substring(1);\r\n        }\r\n\r\n        this.checkFileRights(id, name, options, utils.CONSTS.ACCESS_WRITE, (err, options, meta) => {\r\n            if (err) {\r\n                return tools.maybeCallbackWithError(callback, err);\r\n            } else {\r\n                return this._touch(id, name, options, callback, meta);\r\n            }\r\n        });\r\n    }\r\n\r\n    touchAsync(id, name, options) {\r\n        return new Promise((resolve, reject) =>\r\n            this.touch(id, name, options, err =>\r\n                err ? reject(err) : resolve()));\r\n    }\r\n\r\n    async _rmHelper(keys, callback) {\r\n        if (!keys || !keys.length) {\r\n            return tools.maybeCallback(callback);\r\n        } else {\r\n            if (!this.client) {\r\n                return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n            }\r\n\r\n            for (const id of keys) {\r\n                try {\r\n                    await this._delBinaryState(id.replace(/\\$%\\$meta$/, '$%$data'));\r\n                    await this.client.del(id);\r\n                } catch (e) {\r\n                    return tools.maybeCallbackWithError(callback, e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    async _rm(id, name, options, callback, meta) {\r\n        if (meta && !meta.isDir) {\r\n            // it is file\r\n            const metaID = this.getFileId(id, name, true);\r\n            const dataID = this.getFileId(id, name, false);\r\n            this.delObject(dataID, _err => this.delObject(metaID, callback));\r\n        } else {\r\n            if (!this.client) {\r\n                return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n            }\r\n            name = this.normalizeFilename(name);\r\n            // it could be dir\r\n            if (! name.endsWith('/*')) {\r\n                name += '/*';\r\n            } else if (name.endsWith('/')) {\r\n                name += '*';\r\n            }\r\n            const dirID = this.getFileId(id, name);\r\n            let keys;\r\n            try {\r\n                keys = await this._getKeysViaScan(dirID);\r\n            } catch (e) {\r\n                return tools.maybeCallbackWithError(callback, e);\r\n            }\r\n            if (!this.client) {\r\n                return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n            }\r\n            if (!keys) {\r\n                return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_NOT_FOUND);\r\n            }\r\n\r\n            keys = keys\r\n                .sort()\r\n                .filter(key => key.match(/\\$%\\$meta$/));\r\n\r\n            if (!keys.length) {\r\n                return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_NOT_FOUND);\r\n            }\r\n            // Check permissions\r\n            let objs;\r\n            try {\r\n                objs = await this.client.mget(keys);\r\n            } catch {\r\n                // ignore\r\n            }\r\n            let result;\r\n            const dontCheck =\r\n                        options.user === utils.CONSTS.SYSTEM_ADMIN_USER ||\r\n                        options.group !== utils.CONSTS.SYSTEM_ADMIN_GROUP ||\r\n                        (options.groups && options.groups.indexOf(utils.CONSTS.SYSTEM_ADMIN_GROUP) !== -1);\r\n\r\n            objs = objs || [];\r\n            if (!dontCheck) {\r\n                result = [];\r\n                for (let i = 0; i < keys.length; i++) {\r\n                    try {\r\n                        objs[i] = JSON.parse(objs[i]);\r\n                    } catch (e) {\r\n                        this.log.error(`${this.namespace} Cannot parse JSON ${keys[i]}: ${objs[i]}`);\r\n                        continue;\r\n                    }\r\n                    if (utils.checkObject(objs[i], options, utils.CONSTS.ACCESS_READ)) {\r\n                        result.push(keys[i]);\r\n                    }\r\n                }\r\n            } else {\r\n                result = keys;\r\n            }\r\n            const files = result.map(key => {\r\n                const name = key.substring(this.fileNamespaceL + id.length + 3, key.length - 7);\r\n                const pos = name.lastIndexOf('/');\r\n                if (pos !== -1) {\r\n                    return {file: name.substring(pos + 1), path: name.substring(0, pos)};\r\n                } else {\r\n                    return {file: id, path: ''};\r\n                }\r\n            });\r\n            this._rmHelper(result, () => {\r\n                return tools.maybeCallbackWithError(callback, null, files);\r\n            });\r\n        }\r\n    }\r\n\r\n    rm(id, name, options, callback) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = null;\r\n        }\r\n        if (options && options.acl) {\r\n            options.acl = null;\r\n        }\r\n\r\n        if (typeof name !== 'string') {\r\n            name = '';\r\n        }\r\n\r\n        this.checkFileRights(id, null, options, utils.CONSTS.ACCESS_DELETE, (err, options, meta) => {\r\n            if (err) {\r\n                return tools.maybeCallbackWithError(callback, err);\r\n            } else {\r\n                if (!options.acl.file['delete']) {\r\n                    return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_PERMISSION);\r\n                } else {\r\n                    return this._rm(id, name, options, callback, meta && meta.notExists ? null : meta);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    rmAsync(id, name, options) {\r\n        return new Promise((resolve, reject) =>\r\n            this.rm(id, name, options, (err, files) =>\r\n                err ? reject(err) : resolve(files)));\r\n    }\r\n\r\n    // simulate. redis has no dirs\r\n    mkdir(id, dirName, options, callback) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = null;\r\n        }\r\n        if (typeof dirName !== 'string') {\r\n            dirName = '';\r\n        }\r\n\r\n        dirName = this.normalizeFilename(dirName);\r\n        if (dirName.startsWith('/')) {\r\n            dirName = dirName.substring(1);\r\n        }\r\n        this.checkFileRights(id, dirName, options, utils.CONSTS.ACCESS_WRITE, (err, options) => {\r\n            if (err) {\r\n                return tools.maybeCallbackWithError(callback, err);\r\n            } else {\r\n                if (!options.acl.file.write) {\r\n                    return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_PERMISSION);\r\n                } else {\r\n                    // we create a dummy file (for file this file exists to store meta data)\r\n                    options = options || {};\r\n                    options.virtualFile = true; // this is a virtual File\r\n                    const realName = dirName + (dirName.endsWith('/') ? '' : '/');\r\n                    this.writeFile(id, realName + '_data.json', '', options, callback);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    mkdirAsync(id, dirName, options) {\r\n        return new Promise((resolve, reject) =>\r\n            this.mkdir(id, dirName, options, err =>\r\n                err ? reject(err) : resolve()));\r\n    }\r\n\r\n    async _chownFileHelper(keys, metas, options, callback) {\r\n        if (!keys || !keys.length) {\r\n            return tools.maybeCallback(callback);\r\n        }\r\n        if (!this.client) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n        }\r\n\r\n        for (const id of keys) {\r\n            const meta = metas.shift();\r\n            meta.acl.owner = options.owner;\r\n            meta.acl.ownerGroup = options.ownerGroup;\r\n            try {\r\n                await this.client.set(id, JSON.stringify(meta));\r\n            } catch (e) {\r\n                return tools.maybeCallbackWithError(callback, e);\r\n            }\r\n        }\r\n    }\r\n\r\n    async _chownFile(id, name, options, callback, meta) {\r\n        if (!meta) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_NOT_FOUND);\r\n        }\r\n\r\n        name = this.normalizeFilename(name);\r\n        if (!this.client) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n        }\r\n        if (!meta.isDir && !meta.notExists) {\r\n            // it is file\r\n            const metaID = this.getFileId(id, name, true);\r\n            meta.acl.owner = options.owner;\r\n            meta.acl.ownerGroup = options.ownerGroup;\r\n            try {\r\n                await this.client.set(metaID, JSON.stringify(meta));\r\n            } catch (e) {\r\n                return tools.maybeCallbackWithError(callback, e);\r\n            }\r\n            const nameArr = name.split('/');\r\n            const file = nameArr.pop();\r\n            const res = [{\r\n                path:       nameArr.join('/'),\r\n                file:       file,\r\n                stats:      meta.stats,\r\n                isDir:      false,\r\n                acl:        meta.acl || {},\r\n                modifiedAt: meta.modifiedAt,\r\n                createdAt:  meta.createdAt\r\n            }];\r\n            return tools.maybeCallbackWithError(callback, null, res);\r\n        }\r\n\r\n        // it could be dir\r\n        if (! name.endsWith('/*')) {\r\n            name += '/*';\r\n        } else if (name.endsWith('/')) {\r\n            name += '*';\r\n        }\r\n        const dirID = this.getFileId(id, name);\r\n\r\n        let keys;\r\n        try {\r\n            keys = await this._getKeysViaScan(dirID);\r\n        } catch (e) {\r\n            return tools.maybeCallbackWithError(callback, e);\r\n        }\r\n\r\n        if (!this.client) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n        }\r\n        if (!keys) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_NOT_FOUND);\r\n        }\r\n\r\n        keys = keys\r\n            .sort()\r\n            .filter(key => key.match(/\\$%\\$meta$/));\r\n\r\n        // Check permissions\r\n        let metas;\r\n        try {\r\n            metas = await this.client.mget(keys);\r\n        } catch (e) {\r\n            return tools.maybeCallbackWithError(callback, e);\r\n        }\r\n        const dontCheck = options.user === utils.CONSTS.SYSTEM_ADMIN_USER ||\r\n                    options.group !== utils.CONSTS.SYSTEM_ADMIN_GROUP ||\r\n                    (options.groups && options.groups.indexOf(utils.CONSTS.SYSTEM_ADMIN_GROUP) !== -1);\r\n        const keysFiltered = [];\r\n        const objsFiltered = [];\r\n        const processed = [];\r\n        const start = dirID.indexOf('$%$') + 3;\r\n        const end = '$%$meta'.length;\r\n\r\n        metas = metas || [];\r\n        for (let i = 0; i < keys.length; i++) {\r\n            try {\r\n                metas[i] = JSON.parse(metas[i]);\r\n            } catch (e) {\r\n                this.log.error(`${this.namespace} Cannot parse JSON ${keys[i]}: ${metas[i]}`);\r\n                continue;\r\n            }\r\n            if (dontCheck || utils.checkObject(metas[i], options, utils.CONSTS.ACCESS_WRITE)) {\r\n                if (!metas[i] || metas[i].virtualFile) {\r\n                    continue;\r\n                } // virtual file, ignore\r\n                keysFiltered.push(keys[i]);\r\n                objsFiltered.push(metas[i]);\r\n\r\n                const name = keys[i].substring(start, keys[i].length - end);\r\n                const nameArr = name.split('/');\r\n                const file = nameArr.pop();\r\n                processed.push({\r\n                    path:       nameArr.join('/'),\r\n                    file:       file,\r\n                    stats:      metas[i].stats || {},\r\n                    isDir:      false,\r\n                    acl:        metas[i].acl || {},\r\n                    modifiedAt: metas[i].modifiedAt,\r\n                    createdAt:  metas[i].createdAt\r\n                });\r\n            }\r\n        }\r\n        this._chownFileHelper(keysFiltered, objsFiltered, options, err => {\r\n            return tools.maybeCallbackWithError(callback, err, processed);\r\n        });\r\n    }\r\n\r\n    chownFile(id, name, options, callback) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = null;\r\n        }\r\n        options = options || {};\r\n        if (typeof options !== 'object') {\r\n            options = {owner: options};\r\n        }\r\n\r\n        if (typeof name !== 'string' || !name.length || name === '/') {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_NOT_FOUND);\r\n        }\r\n\r\n        if (name.startsWith('/')) {\r\n            name = name.substring(1);\r\n        }\r\n\r\n        if (!options.ownerGroup && options.group) {\r\n            options.ownerGroup = options.group;\r\n        }\r\n        if (!options.owner      && options.user)  {\r\n            options.owner      = options.user;\r\n        }\r\n\r\n        if (!options.owner) {\r\n            this.log.error(this.namespace + ' user is not defined');\r\n            return tools.maybeCallbackWithError(callback, 'invalid parameter');\r\n        }\r\n\r\n        if (!options.ownerGroup) {\r\n            // get user group\r\n            this.getUserGroup(options.owner, (user, groups /* , permissions */) => {\r\n                if (!groups || !groups[0]) {\r\n                    return tools.maybeCallbackWithError(callback, `user \"${options.owner}\" belongs to no group`);\r\n                } else {\r\n                    options.ownerGroup = groups[0];\r\n                }\r\n                this.chownFile(id, name, options, callback);\r\n            });\r\n            return;\r\n        }\r\n\r\n        this.checkFileRights(id, name, options, utils.CONSTS.ACCESS_WRITE, (err, options, meta) => {\r\n            if (err) {\r\n                return tools.maybeCallbackWithError(callback, err);\r\n            } else {\r\n                if (!options.acl.file.write) {\r\n                    return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_PERMISSION);\r\n                } else {\r\n                    return this._chownFile(id, name, options, callback, meta);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    chownFileAsync(id, name, options) {\r\n        return new Promise((resolve, reject) =>\r\n            this.chownFile(id, name, options, err =>\r\n                err ? reject(err) : resolve()));\r\n    }\r\n\r\n    async _chmodFileHelper(keys, metas, options, callback) {\r\n        if (!keys || !keys.length) {\r\n            return tools.maybeCallback(callback);\r\n        } else {\r\n            if (!this.client) {\r\n                return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n            }\r\n            const id   = keys.shift();\r\n            const meta = metas.shift();\r\n            meta.acl.permissions = options.mode;\r\n            try {\r\n                await this.client.set(id, JSON.stringify(meta));\r\n                return setImmediate(this._chmodFileHelper, keys, metas, options, callback);\r\n            } catch (e) {\r\n                return tools.maybeCallbackWithError(callback, e);\r\n            }\r\n        }\r\n    }\r\n\r\n    async _chmodFile(id, name, options, callback, meta) {\r\n        if (!meta) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_NOT_FOUND);\r\n        }\r\n        name = this.normalizeFilename(name);\r\n        if (!this.client) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n        }\r\n        if (!meta.isDir && !meta.notExists) {\r\n            // it is file\r\n            const metaID = this.getFileId(id, name, true);\r\n            meta.acl.permissions = options.mode;\r\n            try {\r\n                await this.client.set(metaID, JSON.stringify(meta));\r\n            } catch (e) {\r\n                return tools.maybeCallbackWithError(callback, e);\r\n            }\r\n\r\n            const nameArr = name.split('/');\r\n            const file = nameArr.pop();\r\n            const res = [{\r\n                path:       nameArr.join('/'),\r\n                file:       file,\r\n                stats:      meta.stats,\r\n                isDir:      false,\r\n                acl:        meta.acl || {},\r\n                modifiedAt: meta.modifiedAt,\r\n                createdAt:  meta.createdAt\r\n            }];\r\n            return tools.maybeCallbackWithError(callback, null, res);\r\n        }\r\n\r\n        // it could be dir\r\n        if (!name.endsWith('/*')) {\r\n            name += '/*';\r\n        } else if (name.endsWith('/')) {\r\n            name += '*';\r\n        }\r\n        const dirID = this.getFileId(id, name);\r\n\r\n        let keys;\r\n        try {\r\n            keys = await this._getKeysViaScan(dirID);\r\n        } catch (e) {\r\n            return tools.maybeCallbackWithError(callback, e);\r\n        }\r\n\r\n        if (!this.client) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n        }\r\n        if (!keys) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_NOT_FOUND);\r\n        }\r\n\r\n        keys = keys\r\n            .sort()\r\n            .filter(key => key.match(/\\$%\\$meta$/));\r\n\r\n        // Check permissions\r\n        let objs;\r\n        try {\r\n            objs = await this.client.mget(keys);\r\n        } catch (e) {\r\n            return tools.maybeCallbackWithError(callback, e);\r\n        }\r\n\r\n        const dontCheck =\r\n                    options.user === utils.CONSTS.SYSTEM_ADMIN_USER ||\r\n                    options.group !== utils.CONSTS.SYSTEM_ADMIN_GROUP ||\r\n                    (options.groups && options.groups.indexOf(utils.CONSTS.SYSTEM_ADMIN_GROUP) !== -1);\r\n\r\n        const keysFiltered = [];\r\n        const objsFiltered = [];\r\n        const processed = [];\r\n        const start = dirID.indexOf('$%$') + 3;\r\n        const end = '$%$meta'.length;\r\n\r\n        objs = objs || [];\r\n        for (let i = 0; i < keys.length; i++) {\r\n            try {\r\n                objs[i] = JSON.parse(objs[i]);\r\n            } catch (e) {\r\n                this.log.error(`${this.namespace} Cannot parse JSON ${keys[i]}: ${objs[i]}`);\r\n                continue;\r\n            }\r\n            if (dontCheck || utils.checkObject(objs[i], options, utils.CONSTS.ACCESS_WRITE)) {\r\n                if (!objs[i] || objs[i].virtualFile) {\r\n                    continue;\r\n                } // virtual file, ignore\r\n                keysFiltered.push(keys[i]);\r\n                objsFiltered.push(objs[i]);\r\n\r\n                const name = keys[i].substring(start, keys[i].length - end);\r\n                const nameArr = name.split('/');\r\n                const file = nameArr.pop();\r\n                processed.push({\r\n                    path:       nameArr.join('/'),\r\n                    file:       file,\r\n                    stats:      objs[i].stats,\r\n                    isDir:      false,\r\n                    acl:        objs[i].acl || {},\r\n                    modifiedAt: objs[i].modifiedAt,\r\n                    createdAt:  objs[i].createdAt\r\n                });\r\n            }\r\n        }\r\n        this._chmodFileHelper(keysFiltered, objsFiltered, options, err => {\r\n            return tools.maybeCallbackWithError(callback, err, processed);\r\n        });\r\n    }\r\n\r\n    chmodFile(id, name, options, callback) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = null;\r\n        }\r\n        options = options || {};\r\n\r\n        if (typeof name !== 'string' || !name.length || name === '/') {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_NOT_FOUND);\r\n        }\r\n\r\n        if (name[0].startsWith('/')) {\r\n            name = name.substring(1);\r\n        }\r\n\r\n        if (typeof options !== 'object') {\r\n            options = {mode: options};\r\n        }\r\n\r\n        if (options.mode === undefined) {\r\n            this.log.error(this.namespace + ' mode is not defined');\r\n            return tools.maybeCallbackWithError(callback, 'invalid parameter');\r\n        } else if (typeof options.mode === 'string') {\r\n            options.mode = parseInt(options.mode, 16);\r\n        }\r\n\r\n        this.checkFileRights(id, name, options, utils.CONSTS.ACCESS_WRITE, (err, options, meta) => {\r\n            if (err) {\r\n                return tools.maybeCallbackWithError(callback, err);\r\n            } else {\r\n                if (!options.acl.file.write) {\r\n                    return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_PERMISSION);\r\n                } else {\r\n                    return this._chmodFile(id, name, options, callback, meta);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    chmodFileAsync(id, name, options) {\r\n        return new Promise((resolve, reject) =>\r\n            this.chmodFile(id, name, options, err =>\r\n                err ? reject(err) : resolve()));\r\n    }\r\n\r\n    enableFileCache(enabled, options, callback) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = null;\r\n        }\r\n\r\n        if (options && options.acl) {\r\n            options.acl = null;\r\n        }\r\n\r\n        utils.checkObjectRights(this, null, null, options, utils.CONSTS.ACCESS_WRITE, (err, _options) => {\r\n            if (err) {\r\n                return tools.maybeCallbackWithError(callback, err);\r\n            } else {\r\n                // cache cannot be enabled\r\n                return tools.maybeCallbackWithError(callback, null, false);\r\n            }\r\n        });\r\n    }\r\n\r\n    enableFileCacheAsync(enabled, options) {\r\n        return new Promise((resolve, reject) =>\r\n            this.enableFileCache(enabled, options, (err, res) =>\r\n                err ? reject(err) : resolve(res)));\r\n    }\r\n\r\n    // -------------- OBJECT FUNCTIONS -------------------------------------------\r\n    _subscribe(pattern, options, subClient, callback) {\r\n        if (!subClient) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n        }\r\n        if (Array.isArray(pattern)) {\r\n            let count = pattern.length;\r\n            pattern.forEach(pattern => {\r\n                this.log.silly(`${this.namespace} redis psubscribe ${this.objNamespace}${pattern}`);\r\n                subClient.psubscribe(this.objNamespace + pattern, err => {\r\n                    if (!err) {\r\n                        subClient.ioBrokerSubscriptions[this.objNamespace + pattern] = true;\r\n                    }\r\n                    if (!--count) {\r\n                        return tools.maybeCallbackWithError(callback, err);\r\n                    }\r\n                });\r\n\r\n            });\r\n        } else {\r\n            this.log.silly(this.namespace + ' redis psubscribe ' + this.objNamespace + pattern);\r\n            subClient.psubscribe(this.objNamespace + pattern, err => {\r\n                if (!err) {\r\n                    subClient.ioBrokerSubscriptions[this.objNamespace + pattern] = true;\r\n                }\r\n                return tools.maybeCallbackWithError(callback, err);\r\n            });\r\n        }\r\n    }\r\n\r\n    subscribeConfig(pattern, options, callback) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = null;\r\n        }\r\n        utils.checkObjectRights(this, null, null, options, 'list', (err, options) => {\r\n            if (err) {\r\n                typeof callback === 'function' && setImmediate(() => callback(err));\r\n            } else {\r\n                return this._subscribe(pattern, options, this.subSystem, callback);\r\n            }\r\n        });\r\n    }\r\n\r\n    subscribe(pattern, options, callback) {\r\n        return this.subscribeConfig(pattern, options, callback);\r\n    }\r\n\r\n    subscribeAsync(pattern, options) {\r\n        return new Promise((resolve, reject) =>\r\n            this.subscribe(pattern, options, err =>\r\n                err ? reject(err) : resolve()));\r\n    }\r\n\r\n    subscribeUser(pattern, options, callback) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = null;\r\n        }\r\n        utils.checkObjectRights(this, null, null, options, 'list', (err, options) => {\r\n            if (err) {\r\n                typeof callback === 'function' && setImmediate(() => callback(err));\r\n            } else {\r\n                return this._subscribe(pattern, options, this.sub, callback);\r\n            }\r\n        });\r\n    }\r\n\r\n    subscribeUserAsync(pattern, options) {\r\n        return new Promise((resolve, reject) =>\r\n            this.subscribeUser(pattern, options, err =>\r\n                err ? reject(err) : resolve()));\r\n    }\r\n\r\n    _unsubscribe(pattern, options, subClient, callback) {\r\n        if (!subClient) {\r\n            return typeof callback === 'function' && setImmediate(() => callback(utils.ERRORS.ERROR_DB_CLOSED));\r\n        }\r\n        if (Array.isArray(pattern)) {\r\n            let count = pattern.length;\r\n            pattern.forEach(pattern => {\r\n                this.log.silly(this.namespace + ' redis punsubscribe ' + this.objNamespace + pattern);\r\n                subClient.punsubscribe(this.objNamespace + pattern, err => {\r\n                    if (!err && subClient.ioBrokerSubscriptions[this.objNamespace + pattern] !== undefined) {\r\n                        delete subClient.ioBrokerSubscriptions[this.objNamespace + pattern];\r\n                    }\r\n                    !--count && typeof callback === 'function' && callback(err);\r\n                });\r\n            });\r\n        } else {\r\n            this.log.silly(this.namespace + ' redis punsubscribe ' + this.objNamespace + pattern);\r\n            subClient.punsubscribe(this.objNamespace + pattern, err => {\r\n                if (!err && subClient.ioBrokerSubscriptions[this.objNamespace + pattern] !== undefined) {\r\n                    delete subClient.ioBrokerSubscriptions[this.objNamespace + pattern];\r\n                }\r\n                typeof callback === 'function' && callback(err);\r\n            });\r\n        }\r\n    }\r\n\r\n    unsubscribeConfig(pattern, options, callback) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = null;\r\n        }\r\n        utils.checkObjectRights(this, null, null, options, 'list', (err, options) => {\r\n            if (err) {\r\n                typeof callback === 'function' && setImmediate(() => callback(err));\r\n            } else {\r\n                return this._unsubscribe(pattern, options, this.subSystem, callback);\r\n            }\r\n        });\r\n    }\r\n\r\n    unsubscribe(pattern, options, callback) {\r\n        return this.unsubscribeConfig(pattern, options, callback);\r\n    }\r\n\r\n    unsubscribeAsync(pattern, options) {\r\n        return new Promise((resolve, reject) =>\r\n            this.unsubscribe(pattern, options, err =>\r\n                err ? reject(err) : resolve()));\r\n    }\r\n\r\n    unsubscribeUser(pattern, options, callback) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = null;\r\n        }\r\n        utils.checkObjectRights(this, null, null, options, 'list', (err, options) => {\r\n            if (err) {\r\n                typeof callback === 'function' && setImmediate(() => callback(err));\r\n            } else {\r\n                return this._unsubscribe(pattern, options, this.sub, callback);\r\n            }\r\n        });\r\n    }\r\n\r\n    unsubscribeUserAsync(pattern, options) {\r\n        return new Promise((resolve, reject) =>\r\n            this.unsubscribeUser(pattern, options, err =>\r\n                err ? reject(err) : resolve()));\r\n    }\r\n\r\n    async _objectHelper(keys, objs, callback) {\r\n        if (!keys || !keys.length) {\r\n            typeof callback === 'function' && callback();\r\n        } else {\r\n            if (!this.client) {\r\n                return typeof callback === 'function' && callback(utils.ERRORS.ERROR_DB_CLOSED);\r\n            }\r\n            for (const id of keys) {\r\n                const obj = objs.shift();\r\n                const message = JSON.stringify(obj);\r\n                try {\r\n                    await this.client.set(id, message);\r\n                    await this.client.publish(id, message);\r\n                } catch (e) {\r\n                    return tools.maybeCallbackWithError(callback, e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    _chownObject(pattern, options, callback) {\r\n        this.getConfigKeys(pattern, options, async (err, keys) => {\r\n            if (err) {\r\n                return tools.maybeCallbackWithError(callback, err);\r\n            }\r\n            if (!this.client) {\r\n                return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n            }\r\n\r\n            let objects;\r\n            try {\r\n                objects = await this.client.mget(keys);\r\n            } catch (e) {\r\n                return tools.maybeCallbackWithError(callback, e);\r\n            }\r\n            const filteredKeys = [];\r\n            const filteredObjs = [];\r\n            objects = objects || [];\r\n            for (let k = 0; k < keys.length; k++) {\r\n                try {\r\n                    objects[k] = JSON.parse(objects[k]);\r\n                } catch (e) {\r\n                    this.log.error(`${this.namespace} Cannot parse JSON ${keys[k]}: ${objects[k]}`);\r\n                    continue;\r\n                }\r\n                if (!utils.checkObject(objects[k], options, utils.CONSTS.ACCESS_WRITE)) {\r\n                    continue;\r\n                }\r\n                if (!objects[k].acl) {\r\n                    objects[k].acl = {\r\n                        owner:      (this.defaultNewAcl && this.defaultNewAcl.owner)      || utils.CONSTS.SYSTEM_ADMIN_USER,\r\n                        ownerGroup: (this.defaultNewAcl && this.defaultNewAcl.ownerGroup) || utils.CONSTS.SYSTEM_ADMIN_GROUP,\r\n                        object:     (this.defaultNewAcl && this.defaultNewAcl.object)     || (utils.CONSTS.ACCESS_USER_RW | utils.CONSTS.ACCESS_GROUP_READ | utils.CONSTS.ACCESS_EVERY_READ) // '0644'\r\n                    };\r\n                    if (objects[k].type === 'state') {\r\n                        objects[k].acl.state = (this.defaultNewAcl && this.defaultNewAcl.state) || (utils.CONSTS.ACCESS_USER_RW | utils.CONSTS.ACCESS_GROUP_READ | utils.CONSTS.ACCESS_EVERY_READ); // '0644'\r\n                    }\r\n                }\r\n                objects[k].acl.owner      = options.owner;\r\n                objects[k].acl.ownerGroup = options.ownerGroup;\r\n                filteredKeys.push(keys[k]);\r\n                filteredObjs.push(objects[k]);\r\n            }\r\n            this._objectHelper(filteredKeys, filteredObjs, () => {\r\n                return tools.maybeCallbackWithError(callback, null, filteredObjs);\r\n            });\r\n        }, true);\r\n    }\r\n\r\n    chownObject(pattern, options, callback) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = null;\r\n        }\r\n        options = options || {};\r\n        options.acl = null;\r\n\r\n        if (typeof options !== 'object') {\r\n            options = {owner: options};\r\n        }\r\n\r\n        if (!options.ownerGroup && options.group) {\r\n            options.ownerGroup = options.group;\r\n        }\r\n        if (!options.owner && options.user)  {\r\n            options.owner = options.user;\r\n        }\r\n\r\n        if (!options.owner) {\r\n            this.log.error(`${this.namespace} user is not defined`);\r\n            return tools.maybeCallbackWithError(callback, 'invalid parameter');\r\n        }\r\n\r\n        if (!options.ownerGroup) {\r\n            // get user group\r\n            this.getUserGroup(options.owner, (user, groups /* , permissions*/) => {\r\n                if (!groups || !groups[0]) {\r\n                    return tools.maybeCallbackWithError(callback, `user \"${options.owner}\" belongs to no group`);\r\n                } else {\r\n                    options.ownerGroup = groups[0];\r\n                }\r\n                this.chownObject(pattern, options, callback);\r\n            });\r\n            return;\r\n        }\r\n\r\n        utils.checkObjectRights(this, null, null, options, utils.CONSTS.ACCESS_WRITE, (err, options) => {\r\n            if (err) {\r\n                return tools.maybeCallbackWithError(callback, err);\r\n            } else {\r\n                if (!options.acl.object || !options.acl.object.write) {\r\n                    return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_PERMISSION);\r\n                } else {\r\n                    return this._chownObject(pattern, options, callback);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    chownObjectAsync(pattern, options) {\r\n        return new Promise((resolve, reject) =>\r\n            this.chownObject(pattern, options, (err, list) =>\r\n                err ? reject(err) : resolve(list)));\r\n    }\r\n\r\n    _chmodObject(pattern, options, callback) {\r\n        this.getConfigKeys(pattern, options, async (err, keys) => {\r\n            if (err) {\r\n                return tools.maybeCallbackWithError(callback, err);\r\n            }\r\n            if (!this.client) {\r\n                return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n            }\r\n\r\n            let objects;\r\n            try {\r\n                objects = await this.client.mget(keys);\r\n            } catch (e) {\r\n                return tools.maybeCallbackWithError(callback, e);\r\n            }\r\n\r\n            const filteredKeys = [];\r\n            const filteredObjs = [];\r\n            objects = objects || [];\r\n            for (let k = 0; k < keys.length; k++) {\r\n                try {\r\n                    objects[k] = JSON.parse(objects[k]);\r\n                } catch (e) {\r\n                    this.log.error(`${this.namespace} Cannot parse JSON ${keys[k]}: ${objects[k]}`);\r\n                    continue;\r\n                }\r\n                if (!utils.checkObject(objects[k], options, utils.CONSTS.ACCESS_WRITE)) {\r\n                    continue;\r\n                }\r\n                if (!objects[k].acl) {\r\n                    objects[k].acl = {\r\n                        owner:      (this.defaultNewAcl && this.defaultNewAcl.owner)      || utils.CONSTS.SYSTEM_ADMIN_USER,\r\n                        ownerGroup: (this.defaultNewAcl && this.defaultNewAcl.ownerGroup) || utils.CONSTS.SYSTEM_ADMIN_GROUP,\r\n                        object:     (this.defaultNewAcl && this.defaultNewAcl.object)     || (utils.CONSTS.ACCESS_USER_RW | utils.CONSTS.ACCESS_GROUP_READ | utils.CONSTS.ACCESS_EVERY_READ) // '0644'\r\n                    };\r\n                    if (objects[k].type === 'state') {\r\n                        objects[k].acl.state = (this.defaultNewAcl && this.defaultNewAcl.state) || (utils.CONSTS.ACCESS_USER_RW | utils.CONSTS.ACCESS_GROUP_READ | utils.CONSTS.ACCESS_EVERY_READ); // '0644'\r\n                    }\r\n                }\r\n                if (options.object !== undefined) {\r\n                    objects[k].acl.object = options.object;\r\n                }\r\n                if (options.state !== undefined) {\r\n                    objects[k].acl.state = options.state;\r\n                }\r\n                filteredKeys.push(keys[k]);\r\n                filteredObjs.push(objects[k]);\r\n            }\r\n            this._objectHelper(filteredKeys, filteredObjs, () => {\r\n                return tools.maybeCallbackWithError(callback, null, filteredObjs);\r\n            });\r\n        }, true);\r\n    }\r\n\r\n    chmodObject(pattern, options, callback) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = null;\r\n        }\r\n        options = options || {};\r\n        options.acl = null;\r\n\r\n        if (typeof options !== 'object') {\r\n            options = {object: options};\r\n        }\r\n\r\n        if (options.mode && !options.object) {\r\n            options.object = options.mode;\r\n        }\r\n\r\n        if (options.object === undefined) {\r\n            this.log.error(this.namespace + ' mode is not defined');\r\n            return typeof callback === 'function' && setImmediate(() => callback('invalid parameter'));\r\n        } else if (typeof options.mode === 'string') {\r\n            options.mode = parseInt(options.mode, 16);\r\n        }\r\n\r\n        utils.checkObjectRights(this, null, null, options, utils.CONSTS.ACCESS_WRITE, (err, options) => {\r\n            if (err) {\r\n                typeof callback === 'function' && setImmediate(() => callback(err));\r\n            } else {\r\n                if (!options.acl.file.write) {\r\n                    typeof callback === 'function' && setImmediate(() => callback(utils.ERRORS.ERROR_PERMISSION));\r\n                } else {\r\n                    return this._chmodObject(pattern, options, callback);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    chmodObjectAsync(pattern, options) {\r\n        return new Promise((resolve, reject) =>\r\n            this.chmodObject(pattern, options, (err, list) =>\r\n                err ? reject(err) : resolve(list)));\r\n    }\r\n\r\n    async _getObject(id, options, callback) {\r\n        if (!this.client) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n        }\r\n        if (!id || typeof id !== 'string') {\r\n            return tools.maybeCallbackWithError(callback, `invalid id ${JSON.stringify(id)}`);\r\n        }\r\n\r\n        let obj, err;\r\n        try {\r\n            obj = await this.client.get(this.objNamespace + id);\r\n        } catch (e) {\r\n            this.log.debug(`${this.namespace} redis get ${id}, error - ${e}`);\r\n            err = e;\r\n        }\r\n\r\n        try {\r\n            obj = obj ? JSON.parse(obj) : null;\r\n        } catch (e) {\r\n            this.log.warn(`${this.namespace} Cannot parse ${id} - ${obj}: ${e.message}`);\r\n        }\r\n        if (obj) {\r\n            // Check permissions\r\n            if (utils.checkObject(obj, options, utils.CONSTS.ACCESS_READ)) {\r\n                return tools.maybeCallbackWithError(callback, null, obj);\r\n            } else {\r\n                return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_PERMISSION);\r\n            }\r\n        } else {\r\n            return tools.maybeCallbackWithError(callback, err, obj);\r\n        }\r\n    }\r\n\r\n    getObject(id, options, callback) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = null;\r\n        }\r\n        if (!callback) {\r\n            return new Promise((resolve, reject) =>\r\n                this.getObject(id, options, (err, obj) =>\r\n                    err ? reject(err) : resolve(obj)));\r\n        }\r\n\r\n        if (typeof callback === 'function') {\r\n            if (options && options.acl) {\r\n                options.acl = null;\r\n            }\r\n            utils.checkObjectRights(this, null, null, options, utils.CONSTS.ACCESS_READ, (err, options) => {\r\n                if (err) {\r\n                    return tools.maybeCallbackWithError(callback, err);\r\n                } else {\r\n                    return this._getObject(id, options, callback);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    getObjectAsync(id, options) {\r\n        return new Promise((resolve, reject) =>\r\n            this.getObject(id, options, (err, obj) =>\r\n                err ? reject(err) : resolve(obj)));\r\n    }\r\n\r\n    async _getKeys(pattern, options, callback, dontModify) {\r\n        if (!this.client) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n        }\r\n        if (!pattern || typeof pattern !== 'string') {\r\n            return tools.maybeCallbackWithError(callback, `invalid pattern ${JSON.stringify(pattern)}`);\r\n        }\r\n\r\n        const r = new RegExp(tools.pattern2RegEx(pattern));\r\n        let keys;\r\n\r\n        try {\r\n            keys = await this._getKeysViaScan(this.objNamespace + pattern);\r\n        } catch (e) {\r\n            return tools.maybeCallbackWithError(callback, e);\r\n        }\r\n\r\n        if (!this.client) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n        }\r\n\r\n        const result = [];\r\n        if (keys) {\r\n            keys.sort();\r\n            const result = [];\r\n            const dontCheck =\r\n                    options.user === utils.CONSTS.SYSTEM_ADMIN_USER ||\r\n                    options.group !== utils.CONSTS.SYSTEM_ADMIN_GROUP ||\r\n                    (options.groups && options.groups.indexOf(utils.CONSTS.SYSTEM_ADMIN_GROUP) !== -1);\r\n\r\n            if (dontCheck) {\r\n                for (let i = 0; i < keys.length; i++) {\r\n                    const id = keys[i].substring(this.objNamespaceL);\r\n                    if (r.test(id)) {\r\n                        if (!dontModify) {\r\n                            result.push(id);\r\n                        } else {\r\n                            result.push(keys[i]);\r\n                        }\r\n                    }\r\n                }\r\n                return tools.maybeCallbackWithError(callback, null, result);\r\n            } else {\r\n                // Check permissions\r\n                let metas;\r\n                try {\r\n                    metas = await this.client.mget(keys);\r\n                } catch (e) {\r\n                    return tools.maybeCallbackWithError(callback, e);\r\n                }\r\n                metas = metas || [];\r\n                for (let i = 0; i < keys.length; i++) {\r\n                    try {\r\n                        metas[i] = JSON.parse(metas[i]);\r\n                    } catch (e) {\r\n                        this.log.error(`${this.namespace} Cannot parse JSON ${keys[i]}: ${metas[i]}`);\r\n                        continue;\r\n                    }\r\n\r\n                    if (r.test(keys[i]) && utils.checkObject(metas[i], options, utils.CONSTS.ACCESS_READ)) {\r\n                        if (!dontModify) {\r\n                            result.push(keys[i].substring(this.objNamespaceL));\r\n                        } else {\r\n                            result.push(keys[i]);\r\n                        }\r\n                    }\r\n                }\r\n                return tools.maybeCallbackWithError(callback, null, result);\r\n            }\r\n        } else {\r\n            return tools.maybeCallbackWithError(callback, null, result);\r\n        }\r\n    }\r\n\r\n    getKeys(pattern, options, callback, dontModify) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = null;\r\n        }\r\n        if (!callback) {\r\n            return new Promise((resolve, reject) =>\r\n                this.getKeys(pattern, options, (err, obj) =>\r\n                    err ? reject(err) : resolve(obj), dontModify));\r\n        }\r\n        if (typeof callback === 'function') {\r\n            utils.checkObjectRights(this, null, null, options, 'list', (err, options) => {\r\n                if (err) {\r\n                    typeof callback === 'function' && setImmediate(() => callback(err));\r\n                } else {\r\n                    return this._getKeys(pattern, options, callback, dontModify);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    getKeysAsync(id, options) {\r\n        return new Promise((resolve, reject) =>\r\n            this.getKeys(id, options, (err, keys) =>\r\n                err ? reject(err) : resolve(keys)));\r\n    }\r\n\r\n    getConfigKeys(pattern, options, callback, dontModify) {\r\n        return this.getKeys(pattern, options, callback, dontModify);\r\n    }\r\n\r\n    async _getObjects(keys, options, callback, dontModify) {\r\n        if (!keys) {\r\n            return tools.maybeCallbackWithError(callback, 'no keys', null);\r\n        }\r\n        if (!keys.length) {\r\n            return tools.maybeCallbackWithError(callback, null, []);\r\n        }\r\n\r\n        let _keys;\r\n        if (!dontModify) {\r\n            _keys = [];\r\n            for (let i = 0; i < keys.length; i++) {\r\n                _keys[i] = this.objNamespace + keys[i];\r\n            }\r\n        } else {\r\n            _keys = keys;\r\n        }\r\n\r\n        if (!this.client) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n        }\r\n\r\n        let objs;\r\n        try {\r\n            objs = await this.client.mget(_keys);\r\n            this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' redis mget ' + (!objs ? 0 : objs.length) + ' ' + _keys.length);\r\n        } catch (e) {\r\n            this.log.warn(`${this.namespace} redis mget ${!objs ? 0 : objs.length} ${_keys.length}, err: ${e}`);\r\n        }\r\n        let result = [];\r\n\r\n        if (objs) {\r\n            const dontCheck =\r\n                    options.user === utils.CONSTS.SYSTEM_ADMIN_USER ||\r\n                    options.group !== utils.CONSTS.SYSTEM_ADMIN_GROUP ||\r\n                    (options.groups && options.groups.indexOf(utils.CONSTS.SYSTEM_ADMIN_GROUP) !== -1);\r\n\r\n            if (!dontCheck) {\r\n                for (let i = 0; i < objs.length; i++) {\r\n                    try {\r\n                        objs[i] = JSON.parse(objs[i]);\r\n                    } catch (e) {\r\n                        this.log.error(`${this.namespace} Cannot parse JSON ${_keys[i]}: ${objs[i]}`);\r\n                        result.push({error: utils.ERRORS.ERROR_PERMISSION});\r\n                        continue;\r\n                    }\r\n                    if (utils.checkObject(objs[i], options, utils.CONSTS.ACCESS_READ)) {\r\n                        result.push(objs[i]);\r\n                    } else {\r\n                        result.push({error: utils.ERRORS.ERROR_PERMISSION});\r\n                    }\r\n                }\r\n            } else {\r\n                result = objs.map((obj, i) => {\r\n                    try {\r\n                        return JSON.parse(obj);\r\n                    } catch (e) {\r\n                        this.log.error(`${this.namespace} Cannot parse JSON ${_keys[i]}: ${obj}`);\r\n                        return null;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return tools.maybeCallbackWithError(callback, null, result);\r\n    }\r\n\r\n    getObjects(keys, options, callback, dontModify) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = null;\r\n        }\r\n        if (!callback) {\r\n            return new Promise((resolve, reject) =>\r\n                this.getObjects(keys, options, (err, objs) =>\r\n                    err ? reject(err) : resolve(objs), dontModify));\r\n        }\r\n\r\n        if (options && options.acl) {\r\n            options.acl = null;\r\n        }\r\n        if (typeof callback === 'function') {\r\n            utils.checkObjectRights(this, null, null, options, utils.CONSTS.ACCESS_READ, (err, options) => {\r\n                if (err) {\r\n                    typeof callback === 'function' && setImmediate(() => callback(err));\r\n                } else {\r\n                    return this._getObjects(keys, options, callback, dontModify);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    getObjectsAsync(id, options) {\r\n        return new Promise((resolve, reject) =>\r\n            this.getObjects(id, options, (err, objs) =>\r\n                err ? reject(err) : resolve(objs)));\r\n    }\r\n\r\n    async _getObjectsByPattern(pattern, options, callback) {\r\n        if (!pattern || typeof pattern !== 'string') {\r\n            typeof callback === 'function' && setImmediate(() => callback('invalid pattern ' + JSON.stringify(pattern)));\r\n            return;\r\n        }\r\n\r\n        if (!this.client) {\r\n            return typeof callback === 'function' && setImmediate(() => callback(utils.ERRORS.ERROR_DB_CLOSED));\r\n        }\r\n\r\n        let keys;\r\n        try {\r\n            keys = await this._getKeysViaScan(this.objNamespace + pattern);\r\n        } catch (e) {\r\n            return tools.maybeCallbackWithError(callback, e);\r\n        }\r\n        if (!this.client) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n        }\r\n\r\n        this.settings.connection.enhancedLogging && this.log.silly(`${this.namespace} redis keys ${keys.length} ${pattern}`);\r\n        this._getObjects(keys, options, callback, true);\r\n    }\r\n\r\n    getObjectsByPattern(pattern, options, callback) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = null;\r\n        }\r\n        if (!callback) {\r\n            return new Promise((resolve, reject) =>\r\n                this.getObjectsByPattern(pattern, options, (err, obj) =>\r\n                    err ? reject(err) : resolve(obj)));\r\n        }\r\n        if (options && options.acl) {\r\n            options.acl = null;\r\n        }\r\n        if (typeof callback === 'function') {\r\n            utils.checkObjectRights(this, null, null, options, utils.CONSTS.ACCESS_READ, (err, options) => {\r\n                if (err) {\r\n                    typeof callback === 'function' && setImmediate(() => callback(err));\r\n                } else {\r\n                    return this._getObjectsByPattern(pattern, options, callback);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    getObjectsByPatternAsync(pattern, options) {\r\n        return new Promise((resolve, reject) =>\r\n            this.getObjectsByPattern(pattern, options, (err, objs) =>\r\n                err ? reject(err) : resolve(objs)));\r\n    }\r\n\r\n    async _setObject(id, obj, options, callback) {\r\n        if (!id || typeof id !== 'string' || utils.regCheckId.test(id)) {\r\n            return typeof callback === 'function' && setImmediate(() => callback(`Invalid ID: ${id}`));\r\n        }\r\n\r\n        if (!obj) {\r\n            this.log.warn(this.namespace + ' setObject: Argument object is null');\r\n            return typeof callback === 'function' && setImmediate(() => callback('obj is null'));\r\n        }\r\n        if (typeof obj !== 'object') {\r\n            this.log.warn(this.namespace + ' setObject: Argument object is no object: ' + obj);\r\n            return typeof callback === 'function' && setImmediate(() => callback('obj is no object'));\r\n        }\r\n        if (!this.client) {\r\n            return typeof callback === 'function' && setImmediate(() => callback(utils.ERRORS.ERROR_DB_CLOSED));\r\n        }\r\n        // make a copy of object, because we will modify it\r\n        obj = deepClone(obj);\r\n\r\n        obj._id = id;\r\n\r\n        let oldObj;\r\n        try {\r\n            oldObj = await this.client.get(this.objNamespace + id);\r\n        } catch (e) {\r\n            return tools.maybeCallbackWithError(callback, e);\r\n        }\r\n\r\n        try {\r\n            oldObj = oldObj ? JSON.parse(oldObj) : null;\r\n        } catch (e) {\r\n            this.log.error(`${this.namespace} Cannot parse ${id} - ${oldObj}: ${e.message}`);\r\n            return tools.maybeCallbackWithError(callback, `Cannot parse ${id} - ${oldObj}: ${e.message}`);\r\n        }\r\n\r\n        if (!tools.checkNonEditable(oldObj, obj)) {\r\n            return tools.maybeCallbackWithError(callback, 'Invalid password for update of vendor information');\r\n        }\r\n\r\n        // do not delete common settings, like \"history\" or \"mobile\". It can be erased only with \"null\"\r\n        if (oldObj && oldObj.common) {\r\n            this.preserveSettings.forEach(commonSetting => {\r\n                // special case if \"custom\"\r\n                if (commonSetting === 'custom') {\r\n                    if (!oldObj.common.custom) {\r\n                        // do nothing\r\n                    } else if ((!obj.common || !obj.common.custom) && oldObj.common.custom) {\r\n                        obj.common = obj.common || {};\r\n                        obj.common.custom = oldObj.common.custom;\r\n                    } else if (obj.common && obj.common.custom && oldObj.common.custom) {\r\n                        // merge together\r\n                        Object.keys(oldObj.common.custom).forEach(attr => {\r\n                            if (obj.common.custom[attr] === null) {\r\n                                delete obj.common.custom[attr];\r\n                            } else if (obj.common.custom[attr] === undefined) {\r\n                                obj.common.custom[attr] = oldObj.common.custom[attr];\r\n                            }\r\n                        });\r\n                    }\r\n                    // remove custom if no one attribute inside\r\n                    if (obj.common && obj.common.custom) {\r\n                        Object.keys(obj.common.custom).forEach(attr => {\r\n                            if (obj.common.custom[attr] === null) {\r\n                                delete obj.common.custom[attr];\r\n                            }\r\n                        });\r\n                        if (!Object.keys(obj.common.custom).length) {\r\n                            delete obj.common.custom;\r\n                        }\r\n                    }\r\n                } else {\r\n                    // remove settings if desired\r\n                    if (obj.common && obj.common[commonSetting] === null) {\r\n                        delete obj.common[commonSetting];\r\n                    } else\r\n                    // if old setting present and new setting is absent\r\n                    if (oldObj.common[commonSetting] !== undefined && (!obj.common || obj.common[commonSetting] === undefined)) {\r\n                        obj.common = obj.common || {};\r\n                        obj.common[commonSetting] = oldObj.common[commonSetting];\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        if (obj.common && obj.common.alias && obj.common.alias.id) {\r\n            if (typeof obj.common.alias.id === 'object') {\r\n                if (typeof obj.common.alias.id.write !== 'string' || typeof obj.common.alias.id.read !== 'string') {\r\n                    return typeof callback === 'function' && callback('Invalid alias ID');\r\n                }\r\n\r\n                if (obj.common.alias.id.write.startsWith('alias.') || obj.common.alias.id.read.startsWith('alias.')) {\r\n                    return typeof callback === 'function' && callback('Cannot make alias on alias');\r\n                }\r\n            } else {\r\n                if (typeof obj.common.alias.id !== 'string') {\r\n                    return typeof callback === 'function' && callback('Invalid alias ID');\r\n                }\r\n\r\n                if (obj.common.alias.id.startsWith('alias.')) {\r\n                    return typeof callback === 'function' && callback('Cannot make alias on alias');\r\n                }\r\n            }\r\n        }\r\n\r\n        if (oldObj && oldObj.acl && !obj.acl) {\r\n            obj.acl = oldObj.acl;\r\n        }\r\n\r\n        // add user default rights\r\n        if (this.defaultNewAcl && !obj.acl) {\r\n            obj.acl = deepClone(this.defaultNewAcl);\r\n            delete obj.acl.file;\r\n            if (obj.type !== 'state') {\r\n                delete obj.acl.state;\r\n            }\r\n            // take the owner as current user\r\n            if (options.user) {\r\n                obj.acl.owner = options.user;\r\n            }\r\n            // take the group as current user's group\r\n            if (options.group) {\r\n                obj.acl.ownerGroup = options.group;\r\n            } else  {\r\n                obj.acl.ownerGroup = null;\r\n                return this.getUserGroup(obj.acl.owner, async (user, groups /* , permissions */) => {\r\n                    if (!groups || !groups[0]) {\r\n                        options.group = (this.defaultNewAcl && this.defaultNewAcl.ownerGroup) || utils.CONSTS.SYSTEM_ADMIN_GROUP;\r\n                    } else {\r\n                        options.group = groups[0];\r\n                    }\r\n                    obj.acl.ownerGroup = options.group;\r\n                    const message = JSON.stringify(obj);\r\n                    try {\r\n                        await this.client.set(this.objNamespace + id, message);\r\n\r\n                        // object updated -> if type changed to meta -> cache\r\n                        if (oldObj && oldObj.type === 'meta' && this.existingMetaObjects[id] === false) {\r\n                            this.existingMetaObjects[id] = true;\r\n                        }\r\n\r\n                        //this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' redis publish ' + this.objNamespace + id + ' ' + message);\r\n                        await this.client.publish(this.objNamespace + id, message);\r\n\r\n                        return tools.maybeCallbackWithError(callback, null, {id});\r\n                    } catch (e) {\r\n                        return tools.maybeCallbackWithError(callback, e, {id});\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        if (this.defaultNewAcl && obj.acl && !obj.acl.ownerGroup && options.group) {\r\n            obj.acl.ownerGroup = options.group;\r\n        }\r\n\r\n        const message = JSON.stringify(obj);\r\n        try {\r\n            await this.client.set(this.objNamespace + id, message);\r\n            //this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' redis publish ' + this.objNamespace + id + ' ' + message);\r\n            // object updated -> if type changed to meta -> cache\r\n            if (oldObj && oldObj.type === 'meta' && this.existingMetaObjects[id] === false) {\r\n                this.existingMetaObjects[id] = true;\r\n            }\r\n\r\n            await this.client.publish(this.objNamespace + id, message);\r\n\r\n            return tools.maybeCallbackWithError(callback, null, {id});\r\n        } catch (e) {\r\n            return tools.maybeCallbackWithError(callback, e, {id});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * set anew or update object\r\n     *\r\n     * This function writes the object into DB\r\n     *\r\n     * @alias setObject\r\n     * @memberof objectsInMemServer\r\n     * @param {string} id ID of the object\r\n     * @param {object} obj\r\n     * @param {object} options options for access control are optional\r\n     * @param {function} callback return function\r\n     */\r\n    setObject(id, obj, options, callback) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = null;\r\n        }\r\n        if (!callback) {\r\n            return new Promise((resolve, reject) =>\r\n                this.setObject(id, obj, options, (err, res) =>\r\n                    err ? reject(err) : resolve(res)));\r\n        }\r\n        if (options && options.acl) {\r\n            options.acl = null;\r\n        }\r\n\r\n        utils.checkObjectRights(this, null, null, options, utils.CONSTS.ACCESS_WRITE, (err, options) => {\r\n            if (err) {\r\n                typeof callback === 'function' && setImmediate(() => callback(err));\r\n            } else {\r\n                return this._setObject(id, obj, options, callback);\r\n            }\r\n        });\r\n    }\r\n\r\n    setObjectAsync(id, obj, options) {\r\n        return new Promise((resolve, reject) =>\r\n            this.setObject(id, obj, options, (err, res) =>\r\n                err ? reject(err) : resolve(res)));\r\n    }\r\n\r\n    async _delObject(id, options, callback) {\r\n        if (!id || typeof id !== 'string' || utils.regCheckId.test(id)) {\r\n            return tools.maybeCallbackWithError(callback, `Invalid ID: ${id}`);\r\n        }\r\n        if (!this.client) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n        }\r\n\r\n        // read object\r\n        let oldObj;\r\n        try {\r\n            oldObj = await this.client.get(this.objNamespace + id);\r\n        } catch (e) {\r\n            this.log.warn(`${this.namespace} redis get ${id}, error - ${e}`);\r\n        }\r\n\r\n        if (!oldObj) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_NOT_FOUND);\r\n        }\r\n\r\n        try {\r\n            oldObj = oldObj ? JSON.parse(oldObj) : null;\r\n        } catch (e) {\r\n            this.log.warn(`${this.namespace} Cannot parse ${id} - ${oldObj}: ${e.message}`);\r\n        }\r\n\r\n        if (!utils.checkObject(oldObj, options, utils.CONSTS.ACCESS_WRITE)) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_PERMISSION);\r\n        } else {\r\n            try {\r\n                await this.client.del(this.objNamespace + id);\r\n                // object has been deleted -> remove from cached meta if there\r\n                if (this.existingMetaObjects[id]) {\r\n                    this.existingMetaObjects[id] = false;\r\n                }\r\n                //this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' redis publish ' + this.objNamespace + id + ' null');\r\n                await this.client.publish(this.objNamespace + id, 'null');\r\n                return tools.maybeCallback(callback);\r\n            } catch (e) {\r\n                return tools.maybeCallbackWithError(callback, e);\r\n            }\r\n        }\r\n    }\r\n\r\n    delObject(id, options, callback) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = null;\r\n        }\r\n        if (!callback) {\r\n            return new Promise((resolve, reject) =>\r\n                this.delObject(id, options, (err, obj) =>\r\n                    err ? reject(err) : resolve(obj)));\r\n        }\r\n\r\n        if (options && options.acl) {\r\n            options.acl = null;\r\n        }\r\n        utils.checkObjectRights(this, null, null, options, utils.CONSTS.ACCESS_DELETE, (err, options) => {\r\n            if (err) {\r\n                return tools.maybeCallbackWithError(callback, err);\r\n            } else {\r\n                return this._delObject(id, options, callback);\r\n            }\r\n        });\r\n    }\r\n\r\n    delObjectAsync(id, options) {\r\n        return new Promise((resolve, reject) =>\r\n            this.delObject(id, options, err =>\r\n                err ? reject(err) : resolve()));\r\n    }\r\n\r\n    // this function is very ineffective. Because reads all objects and then process them\r\n    async _applyViewFunc(func, params, options, callback) {\r\n        if (!this.client) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n        }\r\n        const result = {\r\n            rows: []\r\n        };\r\n\r\n        // filters objs which are already present in array by property 'id'\r\n        const filterDuplicates = arr => {\r\n            const included = {};\r\n            return arr.filter(obj => {\r\n                if (included[obj.id]) {\r\n                    return false;\r\n                } else {\r\n                    included[obj.id] = true;\r\n                    return true;\r\n                }\r\n            });\r\n        };\r\n\r\n        params = params || {};\r\n        params.startkey = params.startkey || '';\r\n        params.endkey   = params.endkey   || '\\u9999';\r\n        const wildcardPos = params.endkey.indexOf('\\u9999');\r\n        let wildCardLastPos = true;\r\n        if (wildcardPos !== -1 && wildcardPos !== params.endkey.length - 1) {\r\n            wildCardLastPos = false; // TODO do in LUA\r\n        }\r\n        let m;\r\n\r\n        // if start and and end keys are equal modify end key\r\n        if (params.startkey === params.endkey) {\r\n            params.endkey = params.endkey + '\\u0000';\r\n        }\r\n\r\n        // filter by type\r\n        if (wildCardLastPos && func && func.map && this.scripts.filter && (m = func.map.match(/if\\s\\(doc\\.type\\s?===?\\s?'(\\w+)'\\)\\semit\\(([^,]+),\\s?doc\\s?\\)/))) {\r\n            let cursor = '0';\r\n            let filterRequired = true;\r\n            do {\r\n                if (!this.client) {\r\n                    return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n                }\r\n\r\n                let objs;\r\n                try {\r\n                    objs = await this.client.evalsha([this.scripts.filter, 5, this.objNamespace, params.startkey, params.endkey, m[1], cursor]);\r\n                } catch (e) {\r\n                    this.log.warn(`${this.namespace} Cannot get view: ${e}`);\r\n                }\r\n                objs = objs || [];\r\n                // if real redis we will have e.g. [[objs..], '0'], else [{}, .., {}]\r\n                if (Array.isArray(objs[0])) {\r\n                    cursor = objs[1] || '0';\r\n                    objs = objs[0];\r\n                } else {\r\n                    cursor = '0';\r\n                    filterRequired = false;\r\n                }\r\n\r\n                const currRows = objs.map(obj => {\r\n                    try {\r\n                        obj = JSON.parse(obj);\r\n                    } catch (e) {\r\n                        this.log.error(`${this.namespace} Cannot parse JSON: ${obj}`);\r\n                        return {id: 'parseError', value: null};\r\n                    }\r\n                    if (m[2] && m[2].trim() === 'doc._id') {\r\n                        return {id: obj._id, value: obj};\r\n                    } else if (m[2] && m[2].trim() === 'doc.common.name' && obj.common) {\r\n                        return {id: obj.common.name, value: obj};\r\n                    } else {\r\n                        this.log.error(`${this.namespace} Cannot filter \"${m[2]}\": ${JSON.stringify(obj)}`);\r\n                        return {id: 'parseError', value: null};\r\n                    }\r\n                });\r\n                if (currRows.length) {\r\n                    result.rows = [...result.rows, ...currRows];\r\n                } // endIf\r\n            } while (cursor !== '0');\r\n\r\n            // Now we have all objects -> calculate max if desired\r\n            if (func.reduce === '_stats') {\r\n                let max = null;\r\n                for (let i = 0; i < result.rows.length; i++) {\r\n                    if (max === null || result.rows[i].value > max) {\r\n                        max = result.rows[i].value;\r\n                    }\r\n                }\r\n                if (max !== null) {\r\n                    result.rows = [{id: '_stats', value: {max: max}}];\r\n                } else {\r\n                    result.rows = [];\r\n                }\r\n            }\r\n\r\n            // apply filter if needed\r\n            result.rows = filterRequired ? filterDuplicates(result.rows) : result.rows;\r\n            return tools.maybeCallbackWithError(callback, null, result);\r\n        } else\r\n        // filter by script\r\n        if (wildCardLastPos && func && func.map && this.scripts.script && func.map.indexOf('doc.common.engineType') !== -1) {\r\n            let cursor = '0';\r\n            let filterRequired = true;\r\n            do {\r\n                if (!this.client) {\r\n                    return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n                }\r\n                let objs;\r\n                try {\r\n                    objs = await this.client.evalsha([this.scripts.script, 4, this.objNamespace, params.startkey, params.endkey, cursor]);\r\n                } catch (e) {\r\n                    this.log.warn(`${this.namespace} Cannot get view: ${e}`);\r\n                }\r\n                // if real redis we will have e.g. [[objs..], '0'], else [{}, .., {}]\r\n                if (Array.isArray(objs[0])) {\r\n                    cursor = objs[1] || '0';\r\n                    objs = objs[0];\r\n                } else {\r\n                    cursor = '0';\r\n                    filterRequired = false;\r\n                }\r\n\r\n                const currRows = objs.map(obj => {\r\n                    try {\r\n                        obj = JSON.parse(obj);\r\n                    } catch (e) {\r\n                        this.log.error(`${this.namespace} Cannot parse JSON: ${obj}`);\r\n                        return {id: 'parseError', value: null};\r\n                    }\r\n                    return {id: obj._id, value: obj};\r\n                });\r\n                if (currRows.length) {\r\n                    result.rows = [...result.rows, ...currRows];\r\n                } // endIf\r\n            } while (cursor !== '0');\r\n\r\n            // apply filter if needed\r\n            result.rows = filterRequired ? filterDuplicates(result.rows) : result.rows;\r\n            return tools.maybeCallbackWithError(callback, null, result);\r\n        } else\r\n        // filter by hm-rega programs\r\n        if (wildCardLastPos && func && func.map && this.scripts.programs && func.map.indexOf('doc.native.TypeName === \\'PROGRAM\\'') !== -1) {\r\n            let cursor = '0';\r\n            let filterRequired = true;\r\n            do {\r\n                if (!this.client) {\r\n                    return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n                }\r\n\r\n                let objs;\r\n                try {\r\n                    objs = await this.client.evalsha([this.scripts.programs, 4, this.objNamespace, params.startkey, params.endkey, cursor]);\r\n                } catch (e) {\r\n                    this.log.warn(`${this.namespace} Cannot get view: ${e}`);\r\n                }\r\n                // if real redis we will have e.g. [[objs..], '0'], else [{}, .., {}]\r\n                if (Array.isArray(objs[0])) {\r\n                    cursor = objs[1] || '0';\r\n                    objs = objs[0];\r\n                } else {\r\n                    cursor = '0';\r\n                    filterRequired = false;\r\n                }\r\n\r\n                const currRows = objs.map(obj => {\r\n                    try {\r\n                        obj = JSON.parse(obj);\r\n                    } catch (e) {\r\n                        this.log.error(`${this.namespace} Cannot parse JSON: ${obj}`);\r\n                        return {id: 'parseError', value: null};\r\n                    }\r\n                    return {id: obj._id, value: obj};\r\n                });\r\n                if (currRows.length) {\r\n                    result.rows = [...result.rows, ...currRows];\r\n                } // endIf\r\n            } while(cursor !== '0');\r\n\r\n            // apply filter if needed\r\n            result.rows = filterRequired ? filterDuplicates(result.rows) : result.rows;\r\n            return tools.maybeCallbackWithError(callback, null, result);\r\n        } else\r\n        // filter by hm-rega variables\r\n        if (wildCardLastPos && func && func.map && this.scripts.variables && func.map.indexOf('doc.native.TypeName === \\'ALARMDP\\'') !== -1) {\r\n            let cursor = '0';\r\n            let filterRequired = true;\r\n            do {\r\n                if (!this.client) {\r\n                    return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n                }\r\n\r\n                let objs;\r\n                try {\r\n                    objs = await this.client.evalsha([this.scripts.variables, 4, this.objNamespace, params.startkey, params.endkey, cursor]);\r\n                } catch (e) {\r\n                    this.log.warn(`${this.namespace} Cannot get view ${e}`);\r\n                }\r\n                // if real redis we will have e.g. [[objs..], '0'], else [{}, .., {}]\r\n                if (Array.isArray(objs[0])) {\r\n                    cursor = objs[1] || '0';\r\n                    objs = objs[0];\r\n                } else {\r\n                    cursor = '0';\r\n                    filterRequired = false;\r\n                }\r\n\r\n                const currRows = objs.map(obj => {\r\n                    try {\r\n                        obj = JSON.parse(obj);\r\n                    } catch (e) {\r\n                        this.log.error(`${this.namespace} Cannot parse JSON: ${obj}`);\r\n                        return {id: 'parseError', value: null};\r\n                    }\r\n                    return {id: obj._id, value: obj};\r\n                });\r\n                if (currRows.length) {\r\n                    result.rows = [...result.rows, ...currRows];\r\n                } // endIf\r\n            } while (cursor !== '0');\r\n\r\n            // apply filter if needed\r\n            result.rows = filterRequired ? filterDuplicates(result.rows) : result.rows;\r\n            typeof callback === 'function' && callback(null, result);\r\n        } else\r\n        // filter by custom, redis also returns if common.custom is not present\r\n        if (wildCardLastPos && func && func.map && this.scripts.custom && func.map.indexOf('doc.common.custom') !== -1) {\r\n            let cursor = '0';\r\n            let filterRequired = true;\r\n            do {\r\n                if (!this.client) {\r\n                    return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n                }\r\n                let objs;\r\n                try {\r\n                    objs = await this.client.evalsha([this.scripts.custom, 4, this.objNamespace, params.startkey, params.endkey, cursor]);\r\n                } catch (e) {\r\n                    this.log.warn(`${this.namespace} Cannot get view: ${e}`);\r\n                }\r\n                // if real redis we will have e.g. [[objs..], '0'], else [{}, .., {}]\r\n                if (Array.isArray(objs[0])) {\r\n                    cursor = objs[1] || '0';\r\n                    objs = objs[0];\r\n                } else {\r\n                    cursor = '0';\r\n                    filterRequired = false;\r\n                }\r\n\r\n                objs.forEach(obj => {\r\n                    try {\r\n                        obj = JSON.parse(obj);\r\n                    } catch (e) {\r\n                        this.log.error(`${this.namespace} Cannot parse JSON: ${obj}`);\r\n                    }\r\n                    if (obj.common && obj.common.custom) {\r\n                        result.rows.push({id: obj._id, value: obj.common.custom});\r\n                    }\r\n                });\r\n            } while (cursor !== '0');\r\n\r\n            // apply filter if needed\r\n            result.rows = filterRequired ? filterDuplicates(result.rows) : result.rows;\r\n            return tools.maybeCallbackWithError(callback, null, result);\r\n        } else {\r\n            this.log.debug(`${this.namespace} No suitable Lua script, fallback to keys!: ${func.map}`);\r\n\r\n            let searchKeys = this.objNamespace + '*';\r\n            if (wildcardPos !== -1) { // Wildcard included\r\n                searchKeys = this.objNamespace + params.endkey.replace(/\\u9999/g, '*');\r\n            }\r\n\r\n            let keys;\r\n            try {\r\n                keys = await this._getKeysViaScan(searchKeys);\r\n            } catch (e) {\r\n                return tools.maybeCallbackWithError(callback, e);\r\n            }\r\n\r\n            if (!this.client) {\r\n                return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n            }\r\n\r\n            const endAfterWildcard = params.endkey.substr(wildcardPos + 1);\r\n            params.startkey = this.objNamespace + params.startkey;\r\n            params.endkey   = this.objNamespace + params.endkey;\r\n\r\n            keys = keys.sort().filter(key => {\r\n                if (key && !utils.regCheckId.test(key)) {\r\n                    if (params && wildcardPos > 0) {\r\n                        if (params.startkey && key < params.startkey) {\r\n                            return false;\r\n                        }\r\n                        if (params.endkey   && key > params.endkey)   {\r\n                            return false;\r\n                        }\r\n                    } else\r\n                    if (params && wildcardPos === 0) {\r\n                        if (!key.endsWith(endAfterWildcard)) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            });\r\n\r\n            let objs;\r\n            try {\r\n                objs = await this.client.mget(keys);\r\n            } catch {\r\n                //ignore\r\n            }\r\n            // eslint-disable-next-line no-unused-vars\r\n            const _emit_ = (id, obj) => {\r\n                result.rows.push({id: id, value: obj});\r\n            };\r\n\r\n            const f = eval('(' + func.map.replace(/^function\\(([a-z0-9A-Z_]+)\\)/g, 'function($1, emit)') + ')');\r\n\r\n            objs = objs || [];\r\n            for (let i = 0; i < keys.length; i++) {\r\n                try {\r\n                    objs[i] = JSON.parse(objs[i]);\r\n                } catch (e) {\r\n                    this.log.error(`${this.namespace} Cannot parse JSON ${keys[i]}: ${objs[i]}`);\r\n                    continue;\r\n                }\r\n                if (!utils.checkObject(objs[i], options, utils.CONSTS.ACCESS_READ)) {\r\n                    continue;\r\n                }\r\n\r\n                if (objs[i]) {\r\n                    try {\r\n                        f(objs[i], _emit_);\r\n                    } catch (e) {\r\n                        this.log.error(`${this.namespace} Cannot execute map: ${e.message}`);\r\n                    }\r\n                }\r\n            }\r\n            // Calculate max\r\n            if (func.reduce === '_stats') {\r\n                let max = null;\r\n                for (let i = 0; i < result.rows.length; i++) {\r\n                    if (max === null || result.rows[i].value > max) {\r\n                        max = result.rows[i].value;\r\n                    }\r\n                }\r\n                if (max !== null) {\r\n                    result.rows = [{id: '_stats', value: {max: max}}];\r\n                } else {\r\n                    result.rows = [];\r\n                }\r\n            }\r\n            return tools.maybeCallbackWithError(callback, null, result);\r\n        }\r\n    }\r\n\r\n    _applyView(func, params, options, callback) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = null;\r\n        }\r\n        if (!callback) {\r\n            return new Promise((resolve, reject) =>\r\n                this._applyView(func, params, options, (err, obj) =>\r\n                    err ? reject(err) : resolve(obj)));\r\n        }\r\n\r\n        if (options && options.acl) {\r\n            options.acl = null;\r\n        }\r\n\r\n        if (typeof callback === 'function') {\r\n            utils.checkObjectRights(this, null, null, options, 'list', (err, options) => {\r\n                if (err) {\r\n                    typeof callback === 'function' && callback(err);\r\n                } else {\r\n                    return this._applyViewFunc(func, params, options, callback);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    async _getObjectView(design, search, params, options, callback) {\r\n        if (!this.client) {\r\n            return typeof callback === 'function' && setImmediate(() => callback(utils.ERRORS.ERROR_DB_CLOSED));\r\n        }\r\n\r\n        let obj;\r\n        try {\r\n            obj = await this.client.get(this.objNamespace + '_design/' + design);\r\n        } catch (e) {\r\n            this.log.error(`${this.namespace} Cannot find view \"${design}\" for search \"${search}\" : ${e}`);\r\n            return tools.maybeCallbackWithError(callback, new Error(`Cannot find view \"${design}\"`));\r\n        }\r\n\r\n        if (obj) {\r\n            try {\r\n                obj = JSON.parse(obj);\r\n            } catch (e) {\r\n                this.log.error(`${this.namespace} Cannot parse JSON: ${obj}`);\r\n                return tools.maybeCallbackWithError(callback, new Error(`Cannot parse JSON: \"_design/${design}\" / \"${obj}\"`));\r\n            }\r\n\r\n            if (obj.views && obj.views[search]) {\r\n                return this._applyViewFunc(obj.views[search], params, options, callback);\r\n            } else {\r\n                this.log.error(`${this.namespace} Cannot find search \"${search}\" in \"${design}\"`);\r\n                return tools.maybeCallbackWithError(callback, new Error(`Cannot find search \"${search}\" in \"${design}\"`));\r\n            }\r\n        } else {\r\n            this.log.error(`${this.namespace} Cannot find view \"${design}\" for search \"${search}\"`);\r\n            return tools.maybeCallbackWithError(callback, new Error(`Cannot find view \"${design}\"`));\r\n        }\r\n    }\r\n\r\n    getObjectView(design, search, params, options, callback) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = null;\r\n        }\r\n        if (!callback) {\r\n            return new Promise((resolve, reject) =>\r\n                this.getObjectView(design, search, params, options, (err, obj) =>\r\n                    err ? reject(err) : resolve(obj)));\r\n        }\r\n\r\n        if (options && options.acl) {\r\n            options.acl = null;\r\n        }\r\n\r\n        if (typeof callback === 'function') {\r\n            utils.checkObjectRights(this, null, null, options, 'list', (err, options) => {\r\n                if (err) {\r\n                    typeof callback === 'function' && setImmediate(() => callback(err));\r\n                } else {\r\n                    return this._getObjectView(design, search, params, options, callback);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    getObjectViewAsync(design, search, params, options) {\r\n        return new Promise((resolve, reject) =>\r\n            this.getObjectView(design, search, params, options, (err, arr) =>\r\n                err ? reject(err) : resolve(arr)));\r\n    }\r\n\r\n    async _getObjectList(params, options, callback) {\r\n        if (!this.client) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n        }\r\n        //params = {startkey, endkey, include_docs}\r\n        params = params || {};\r\n        params.startkey = params.startkey || '';\r\n        params.endkey = params.endkey || '\\u9999';\r\n        const pattern = (params.endkey.substring(0, params.startkey.length) === params.startkey) ? this.objNamespace + params.startkey + '*' : this.objNamespace + '*';\r\n\r\n        // todo: use lua script for this\r\n        let keys;\r\n        try {\r\n            keys = await this._getKeysViaScan(pattern);\r\n        } catch (e) {\r\n            return tools.maybeCallbackWithError(callback, e);\r\n        }\r\n\r\n        if (!this.client) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n        }\r\n\r\n        const _keys = [];\r\n        for (let i = 0; i < keys.length; i++) {\r\n            const id = keys[i].substring(this.objNamespaceL);\r\n            if (params.startkey && id < params.startkey) {\r\n                continue;\r\n            }\r\n            if (params.endkey && id > params.endkey) {\r\n                continue;\r\n            }\r\n            if (!id || utils.regCheckId.test(id) || id.match(/\\|file\\$%\\$/)) {\r\n                continue;\r\n            }\r\n            if (!params.include_docs && id[0] === '_') {\r\n                continue;\r\n            }\r\n            _keys.push(keys[i]);\r\n        }\r\n        _keys.sort();\r\n        let objs;\r\n        try {\r\n            objs = await this.client.mget(_keys);\r\n        } catch {\r\n            // ignore\r\n        }\r\n        // return rows with id and doc\r\n        const result = {\r\n            rows: []\r\n        };\r\n        if (objs) {\r\n            for (let r = 0; r < objs.length; r++) {\r\n                try {\r\n                    objs[r] = JSON.parse(objs[r]);\r\n                } catch (e) {\r\n                    this.log.error(`${this.namespace} Cannot parse JSON ${_keys[r]}: ${objs[r]}`);\r\n                    continue;\r\n                }\r\n\r\n                if (!objs[r] || !utils.checkObject(objs[r], options, utils.CONSTS.ACCESS_READ)) {\r\n                    continue;\r\n                }\r\n                result.rows.push({id: objs[r]._id, value: objs[r], doc: objs[r]});\r\n            }\r\n        }\r\n        return tools.maybeCallbackWithError(callback, null, result);\r\n    }\r\n\r\n    getObjectList(params, options, callback) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = null;\r\n        }\r\n        if (!callback) {\r\n            return new Promise((resolve, reject) =>\r\n                this.getObjectList(params, options, (err, obj) =>\r\n                    err ? reject(err) : resolve(obj)));\r\n        }\r\n\r\n        if (options && options.acl) {\r\n            options.acl = null;\r\n        }\r\n\r\n        if (typeof callback === 'function') {\r\n            utils.checkObjectRights(this, null, null, options, 'list', (err, options) => {\r\n                if (err) {\r\n                    typeof callback === 'function' && setImmediate(() => callback(err));\r\n                } else {\r\n                    return this._getObjectList(params, options, callback);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    getObjectListAsync(params, options) {\r\n        return new Promise((resolve, reject) =>\r\n            this.getObjectList(params, options, (err, arr) =>\r\n                err ? reject(err) : resolve(arr)));\r\n    }\r\n\r\n    // could be optimised, to read object only once. Now it will read 3 times\r\n    async _extendObject(id, obj, options, callback, _iteration) {\r\n        if (!id || typeof id !== 'string' || utils.regCheckId.test(id)) {\r\n            return typeof callback === 'function' && setImmediate(() => callback(`Invalid ID: ${id}`));\r\n        }\r\n        if (!this.client) {\r\n            return typeof callback === 'function' && setImmediate (() => callback(utils.ERRORS.ERROR_DB_CLOSED));\r\n        }\r\n\r\n        let oldObj;\r\n        try {\r\n            oldObj = await this.client.get(this.objNamespace + id);\r\n        } catch (e) {\r\n            return tools.maybeCallbackWithError(callback, e);\r\n        }\r\n\r\n        try {\r\n            oldObj = oldObj ? JSON.parse(oldObj) : null;\r\n        } catch (e) {\r\n            this.log.error(`${this.namespace} Cannot parse JSON ${id}: ${oldObj}`);\r\n            oldObj = null;\r\n            return typeof callback === 'function' && callback(utils.ERRORS.ERROR_PERMISSION);\r\n        }\r\n        if (!utils.checkObject(oldObj, options, utils.CONSTS.ACCESS_WRITE)) {\r\n            return typeof callback === 'function' && callback(utils.ERRORS.ERROR_PERMISSION);\r\n        }\r\n\r\n        let _oldObj;\r\n        if (oldObj && oldObj.nonEdit) {\r\n            // copy object\r\n            _oldObj = deepClone(oldObj);\r\n        }\r\n\r\n        oldObj = oldObj || {};\r\n        oldObj = extend(true, oldObj, deepClone(obj)); // copy here to prevent \"sandboxed\" objects from JavaScript adapter\r\n        oldObj._id = id;\r\n\r\n        // add user default rights\r\n        if (this.defaultNewAcl && !oldObj.acl) {\r\n            oldObj.acl = deepClone(this.defaultNewAcl);\r\n            delete oldObj.acl.file;\r\n            if (oldObj.type !== 'state') {\r\n                delete oldObj.acl.state;\r\n            }\r\n\r\n            if (options.owner) {\r\n                oldObj.acl.owner = options.owner;\r\n\r\n                if (!options.ownerGroup) {\r\n                    oldObj.acl.ownerGroup = null;\r\n                    return this.getUserGroup(options.owner, (user, groups /*, permissions */) => {\r\n                        if (!groups || !groups[0]) {\r\n                            options.ownerGroup = (this.defaultNewAcl && this.defaultNewAcl.ownerGroup) || utils.CONSTS.SYSTEM_ADMIN_GROUP;\r\n                        } else {\r\n                            options.ownerGroup = groups[0];\r\n                        }\r\n                        this._extendObject(id, obj, options, callback);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.defaultNewAcl && options.ownerGroup && oldObj.acl && !oldObj.acl.ownerGroup) {\r\n            oldObj.acl.ownerGroup = options.ownerGroup;\r\n        }\r\n\r\n        if (obj.common && obj.common.alias && obj.common.alias.id) {\r\n            if (typeof obj.common.alias.id === 'object') {\r\n                if (typeof obj.common.alias.id.write !== 'string' || typeof obj.common.alias.id.read !== 'string') {\r\n                    return typeof callback === 'function' && callback('Invalid alias ID');\r\n                }\r\n\r\n                if (obj.common.alias.id.write.startsWith('alias.') || obj.common.alias.id.read.startsWith('alias.')) {\r\n                    return typeof callback === 'function' && callback('Cannot make alias on alias');\r\n                }\r\n            } else {\r\n                if (typeof obj.common.alias.id !== 'string') {\r\n                    return typeof callback === 'function' && callback('Invalid alias ID');\r\n                }\r\n\r\n                if (obj.common.alias.id.startsWith('alias.')) {\r\n                    return typeof callback === 'function' && callback('Cannot make alias on alias');\r\n                }\r\n            }\r\n        }\r\n\r\n        if (_oldObj && !tools.checkNonEditable(_oldObj, oldObj)) {\r\n            return typeof callback === 'function' && callback('Invalid password for update of vendor information');\r\n        }\r\n        const message = JSON.stringify(oldObj);\r\n\r\n        try {\r\n            await this.client.set(this.objNamespace + id, message);\r\n\r\n            // extended -> if its now type meta and currently marked as not -> cache\r\n            if (this.existingMetaObjects[id] === false && oldObj && oldObj.type === 'meta') {\r\n                this.existingMetaObjects[id] = true;\r\n            }\r\n            //this.settings.connection.enhancedLogging && this.log.silly(this.namespace + ' redis publish ' + this.objNamespace + id + ' ' + message);\r\n            await this.client.publish(this.objNamespace + id, message);\r\n            return tools.maybeCallbackWithError(callback, null, {id: id, value: oldObj}, id);\r\n        } catch (e) {\r\n            return tools.maybeCallbackWithError(callback, e);\r\n        }\r\n    }\r\n\r\n    extendObject(id, obj, options, callback) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = null;\r\n        }\r\n        if (!callback) {\r\n            return new Promise((resolve, reject) =>\r\n                this.extendObject(id, obj, options, (err, res) =>\r\n                    err ? reject(err) : resolve(res)));\r\n        }\r\n\r\n        if (options && options.acl) {\r\n            options.acl = null;\r\n        }\r\n\r\n        utils.checkObjectRights(this, null, null, options, utils.CONSTS.ACCESS_WRITE, (err, options) => {\r\n            if (err) {\r\n                typeof callback === 'function' && setImmediate(() => callback(err));\r\n            } else {\r\n                return this._extendObject(id, obj, options, callback);\r\n            }\r\n        });\r\n    }\r\n\r\n    extendObjectAsync(id, obj, options) {\r\n        return new Promise((resolve, reject) =>\r\n            this.extendObject(id, obj, options, (err, res) =>\r\n                err ? reject(err) : resolve(res)));\r\n    }\r\n\r\n    setConfig(id, obj, options, callback) {\r\n        return this.setObject(id, obj, options, callback);\r\n    }\r\n\r\n    delConfig(id, options, callback) {\r\n        return this.delObject(id, options, callback);\r\n    }\r\n\r\n    getConfig(id, options, callback) {\r\n        return this.getObject(id, options, callback);\r\n    }\r\n\r\n    getConfigs(keys, options, callback, dontModify) {\r\n        return this.getObjects(keys, options, callback, dontModify);\r\n    }\r\n\r\n    _findObject(idOrName, type, options, callback) {\r\n        this._getObject(idOrName, options, (err, obj) => {\r\n            // Assume it is ID\r\n            if (obj && utils.checkObject(obj, options, utils.CONSTS.ACCESS_READ) && (!type || (obj.common && obj.common.type === type))) {\r\n                return tools.maybeCallbackWithError(callback, null, idOrName, obj.common.name);\r\n            } else {\r\n                this._getKeys('*', options, async (err, keys) => {\r\n                    let objs;\r\n                    try {\r\n                        objs = await this.client.mget(keys);\r\n                    } catch (e) {\r\n                        return tools.maybeCallbackWithError(callback, e);\r\n                    }\r\n                    objs = objs || [];\r\n                    // Assume it is name\r\n                    for (let i = 0; i < keys.length; i++) {\r\n                        try {\r\n                            objs[i] = JSON.parse(objs[i]);\r\n                        } catch (e) {\r\n                            this.log.error(`${this.namespace} Cannot parse JSON ${keys[i]}: ${objs[i]}`);\r\n                            continue;\r\n                        }\r\n                        if (objs[i].common &&\r\n                                objs[i].common.name === idOrName &&\r\n                                (!type || (objs[i].common && objs[i].common.type === type))) {\r\n                            return tools.maybeCallbackWithError(callback, null, objs[i]._id, idOrName);\r\n                        }\r\n                    }\r\n                    return tools.maybeCallbackWithError(callback, null, null, idOrName);\r\n                }, true);\r\n            }\r\n        });\r\n    }\r\n\r\n    findObject(idOrName, type, options, callback) {\r\n        if (typeof type === 'function') {\r\n            callback = type;\r\n            options = null;\r\n            type = null;\r\n        }\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = null;\r\n        }\r\n        if (!callback) {\r\n            return new Promise((resolve, reject) =>\r\n                this.findObject(idOrName, type, options, (err, id, _idOrName) =>\r\n                    err ? reject(err) : resolve(id)));\r\n        }\r\n\r\n        if (options && options.acl) {\r\n            options.acl = null;\r\n        }\r\n\r\n        if (typeof callback === 'function') {\r\n            utils.checkObjectRights(this, null, null, options, utils.CONSTS.ACCESS_LIST, (err, options) => {\r\n                if (err) {\r\n                    return tools.maybeCallbackWithError(callback, err);\r\n                } else {\r\n                    return this._findObject(idOrName, type, options, callback);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    findObjectAsync(idOrName, type, options) {\r\n        return new Promise((resolve, reject) =>\r\n            this.findObject(idOrName, type, options, (err, id, _idOrName) =>\r\n                err ? reject(err) : resolve(id)));\r\n    }\r\n\r\n    // can be called only from js-controller\r\n    addPreserveSettings(settings) {\r\n        if (!Array.isArray(settings)) {\r\n            settings = [settings];\r\n        }\r\n\r\n        for (let s = 0; s < settings.length; s++) {\r\n            if (this.preserveSettings.indexOf(settings[s]) === -1) {\r\n                this.preserveSettings.push(settings[s]);\r\n            }\r\n        }\r\n    }\r\n\r\n    async _destroyDBHelper(keys, callback) {\r\n        if (!keys || !keys.length) {\r\n            return tools.maybeCallback(callback);\r\n        } else {\r\n            if (!this.client) {\r\n                return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n            }\r\n\r\n            for (const id of keys) {\r\n                try {\r\n                    await this.client.del(id);\r\n                } catch {\r\n                    // ignore\r\n                }\r\n            }\r\n\r\n            return tools.maybeCallback(callback);\r\n        }\r\n    }\r\n\r\n    async _destroyDB(options, callback) {\r\n        if (!this.client) {\r\n            return tools.maybeCallbackWithError(callback, utils.ERRORS.ERROR_DB_CLOSED);\r\n        } else {\r\n            try {\r\n                const keys = await this._getKeysViaScan(`${this.redisNamespace}*`);\r\n                return this._destroyDBHelper(keys, callback);\r\n            } catch (e) {\r\n                return tools.maybeCallbackWithError(callback, e);\r\n            }\r\n        }\r\n    }\r\n\r\n    destroyDB(options, callback) {\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = null;\r\n        }\r\n        options = options || {};\r\n\r\n        utils.checkObjectRights(this, null, null, options, utils.CONSTS.ACCESS_WRITE, (err, options) => {\r\n            if (err) {\r\n                typeof callback === 'function' && setImmediate(() => callback(err));\r\n            } else {\r\n                if (!options.acl.file.write || options.user !== utils.CONSTS.SYSTEM_ADMIN_USER) {\r\n                    typeof callback === 'function' && setImmediate(() => callback(utils.ERRORS.ERROR_PERMISSION));\r\n                } else {\r\n                    return this._destroyDB(options, callback);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    destroyDBAsync(options) {\r\n        return new Promise((resolve, reject) =>\r\n            this.destroyDB(options, err =>\r\n                err ? reject(err) : resolve()));\r\n    }\r\n\r\n    // Destructor of the class. Called by shutting down.\r\n    async destroy() {\r\n        this.stop = true;\r\n        if (this.client) {\r\n            try {\r\n                await this.client.quit();\r\n                this.client = null;\r\n            } catch {\r\n                // ignore error\r\n            }\r\n\r\n        }\r\n        if (this.sub) {\r\n            try {\r\n                await this.sub.quit();\r\n                this.sub = null;\r\n            } catch {\r\n                // ignore error\r\n            }\r\n        }\r\n        if (this.subSystem) {\r\n            try {\r\n                await this.subSystem.quit();\r\n                this.subSystem = null;\r\n            } catch {\r\n                // ignore error\r\n            }\r\n        }\r\n    }\r\n\r\n    async loadLuaScripts(callback, _scripts) {\r\n        if (!_scripts) {\r\n            if (scriptFiles && scriptFiles.filter) {\r\n                _scripts = [];\r\n                for (const name in scriptFiles) {\r\n                    if (!Object.prototype.hasOwnProperty.call(scriptFiles, name)) {\r\n                        continue;\r\n                    }\r\n                    const shasum = crypto.createHash('sha1');\r\n                    const buf = Buffer.from(scriptFiles[name]);\r\n                    shasum.update(buf);\r\n                    _scripts.push({\r\n                        name,\r\n                        text: buf,\r\n                        hash: shasum.digest('hex')\r\n                    });\r\n                }\r\n            } else {\r\n                _scripts = fs.readdirSync(__dirname + '/lua/').map(name => {\r\n                    const shasum = crypto.createHash('sha1');\r\n                    const script = fs.readFileSync(__dirname + '/lua/' + name);\r\n                    shasum.update(script);\r\n                    const hash = shasum.digest('hex');\r\n                    return {name: name.replace(/\\.lua$/, ''), text: script, hash};\r\n                });\r\n            }\r\n            const hashes = _scripts.map(e => e.hash);\r\n            hashes.unshift('EXISTS');\r\n\r\n            if (!this.client) {\r\n                return;\r\n            }\r\n\r\n            let arr;\r\n            try {\r\n                arr = await this.client.script(hashes);\r\n            } catch {\r\n                // ignore\r\n            }\r\n\r\n            arr && _scripts.forEach((e, i) => _scripts[i].loaded = !!arr[i]);\r\n            return this.loadLuaScripts(callback, _scripts);\r\n        }\r\n\r\n        if (!this.client) {\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < _scripts.length; i++) {\r\n            if (!_scripts[i].loaded) {\r\n                const script = _scripts[i];\r\n                let hash;\r\n                try {\r\n                    hash = await this.client.script(['LOAD', script.text]);\r\n                    script.loaded = true;\r\n                } catch (e) {\r\n                    script.loaded = false;\r\n                    this.log.error(this.namespace + ' Cannot load \"' + script.name + '\": ' + e);\r\n                }\r\n                script.hash = hash;\r\n                return setImmediate(() => this.loadLuaScripts(callback, _scripts));\r\n            }\r\n        }\r\n        this.scripts = {};\r\n        _scripts.forEach(e => this.scripts[e.name] = e.hash);\r\n        typeof callback === 'function' && callback();\r\n    }\r\n\r\n    /**\r\n     * Get all keys matching a pattern using redis SCAN command, duplicates are filtered out\r\n     *\r\n     * @param {string} pattern - pattern to match, e. g. io.hm-rpc.0*\r\n     * @param {number} count - count argument used by redis SCAN, default is 500\r\n     * @return {Promise<string[]>}\r\n     * @private\r\n     */\r\n    _getKeysViaScan(pattern, count= 500) {\r\n        return new Promise(resolve => {\r\n            const stream = this.client.scanStream({match: pattern, count: count});\r\n            let uniqueKeys = [];\r\n\r\n            stream.on('data', resultKeys => {\r\n                // append result keys to uniqueKeys without duplicates\r\n                uniqueKeys = [...uniqueKeys, ...resultKeys];\r\n            });\r\n\r\n            stream.on('end', () => {\r\n                // return without duplicates\r\n                resolve(Array.from(new Set(uniqueKeys)));\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nmodule.exports = ObjectsInRedis;"],"file":"../../dist/index.js"}